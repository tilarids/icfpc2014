mov h, 255                    ; initialize stack  #0
int 1                         ; get lambdaman current coords in (a,b) ; hunter bot - try to run towards lambdaman  #1
div a,2                       ; #2
div b,2                       ; #3
mov c,a                       ; lambdaman scaled coords in (c,d) 0..127  #4
mov d,b                       ; #5
int 3                         ; #6
int 5                         ; get our curr. coords in (a,b) 0..127  #7
div a,2                       ; #8
div b,2                       ; our scaled coords in (a,b)  #9
sub c,a                       ; #10
sub d,b                       ; (c,d) - relative coords of enemy -127..127  #11
mov f, d                      ; y  #12
sub f, c                      ; f = y - x  #13
add d, c                      ; d = y + x  #14
mov a, 1                      ; #15
jlt 18, d, 128                ;=>m19  #16
mov a, 0                      ; d < 0  #17
jgt 22, f, 127                ; <=m19 =>m24  #18
mov a, 3                      ; f > 0  #19
jgt 22, d, 127                ;=>m24  #20
mov a, 2                      ; d > 0  #21
mov c,a                       ;<=m24  #22
int 3                         ; #23
int 6                         ; a = vitality  #24
jeq 27,a,1                    ;=>panic  #25
xor c,2                       ; inverse direction ; normal or invisible mode  #26
xor c,2                       ; inverse direction <=panic  #27
mov a,c                       ; #28
int 0                         ; set new dir  #29
mov [h], pc                   ; call rng  #30
add [h], 4                    ; #31
sub h, 1                      ; #32
mov pc, 42                    ;=>rng  #33
mov b,a                       ; #34
mov [h], pc                   ; call rng  #35
add [h], 4                    ; #36
sub h, 1                      ; #37
mov pc, 42                    ;=>rng  #38
int 7                         ; #39
jeq 30,a,a                    ;=>loop  #40
hlt                           ; #41
mov a,[42]                    ;<=rng  #42
jeq 47,a,0                    ;=>do_xor  #43
add a,a                       ; #44
jeq 48,a,0                    ;=>no_xor  #45
jlt 48,a,128                  ;=>no_xor  #46
xor a,29                      ;<=do_xor  #47
mov [42],a                    ;<=no_xor  #48
add h, 1                      ;return  #49
mov pc, [h]                   ; #50
