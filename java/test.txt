LDC    1            ;  <== entryPoint  [WorldState ws, ListCons<ListCons> ghostSpecs] (as blk) ; 0
LDC    1            ; just constant from code ; 1
CEQ                  ; 2
SEL    5 13         ; IF? 1 ; 3
RTN                  ; 4
LD     0 0          ; THEN: 1 ; 5
LD     0 1          ; var ghostSpecs ; 6
LDC 0               ; local var space ; 7
LDC 0               ; local var space ; 8
LDC 0               ; local var space ; 9
LDF    2534         ;  @entryFactual ; 10
AP     5             ; 11
JOIN                 ; 12
LDC 0               ; ELSE: 1 ; 13
LDC 0               ; local var space ; 14
LDC 0               ; local var space ; 15
LDC 0               ; local var space ; 16
LDC 0               ; local var space ; 17
LDF    2498         ;  @entryCPUEmulator ; 18
AP     5             ; 19
JOIN                 ; 20
LD     0 0          ;  <== mydebug  [T o] (as blk) ; 21
DBUG                 ; 22
LD     0 0          ; var o ; 23
RTN                  ; 24
LD     0 0          ;  <== mydebugv  [Object tag, T o] (as blk) ; 25
DBUG                 ; 26
LD     0 1          ; var o ; 27
DBUG                 ; 28
LD     0 1          ; var o ; 29
RTN                  ; 30
LD     0 2          ;  <== foldl  [Function2<A,B,A> f, A a, ListCons<B> l] (as blk) ; 31
ATOM                 ; 32
SEL    35 37        ; IF? 2 ; 33
RTN                  ; 34
LD     0 1          ; THEN: 2 ; 35
JOIN                 ; 36
LD     0 0          ; ELSE: 2 ; 37
LD     0 1          ; var a ; 38
LD     0 2          ; var l ; 39
CAR                  ; 40
LD     0 0          ; var f ; 41
AP     2             ; 42
LD     0 2          ; var l ; 43
CDR                  ; 44
LDF    31           ;  @foldl ; 45
AP     3             ; 46
JOIN                 ; 47
LD     0 2          ;  <== foldr  [Function2<A,B,B> f, B a, ListCons<A> l] (as blk) ; 48
ATOM                 ; 49
SEL    52 54        ; IF? 3 ; 50
RTN                  ; 51
LD     0 1          ; THEN: 3 ; 52
JOIN                 ; 53
LD     0 2          ; ELSE: 3 ; 54
CAR                  ; 55
LD     0 0          ; var f ; 56
LD     0 1          ; var a ; 57
LD     0 2          ; var l ; 58
CDR                  ; 59
LDF    48           ;  @foldr ; 60
AP     3             ; 61
LD     0 0          ; var f ; 62
AP     2             ; 63
JOIN                 ; 64
LDF    10123        ;  <== o  [final Function1<B,C> f, final Function1<A,B> g] (as blk), ALSO: @lambda_1000 ; 65
RTN                  ; 66
LDF    10129        ;  <== flip  [Function2<A,B,C> f] (as blk), ALSO: @lambda_1001 ; 67
RTN                  ; 68
LD     0 0          ;  <== map  [ListCons<T> c, Function1<T,T2> arg] (as blk) ; 69
ATOM                 ; 70
SEL    73 75        ; IF? 4 ; 71
RTN                  ; 72
LDC    0            ; THEN: 4 ; 73
JOIN                 ; 74
LD     0 0          ; ELSE: 4 ; 75
CAR                  ; 76
LD     0 1          ; var arg ; 77
AP     1             ; 78
LD     0 0          ; var c ; 79
CDR                  ; 80
LD     0 1          ; var arg ; 81
LDF    69           ;  @map ; 82
AP     2             ; 83
CONS                 ; 84
JOIN                 ; 85
LD     0 0          ;  <== mapi  [ListCons<D> c, int ix, Function2<D,Integer,D2> arg] (as blk) ; 86
ATOM                 ; 87
SEL    90 92        ; IF? 5 ; 88
RTN                  ; 89
LDC    0            ; THEN: 5 ; 90
JOIN                 ; 91
LD     0 0          ; ELSE: 5 ; 92
CAR                  ; 93
LD     0 1          ; var ix ; 94
LD     0 2          ; var arg ; 95
AP     2             ; 96
LD     0 0          ; var c ; 97
CDR                  ; 98
LD     0 1          ; var ix ; 99
LDC    1            ; just constant from code ; 100
ADD                  ; 101
LD     0 2          ; var arg ; 102
LDF    86           ;  @mapi ; 103
AP     3             ; 104
CONS                 ; 105
JOIN                 ; 106
LD     0 0          ;  <== cat_maybes  [ListCons<Maybe<D>> data] (as blk) ; 107
LDF    10134        ;  @lambda_1002 ; 108
LDF    69           ;  @map ; 109
AP     2             ; 110
ST     0 1           ; 111
LD     0 1          ; var mtl ; 112
LDF    118          ;  @concat ; 113
AP     1             ; 114
ST     0 2           ; 115
LD     0 2          ; var rv ; 116
RTN                  ; 117
LD     0 0          ;  <== concat  [ListCons<ListCons<D>> data] (as blk) ; 118
LDC    0            ; NULL literal ; 119
LDF    149          ;  @concat_acc ; 120
AP     2             ; 121
LDF    299          ;  @reverse ; 122
AP     1             ; 123
RTN                  ; 124
LD     0 0          ;  <== last  [ListCons<D> data] (as blk) ; 125
ATOM                 ; 126
SEL    133 135       ; 127
LD     0 0          ; var data ; 128
CDR                  ; 129
ATOM                 ; 130
SEL    136 139      ; IF? 8 ; 131
RTN                  ; 132
BRK                 ; branch@133 ; 133
JOIN                 ; 134
JOIN                ; branch@135 ; 135
LD     0 0          ; THEN: 8 ; 136
CAR                  ; 137
JOIN                 ; 138
LD     0 0          ; ELSE: 8 ; 139
CDR                  ; 140
LDF    125          ;  @last ; 141
AP     1             ; 142
JOIN                 ; 143
LD     0 0          ;  <== concat_set  [ListCons<ListCons<D>> data] (as blk) ; 144
LDC    0            ; NULL literal ; 145
LDF    149          ;  @concat_acc ; 146
AP     2             ; 147
RTN                  ; 148
LD     0 0          ;  <== concat_acc  [ListCons<ListCons<D>> data, ListCons<D> acc] (as blk) ; 149
ATOM                 ; 150
SEL    153 155      ; IF? 6 ; 151
RTN                  ; 152
LD     0 1          ; THEN: 6 ; 153
JOIN                 ; 154
LD     0 0          ; ELSE: 6 ; 155
CDR                  ; 156
LD     0 0          ; var data ; 157
CAR                  ; 158
LD     0 1          ; var acc ; 159
LDF    165          ;  @concat2 ; 160
AP     2             ; 161
LDF    149          ;  @concat_acc ; 162
AP     2             ; 163
JOIN                 ; 164
LD     0 0          ;  <== concat2  [ListCons<D> data, ListCons<D> data2] (as blk) ; 165
ATOM                 ; 166
SEL    169 171      ; IF? 9 ; 167
RTN                  ; 168
LD     0 1          ; THEN: 9 ; 169
JOIN                 ; 170
LD     0 1          ; ELSE: 9 ; 171
ATOM                 ; 172
SEL    175 177      ; IF? 85 ; 173
JOIN                 ; 174
LD     0 0          ; THEN: 85 ; 175
JOIN                 ; 176
LD     0 0          ; ELSE: 85 ; 177
LDF    299          ;  @reverse ; 178
AP     1             ; 179
LD     0 1          ; var data2 ; 180
LDF    201          ;  @concat2_acc ; 181
AP     2             ; 182
JOIN                 ; 183
LD     0 0          ;  <== concat2_set  [ListCons<D> data, ListCons<D> data2] (as blk) ; 184
ATOM                 ; 185
SEL    188 190      ; IF? 10 ; 186
RTN                  ; 187
LD     0 1          ; THEN: 10 ; 188
JOIN                 ; 189
LD     0 1          ; ELSE: 10 ; 190
ATOM                 ; 191
SEL    194 196      ; IF? 86 ; 192
JOIN                 ; 193
LD     0 0          ; THEN: 86 ; 194
JOIN                 ; 195
LD     0 0          ; ELSE: 86 ; 196
LD     0 1          ; var data2 ; 197
LDF    201          ;  @concat2_acc ; 198
AP     2             ; 199
JOIN                 ; 200
LD     0 0          ;  <== concat2_acc  [ListCons<D> data, ListCons<D> acc] (as blk) ; 201
ATOM                 ; 202
SEL    205 207      ; IF? 11 ; 203
RTN                  ; 204
LD     0 1          ; THEN: 11 ; 205
JOIN                 ; 206
LD     0 0          ; ELSE: 11 ; 207
CDR                  ; 208
LD     0 0          ; var data ; 209
CAR                  ; 210
LD     0 1          ; var acc ; 211
CONS                 ; 212
LDF    201          ;  @concat2_acc ; 213
AP     2             ; 214
JOIN                 ; 215
LDC    0            ;  <== NOTHING  [] (as blk) ; 216
LDC    0            ; NULL literal ; 217
CONS                 ; 218
RTN                  ; 219
LDC    1            ;  <== JUST  [T t] (as blk) ; 220
LD     0 0          ; var t ; 221
CONS                 ; 222
ST     0 1           ; 223
LD     0 1          ; var tMaybe ; 224
RTN                  ; 225
LD     0 0          ;  <== maybeToList  [Maybe<D> d] (as blk) ; 226
LDF    283          ;  @is_nothing ; 227
AP     1             ; 228
LDC    1            ; just constant from code ; 229
CEQ                  ; 230
SEL    233 235      ; IF? 12 ; 231
RTN                  ; 232
LDC    0            ; THEN: 12 ; 233
JOIN                 ; 234
LD     0 0          ; ELSE: 12 ; 235
LDF    288          ;  @from_maybe ; 236
AP     1             ; 237
LDC    0            ; NULL literal ; 238
CONS                 ; 239
JOIN                 ; 240
LDC    0            ;  <== catMaybes_acc  [ListCons<Maybe<D>> data, ListCons<D> acc] (as blk) ; 241
ST     0 2           ; 242
LD     0 0          ; var data ; 243
ATOM                 ; 244
SEL    248 251       ; 245
LD     0 2          ; var rv ; 246
RTN                  ; 247
LD     0 1          ; branch@248 ; 248
ST     0 2           ; 249
JOIN                 ; 250
LD     0 0          ; branch@251 ; 251
CAR                  ; 252
LDF    283          ;  @is_nothing ; 253
AP     1             ; 254
ST     0 3           ; 255
LD     0 0          ; var data ; 256
CAR                  ; 257
LDF    288          ;  @from_maybe ; 258
AP     1             ; 259
ST     0 4           ; 260
LD     0 4          ; var data1 ; 261
LD     0 1          ; var acc ; 262
CONS                 ; 263
ST     0 5           ; 264
LD     0 0          ; var data ; 265
CDR                  ; 266
LD     0 3          ; var nothing ; 267
LDC    1            ; just constant from code ; 268
CEQ                  ; 269
SEL    279 281      ; IF? 87 ; 270
LDC 0               ; local var space ; 271
LDC 0               ; local var space ; 272
LDC 0               ; local var space ; 273
LDC 0               ; local var space ; 274
LDF    241          ;  @catMaybes_acc ; 275
AP     6             ; 276
ST     0 2           ; 277
JOIN                 ; 278
LD     0 1          ; THEN: 87 ; 279
JOIN                 ; 280
LD     0 5          ; ELSE: 87 ; 281
JOIN                 ; 282
LDC    1            ;  <== is_nothing  [Maybe<D> head] (as blk) ; 283
LD     0 0          ; var head ; 284
CAR                 ; generateTupleAccess total=2 pos=0 ; 285
SUB                  ; 286
RTN                  ; 287
LD     0 0          ;  <== from_maybe  [Maybe<D> head] (as blk) ; 288
CAR                 ; generateTupleAccess total=2 pos=0 ; 289
LDC    0            ; just constant from code ; 290
CEQ                  ; 291
SEL    296 298       ; 292
LD     0 0          ; var head ; 293
CDR                 ; generateTupleAccess total=2 pos=1 ; 294
RTN                  ; 295
BRK                 ; branch@296 ; 296
JOIN                 ; 297
JOIN                ; branch@298 ; 298
LD     0 0          ;  <== reverse  [ListCons<D> c] (as blk) ; 299
LDC    0            ; NULL literal ; 300
LDF    371          ;  @reverse_acc ; 301
AP     2             ; 302
RTN                  ; 303
LD     0 0          ;  <== maximum_by_acc  [ListCons<D> d, Function1<D,Integer> projection, D acc] (as blk) ; 304
ATOM                 ; 305
SEL    308 310      ; IF? 13 ; 306
RTN                  ; 307
LD     0 2          ; THEN: 13 ; 308
JOIN                 ; 309
LD     0 2          ; ELSE: 13 ; 310
LD     0 1          ; var projection ; 311
AP     1             ; 312
LD     0 0          ; var d ; 313
CAR                  ; 314
LD     0 1          ; var projection ; 315
AP     1             ; 316
CGT                  ; 317
SEL    320 327      ; IF? 88 ; 318
JOIN                 ; 319
LD     0 0          ; THEN: 88 ; 320
CDR                  ; 321
LD     0 1          ; var projection ; 322
LD     0 2          ; var acc ; 323
LDF    304          ;  @maximum_by_acc ; 324
AP     3             ; 325
JOIN                 ; 326
LD     0 0          ; ELSE: 88 ; 327
CDR                  ; 328
LD     0 1          ; var projection ; 329
LD     0 0          ; var d ; 330
CAR                  ; 331
LDF    304          ;  @maximum_by_acc ; 332
AP     3             ; 333
JOIN                 ; 334
LD     0 0          ;  <== maximum_by  [ListCons<D> d, Function1<D,Integer> projection] (as blk) ; 335
ATOM                 ; 336
SEL    346 348       ; 337
LD     0 0          ; var d ; 338
CDR                  ; 339
LD     0 1          ; var projection ; 340
LD     0 0          ; var d ; 341
CAR                  ; 342
LDF    304          ;  @maximum_by_acc ; 343
AP     3             ; 344
RTN                  ; 345
BRK                 ; branch@346 ; 346
JOIN                 ; 347
JOIN                ; branch@348 ; 348
LD     0 0          ;  <== dropWhile  [ListCons<D> c, Function1<D,Integer> test] (as blk) ; 349
ATOM                 ; 350
SEL    353 355      ; IF? 14 ; 351
RTN                  ; 352
LDC    0            ; THEN: 14 ; 353
JOIN                 ; 354
LD     0 0          ; ELSE: 14 ; 355
CAR                  ; 356
LD     0 1          ; var test ; 357
AP     1             ; 358
LDC    1            ; just constant from code ; 359
CEQ                  ; 360
SEL    363 369      ; IF? 89 ; 361
JOIN                 ; 362
LD     0 0          ; THEN: 89 ; 363
CDR                  ; 364
LD     0 1          ; var test ; 365
LDF    349          ;  @dropWhile ; 366
AP     2             ; 367
JOIN                 ; 368
LD     0 0          ; ELSE: 89 ; 369
JOIN                 ; 370
LD     0 0          ;  <== reverse_acc  [ListCons<D> c, ListCons<D> acc] (as blk) ; 371
ATOM                 ; 372
SEL    375 377      ; IF? 7 ; 373
RTN                  ; 374
LD     0 1          ; THEN: 7 ; 375
JOIN                 ; 376
LD     0 0          ; ELSE: 7 ; 377
CDR                  ; 378
LD     0 0          ; var c ; 379
CAR                  ; 380
LD     0 1          ; var acc ; 381
CONS                 ; 382
LDF    371          ;  @reverse_acc ; 383
AP     2             ; 384
JOIN                 ; 385
LD     0 0          ;  <== fold0  [ListCons<I> c, R init, Function2<R,I,R> arg] (as blk) ; 386
ATOM                 ; 387
SEL    390 392      ; IF? 15 ; 388
RTN                  ; 389
LD     0 1          ; THEN: 15 ; 390
JOIN                 ; 391
LD     0 0          ; ELSE: 15 ; 392
CDR                  ; 393
LD     0 1          ; var init ; 394
LD     0 0          ; var c ; 395
CAR                  ; 396
LD     0 2          ; var arg ; 397
AP     2             ; 398
LD     0 2          ; var arg ; 399
LDF    386          ;  @fold0 ; 400
AP     3             ; 401
JOIN                 ; 402
LDC    0            ;  <== queue_new  [] (as blk) ; 403
LDC    0            ; NULL literal ; 404
CONS                 ; 405
RTN                  ; 406
LD     0 0          ;  <== queue_enqueue  [Queue<T> q, T v] (as blk) ; 407
CAR                 ; generateTupleAccess total=2 pos=0 ; 408
LD     0 1          ; var v ; 409
LD     0 0          ; var q ; 410
CDR                 ; generateTupleAccess total=2 pos=1 ; 411
CONS                 ; 412
CONS                 ; 413
RTN                  ; 414
LD     0 0          ;  <== queue_isempty  [Queue<T> q] (as blk) ; 415
CAR                 ; generateTupleAccess total=2 pos=0 ; 416
ATOM                 ; 417
LD     0 0          ; var q ; 418
CDR                 ; generateTupleAccess total=2 pos=1 ; 419
ATOM                 ; 420
MUL                  ; 421
RTN                  ; 422
LDC    0            ;  <== list_item  [Cons list, int n] (as blk) ; 423
LD     0 1          ; var n ; 424
CGT                  ; 425
SEL    432 434       ; 426
LD     0 1          ; var n ; 427
LDC    0            ; just constant from code ; 428
CEQ                  ; 429
SEL    435 438      ; IF? 16 ; 430
RTN                  ; 431
BRK                 ; branch@432 ; 432
JOIN                 ; 433
JOIN                ; branch@434 ; 434
LD     0 0          ; THEN: 16 ; 435
CAR                  ; 436
JOIN                 ; 437
LD     0 0          ; ELSE: 16 ; 438
CDR                  ; 439
LD     0 1          ; var n ; 440
LDC    1            ; just constant from code ; 441
SUB                  ; 442
LDF    423          ;  @list_item ; 443
AP     2             ; 444
JOIN                 ; 445
LDC    0            ;  <== list_item  [ListCons<T> list, int n] (as blk) ; 446
LD     0 1          ; var n ; 447
CGT                  ; 448
SEL    455 457       ; 449
LD     0 1          ; var n ; 450
LDC    0            ; just constant from code ; 451
CEQ                  ; 452
SEL    458 461      ; IF? 17 ; 453
RTN                  ; 454
BRK                 ; branch@455 ; 455
JOIN                 ; 456
JOIN                ; branch@457 ; 457
LD     0 0          ; THEN: 17 ; 458
CAR                  ; 459
JOIN                 ; 460
LD     0 0          ; ELSE: 17 ; 461
CDR                  ; 462
LD     0 1          ; var n ; 463
LDC    1            ; just constant from code ; 464
SUB                  ; 465
LDF    423          ;  @list_item ; 466
AP     2             ; 467
JOIN                 ; 468
LDC    0            ;  <== list_item_def  [Cons list, int index, Object deflt] (as blk) ; 469
LD     0 1          ; var index ; 470
CGT                  ; 471
SEL    474 476      ; IF? 18 ; 472
RTN                  ; 473
LD     0 2          ; THEN: 18 ; 474
JOIN                 ; 475
LD     0 1          ; ELSE: 18 ; 476
LDC    0            ; just constant from code ; 477
CEQ                  ; 478
SEL    481 484      ; IF? 90 ; 479
JOIN                 ; 480
LD     0 0          ; THEN: 90 ; 481
CAR                  ; 482
JOIN                 ; 483
LD     0 0          ; ELSE: 90 ; 484
CDR                  ; 485
LD     0 1          ; var index ; 486
LDC    1            ; just constant from code ; 487
SUB                  ; 488
LDF    423          ;  @list_item ; 489
AP     2             ; 490
JOIN                 ; 491
LDC    0            ;  <== queue_dequeue  [Queue<T> q] (as blk) ; 492
ST     0 1           ; 493
LD     0 0          ; var q ; 494
CAR                 ; generateTupleAccess total=2 pos=0 ; 495
ATOM                 ; 496
SEL    500 507       ; 497
LD     0 1          ; var retval ; 498
RTN                  ; 499
LD     0 0          ; branch@500 ; 500
CDR                 ; generateTupleAccess total=2 pos=1 ; 501
ATOM                 ; 502
LDC    1            ; for negation ; 503
SUB                  ; 504
SEL    519 530       ; 505
JOIN                 ; 506
LD     0 0          ; branch@507 ; 507
CAR                 ; generateTupleAccess total=2 pos=0 ; 508
CAR                  ; 509
LD     0 0          ; var q ; 510
CAR                 ; generateTupleAccess total=2 pos=0 ; 511
CDR                  ; 512
LD     0 0          ; var q ; 513
CDR                 ; generateTupleAccess total=2 pos=1 ; 514
CONS                 ; 515
CONS                 ; 516
ST     0 1           ; 517
JOIN                 ; 518
LD     0 0          ; branch@519 ; 519
CDR                 ; generateTupleAccess total=2 pos=1 ; 520
LDF    299          ;  @reverse ; 521
AP     1             ; 522
LDC    0            ; NULL literal ; 523
CONS                 ; 524
LDC 0               ; local var space ; 525
LDF    492          ;  @queue_dequeue ; 526
AP     2             ; 527
ST     0 1           ; 528
JOIN                 ; 529
BRK                 ; branch@530 ; 530
JOIN                 ; 531
LD     0 0          ;  <== length  [ListCons<T> list] (as blk) ; 532
LDC    0            ; just constant from code ; 533
LDF    646          ;  @elements_counter ; 534
AP     2             ; 535
RTN                  ; 536
LD     0 0          ;  <== filter  [ListCons<T> list, Function1<T,Integer> pred] (as blk) ; 537
LD     0 1          ; var pred ; 538
LDC    0            ; NULL literal ; 539
LDF    609          ;  @filter_acc ; 540
AP     3             ; 541
LDF    299          ;  @reverse ; 542
AP     1             ; 543
RTN                  ; 544
LD     0 0          ;  <== any  [ListCons<T> list, Function1<T,Integer> pred] (as blk) ; 545
ATOM                 ; 546
SEL    549 551      ; IF? 21 ; 547
RTN                  ; 548
LDC    0            ; THEN: 21 ; 549
JOIN                 ; 550
LD     0 0          ; ELSE: 21 ; 551
CAR                  ; 552
LD     0 1          ; var pred ; 553
AP     1             ; 554
LDC    1            ; just constant from code ; 555
CEQ                  ; 556
SEL    559 561      ; IF? 91 ; 557
JOIN                 ; 558
LDC    1            ; THEN: 91 ; 559
JOIN                 ; 560
LD     0 0          ; ELSE: 91 ; 561
CDR                  ; 562
LD     0 1          ; var pred ; 563
LDF    545          ;  @any ; 564
AP     2             ; 565
JOIN                 ; 566
LD     0 0          ;  <== noneof  [ListCons<T> list, Function1<T,Integer> pred] (as blk) ; 567
ATOM                 ; 568
SEL    571 573      ; IF? 22 ; 569
RTN                  ; 570
LDC    1            ; THEN: 22 ; 571
JOIN                 ; 572
LD     0 0          ; ELSE: 22 ; 573
CAR                  ; 574
LD     0 1          ; var pred ; 575
AP     1             ; 576
LDC    1            ; just constant from code ; 577
CEQ                  ; 578
SEL    581 583      ; IF? 92 ; 579
JOIN                 ; 580
LDC    0            ; THEN: 92 ; 581
JOIN                 ; 582
LD     0 0          ; ELSE: 92 ; 583
CDR                  ; 584
LD     0 1          ; var pred ; 585
LDF    567          ;  @noneof ; 586
AP     2             ; 587
JOIN                 ; 588
LD     0 0          ;  <== empty  [Cons d] (as blk) ; 589
ATOM                 ; 590
LDC    1            ; for negation ; 591
SUB                  ; 592
SEL    595 597      ; IF? 23 ; 593
RTN                  ; 594
LDC    0            ; THEN: 23 ; 595
JOIN                 ; 596
LDC    1            ; ELSE: 23 ; 597
JOIN                 ; 598
LD     0 0          ;  <== notempty  [Cons d] (as blk) ; 599
ATOM                 ; 600
LDC    1            ; for negation ; 601
SUB                  ; 602
SEL    605 607      ; IF? 24 ; 603
RTN                  ; 604
LDC    1            ; THEN: 24 ; 605
JOIN                 ; 606
LDC    0            ; ELSE: 24 ; 607
JOIN                 ; 608
LD     0 0          ;  <== filter_acc  [ListCons<T> list, Function1<T,Integer> pred, ListCons<T> acc] (as blk) ; 609
ATOM                 ; 610
SEL    613 615      ; IF? 20 ; 611
RTN                  ; 612
LD     0 2          ; THEN: 20 ; 613
JOIN                 ; 614
LD     0 0          ; ELSE: 20 ; 615
CDR                  ; 616
LD     0 1          ; var pred ; 617
LD     0 0          ; var list ; 618
CAR                  ; 619
LD     0 1          ; var pred ; 620
AP     1             ; 621
LDC    1            ; just constant from code ; 622
CEQ                  ; 623
SEL    628 633      ; IF? 93 ; 624
LDF    609          ;  @filter_acc ; 625
AP     3             ; 626
JOIN                 ; 627
LD     0 0          ; THEN: 93 ; 628
CAR                  ; 629
LD     0 2          ; var acc ; 630
CONS                 ; 631
JOIN                 ; 632
LD     0 2          ; ELSE: 93 ; 633
JOIN                 ; 634
LD     0 0          ;  <== map_height  [Cons map] (as blk) ; 635
LDC    0            ; just constant from code ; 636
LDF    646          ;  @elements_counter ; 637
AP     2             ; 638
RTN                  ; 639
LD     0 0          ;  <== map_width  [Cons map] (as blk) ; 640
CAR                  ; 641
LDC    0            ; just constant from code ; 642
LDF    646          ;  @elements_counter ; 643
AP     2             ; 644
RTN                  ; 645
LD     0 0          ;  <== elements_counter  [Cons list, int counter] (as blk) ; 646
ATOM                 ; 647
SEL    650 652      ; IF? 19 ; 648
RTN                  ; 649
LD     0 1          ; THEN: 19 ; 650
JOIN                 ; 651
LD     0 0          ; ELSE: 19 ; 652
CDR                  ; 653
LD     0 1          ; var counter ; 654
LDC    1            ; just constant from code ; 655
ADD                  ; 656
LDF    646          ;  @elements_counter ; 657
AP     2             ; 658
JOIN                 ; 659
LD     0 1          ;  <== zip_with  [Function2<A,B,C> f, ListCons<A> x, ListCons<B> y] (as blk) ; 660
ATOM                 ; 661
SEL    664 666      ; IF? 25 ; 662
RTN                  ; 663
LDC    0            ; THEN: 25 ; 664
JOIN                 ; 665
LD     0 2          ; ELSE: 25 ; 666
ATOM                 ; 667
SEL    670 672      ; IF? 94 ; 668
JOIN                 ; 669
LDC    0            ; THEN: 94 ; 670
JOIN                 ; 671
LD     0 1          ; ELSE: 94 ; 672
CAR                  ; 673
LD     0 2          ; var y ; 674
CAR                  ; 675
LD     0 0          ; var f ; 676
AP     2             ; 677
LD     0 0          ; var f ; 678
LD     0 1          ; var x ; 679
CDR                  ; 680
LD     0 2          ; var y ; 681
CDR                  ; 682
LDF    660          ;  @zip_with ; 683
AP     3             ; 684
CONS                 ; 685
JOIN                 ; 686
LD     0 1          ;  <== zip3_with  [Function3<A,B,C,R> f, ListCons<A> x, ListCons<B> y, ListCons<C> z] (as blk) ; 687
ATOM                 ; 688
SEL    691 693      ; IF? 26 ; 689
RTN                  ; 690
LDC    0            ; THEN: 26 ; 691
JOIN                 ; 692
LD     0 2          ; ELSE: 26 ; 693
ATOM                 ; 694
SEL    697 699      ; IF? 95 ; 695
JOIN                 ; 696
LDC    0            ; THEN: 95 ; 697
JOIN                 ; 698
LD     0 3          ; ELSE: 95 ; 699
ATOM                 ; 700
SEL    703 705      ; IF? 96 ; 701
JOIN                 ; 702
LDC    0            ; THEN: 96 ; 703
JOIN                 ; 704
LD     0 1          ; ELSE: 96 ; 705
CAR                  ; 706
LD     0 2          ; var y ; 707
CAR                  ; 708
LD     0 3          ; var z ; 709
CAR                  ; 710
LD     0 0          ; var f ; 711
AP     3             ; 712
LD     0 0          ; var f ; 713
LD     0 1          ; var x ; 714
CDR                  ; 715
LD     0 2          ; var y ; 716
CDR                  ; 717
LD     0 3          ; var z ; 718
CDR                  ; 719
LDF    687          ;  @zip3_with ; 720
AP     4             ; 721
CONS                 ; 722
JOIN                 ; 723
LD     0 0          ;  <== zip  [final ListCons<A> x, final ListCons<B> y] (as blk) ; 724
ATOM                 ; 725
SEL    728 730      ; IF? 27 ; 726
RTN                  ; 727
LDC    0            ; THEN: 27 ; 728
JOIN                 ; 729
LD     0 1          ; ELSE: 27 ; 730
ATOM                 ; 731
SEL    734 736      ; IF? 97 ; 732
JOIN                 ; 733
LDC    0            ; THEN: 97 ; 734
JOIN                 ; 735
LD     0 0          ; ELSE: 97 ; 736
CAR                  ; 737
LD     0 1          ; var y ; 738
CAR                  ; 739
CONS                 ; 740
LD     0 0          ; var x ; 741
CDR                  ; 742
LD     0 1          ; var y ; 743
CDR                  ; 744
LDF    724          ;  @zip ; 745
AP     2             ; 746
CONS                 ; 747
JOIN                 ; 748
LD     0 1          ;  <== produce_n  [Function1<T,Cons> f, T a, int n] (as blk) ; 749
LD     0 0          ; var f ; 750
AP     1             ; 751
CAR                  ; 752
ST     0 3           ; 753
LD     0 2          ; var n ; 754
LDC    0            ; just constant from code ; 755
CEQ                  ; 756
SEL    759 763      ; IF? 28 ; 757
RTN                  ; 758
LD     0 3          ; THEN: 28 ; 759
LDC    0            ; NULL literal ; 760
CONS                 ; 761
JOIN                 ; 762
LD     0 3          ; ELSE: 28 ; 763
LD     0 0          ; var f ; 764
LD     0 1          ; var a ; 765
LD     0 0          ; var f ; 766
AP     1             ; 767
CDR                  ; 768
LD     0 2          ; var n ; 769
LDC    1            ; just constant from code ; 770
SUB                  ; 771
LDC 0               ; local var space ; 772
LDF    749          ;  @produce_n ; 773
AP     4             ; 774
CONS                 ; 775
JOIN                 ; 776
LD     0 0          ;  <== range_n  [int n] (as blk) ; 777
LDC    0            ; just constant from code ; 778
CEQ                  ; 779
SEL    782 786      ; IF? 29 ; 780
RTN                  ; 781
LD     0 0          ; THEN: 29 ; 782
LDC    0            ; NULL literal ; 783
CONS                 ; 784
JOIN                 ; 785
LD     0 0          ; ELSE: 29 ; 786
LD     0 0          ; var n ; 787
LDC    1            ; just constant from code ; 788
SUB                  ; 789
LDF    777          ;  @range_n ; 790
AP     1             ; 791
CONS                 ; 792
JOIN                 ; 793
LDC    1            ;  <== sorted_node_new  [int key, T val, int lev, SortedMapNode<T> lo, SortedMapNode<T> hi] (as blk) ; 794
LD     0 3          ; var lo ; 795
ATOM                 ; 796
LDC    1            ; for negation ; 797
SUB                  ; 798
SEL    818 821      ; IF? 30 ; 799
ADD                  ; 800
LD     0 4          ; var hi ; 801
ATOM                 ; 802
LDC    1            ; for negation ; 803
SUB                  ; 804
SEL    823 826      ; IF? 31 ; 805
ADD                  ; 806
LD     0 0          ; var key ; 807
LD     0 1          ; var val ; 808
LD     0 2          ; var lev ; 809
LD     0 3          ; var lo ; 810
LD     0 4          ; var hi ; 811
CONS                 ; 812
CONS                 ; 813
CONS                 ; 814
CONS                 ; 815
CONS                 ; 816
RTN                  ; 817
LD     0 3          ; THEN: 30 ; 818
CAR                 ; generateTupleAccess total=6 pos=0 ; 819
JOIN                 ; 820
LDC    0            ; ELSE: 30 ; 821
JOIN                 ; 822
LD     0 4          ; THEN: 31 ; 823
CAR                 ; generateTupleAccess total=6 pos=0 ; 824
JOIN                 ; 825
LDC    0            ; ELSE: 31 ; 826
JOIN                 ; 827
LD     0 0          ;  <== sorted_node_with_lev  [SortedMapNode<T> node, int lev] (as blk) ; 828
CDR                 ; generateTupleAccess total=6 pos=1 ; 829
CAR                  ; 830
LD     0 0          ; var node ; 831
CDR                 ; generateTupleAccess total=6 pos=2 ; 832
CDR                  ; 833
CAR                  ; 834
LD     0 1          ; var lev ; 835
LD     0 0          ; var node ; 836
CDR                 ; generateTupleAccess total=6 pos=4 ; 837
CDR                  ; 838
CDR                  ; 839
CDR                  ; 840
CAR                  ; 841
LD     0 0          ; var node ; 842
CDR                 ; generateTupleAccess total=6 pos=5 ; 843
CDR                  ; 844
CDR                  ; 845
CDR                  ; 846
CDR                  ; 847
LDF    794          ;  @sorted_node_new ; 848
AP     5             ; 849
RTN                  ; 850
LD     0 0          ;  <== sorted_node_with_lo_hi  [SortedMapNode<T> node, SortedMapNode<T> lo, SortedMapNode<T> hi] (as blk) ; 851
CDR                 ; generateTupleAccess total=6 pos=1 ; 852
CAR                  ; 853
LD     0 0          ; var node ; 854
CDR                 ; generateTupleAccess total=6 pos=2 ; 855
CDR                  ; 856
CAR                  ; 857
LD     0 0          ; var node ; 858
CDR                 ; generateTupleAccess total=6 pos=3 ; 859
CDR                  ; 860
CDR                  ; 861
CAR                  ; 862
LD     0 1          ; var lo ; 863
LD     0 2          ; var hi ; 864
LDF    794          ;  @sorted_node_new ; 865
AP     5             ; 866
RTN                  ; 867
LD     0 0          ;  <== sorted_node_with_lo  [SortedMapNode<T> node, SortedMapNode<T> lo] (as blk) ; 868
LD     0 1          ; var lo ; 869
LD     0 0          ; var node ; 870
CDR                 ; generateTupleAccess total=6 pos=5 ; 871
CDR                  ; 872
CDR                  ; 873
CDR                  ; 874
CDR                  ; 875
LDF    851          ;  @sorted_node_with_lo_hi ; 876
AP     3             ; 877
RTN                  ; 878
LD     0 0          ;  <== sorted_node_with_hi  [SortedMapNode<T> node, SortedMapNode<T> hi] (as blk) ; 879
LD     0 0          ; var node ; 880
CDR                 ; generateTupleAccess total=6 pos=4 ; 881
CDR                  ; 882
CDR                  ; 883
CDR                  ; 884
CAR                  ; 885
LD     0 1          ; var hi ; 886
LDF    851          ;  @sorted_node_with_lo_hi ; 887
AP     3             ; 888
RTN                  ; 889
LD     0 0          ;  <== sorted_node_has  [SortedMapNode<T> node, int key] (as blk) ; 890
ATOM                 ; 891
SEL    894 896      ; IF? 32 ; 892
RTN                  ; 893
LDC    0            ; THEN: 32 ; 894
JOIN                 ; 895
LD     0 1          ; ELSE: 32 ; 896
LD     0 0          ; var node ; 897
CDR                 ; generateTupleAccess total=6 pos=1 ; 898
CAR                  ; 899
CEQ                  ; 900
SEL    903 905      ; IF? 98 ; 901
JOIN                 ; 902
LDC    1            ; THEN: 98 ; 903
JOIN                 ; 904
LD     0 0          ; ELSE: 98 ; 905
CDR                 ; generateTupleAccess total=6 pos=1 ; 906
CAR                  ; 907
LD     0 1          ; var key ; 908
CGT                  ; 909
SEL    915 922      ; IF? 99 ; 910
LD     0 1          ; var key ; 911
LDF    890          ;  @sorted_node_has ; 912
AP     2             ; 913
JOIN                 ; 914
LD     0 0          ; THEN: 99 ; 915
CDR                 ; generateTupleAccess total=6 pos=4 ; 916
CDR                  ; 917
CDR                  ; 918
CDR                  ; 919
CAR                  ; 920
JOIN                 ; 921
LD     0 0          ; ELSE: 99 ; 922
CDR                 ; generateTupleAccess total=6 pos=5 ; 923
CDR                  ; 924
CDR                  ; 925
CDR                  ; 926
CDR                  ; 927
JOIN                 ; 928
LD     0 0          ;  <== sorted_node_get  [SortedMapNode<T> node, int key, T def] (as blk) ; 929
ATOM                 ; 930
SEL    933 935      ; IF? 33 ; 931
RTN                  ; 932
LD     0 2          ; THEN: 33 ; 933
JOIN                 ; 934
LD     0 1          ; ELSE: 33 ; 935
LD     0 0          ; var node ; 936
CDR                 ; generateTupleAccess total=6 pos=1 ; 937
CAR                  ; 938
CEQ                  ; 939
SEL    942 947      ; IF? 100 ; 940
JOIN                 ; 941
LD     0 0          ; THEN: 100 ; 942
CDR                 ; generateTupleAccess total=6 pos=2 ; 943
CDR                  ; 944
CAR                  ; 945
JOIN                 ; 946
LD     0 0          ; ELSE: 100 ; 947
CDR                 ; generateTupleAccess total=6 pos=1 ; 948
CAR                  ; 949
LD     0 1          ; var key ; 950
CGT                  ; 951
SEL    958 965      ; IF? 101 ; 952
LD     0 1          ; var key ; 953
LD     0 2          ; var def ; 954
LDF    929          ;  @sorted_node_get ; 955
AP     3             ; 956
JOIN                 ; 957
LD     0 0          ; THEN: 101 ; 958
CDR                 ; generateTupleAccess total=6 pos=4 ; 959
CDR                  ; 960
CDR                  ; 961
CDR                  ; 962
CAR                  ; 963
JOIN                 ; 964
LD     0 0          ; ELSE: 101 ; 965
CDR                 ; generateTupleAccess total=6 pos=5 ; 966
CDR                  ; 967
CDR                  ; 968
CDR                  ; 969
CDR                  ; 970
JOIN                 ; 971
LD     0 0          ;  <== sorted_node_put  [SortedMapNode<T> node, int key, T val] (as blk) ; 972
ATOM                 ; 973
SEL    976 984      ; IF? 34 ; 974
RTN                  ; 975
LD     0 1          ; THEN: 34 ; 976
LD     0 2          ; var val ; 977
LDC    0            ; just constant from code ; 978
LDC    0            ; NULL literal ; 979
LDC    0            ; NULL literal ; 980
LDF    794          ;  @sorted_node_new ; 981
AP     5             ; 982
JOIN                 ; 983
LD     0 1          ; ELSE: 34 ; 984
LD     0 0          ; var node ; 985
CDR                 ; generateTupleAccess total=6 pos=1 ; 986
CAR                  ; 987
CEQ                  ; 988
SEL    991 999      ; IF? 102 ; 989
JOIN                 ; 990
LD     0 2          ; THEN: 102 ; 991
LD     0 0          ; var node ; 992
CDR                 ; generateTupleAccess total=6 pos=2 ; 993
CDR                  ; 994
CAR                  ; 995
CEQ                  ; 996
SEL    1009 1011    ; IF? 103 ; 997
JOIN                 ; 998
LD     0 0          ; ELSE: 102 ; 999
CDR                 ; generateTupleAccess total=6 pos=1 ; 1000
CAR                  ; 1001
LD     0 1          ; var key ; 1002
CGT                  ; 1003
SEL    1033 1048    ; IF? 104 ; 1004
LDC 0               ; local var space ; 1005
LDF    1120         ;  @sorted_node_split ; 1006
AP     2             ; 1007
JOIN                 ; 1008
LD     0 0          ; THEN: 103 ; 1009
JOIN                 ; 1010
LD     0 1          ; ELSE: 103 ; 1011
LD     0 2          ; var val ; 1012
LD     0 0          ; var node ; 1013
CDR                 ; generateTupleAccess total=6 pos=3 ; 1014
CDR                  ; 1015
CDR                  ; 1016
CAR                  ; 1017
LD     0 0          ; var node ; 1018
CDR                 ; generateTupleAccess total=6 pos=4 ; 1019
CDR                  ; 1020
CDR                  ; 1021
CDR                  ; 1022
CAR                  ; 1023
LD     0 0          ; var node ; 1024
CDR                 ; generateTupleAccess total=6 pos=5 ; 1025
CDR                  ; 1026
CDR                  ; 1027
CDR                  ; 1028
CDR                  ; 1029
LDF    794          ;  @sorted_node_new ; 1030
AP     5             ; 1031
JOIN                 ; 1032
LD     0 0          ; THEN: 104 ; 1033
LD     0 0          ; var node ; 1034
CDR                 ; generateTupleAccess total=6 pos=4 ; 1035
CDR                  ; 1036
CDR                  ; 1037
CDR                  ; 1038
CAR                  ; 1039
LD     0 1          ; var key ; 1040
LD     0 2          ; var val ; 1041
LDF    972          ;  @sorted_node_put ; 1042
AP     3             ; 1043
LDC 0               ; local var space ; 1044
LDF    1066         ;  @sorted_node_skew ; 1045
AP     3             ; 1046
JOIN                 ; 1047
LD     0 0          ; ELSE: 104 ; 1048
LD     0 0          ; var node ; 1049
CDR                 ; generateTupleAccess total=6 pos=5 ; 1050
CDR                  ; 1051
CDR                  ; 1052
CDR                  ; 1053
CDR                  ; 1054
LD     0 1          ; var key ; 1055
LD     0 2          ; var val ; 1056
LDF    972          ;  @sorted_node_put ; 1057
AP     3             ; 1058
LDF    879          ;  @sorted_node_with_hi ; 1059
AP     2             ; 1060
LDC    0            ; NULL literal ; 1061
LDC 0               ; local var space ; 1062
LDF    1066         ;  @sorted_node_skew ; 1063
AP     3             ; 1064
JOIN                 ; 1065
LD     0 1          ;  <== sorted_node_skew  [SortedMapNode<T> node, SortedMapNode<T> lo] (as blk) ; 1066
ATOM                 ; 1067
LDC    1            ; for negation ; 1068
SUB                  ; 1069
SEL    1081 1083    ; IF? 35 ; 1070
ST     0 1           ; 1071
LD     0 0          ; var node ; 1072
LD     0 1          ; var lo ; 1073
LDF    868          ;  @sorted_node_with_lo ; 1074
AP     2             ; 1075
ST     0 2           ; 1076
LD     0 1          ; var lo ; 1077
ATOM                 ; 1078
SEL    1090 1092    ; IF? 36 ; 1079
RTN                  ; 1080
LD     0 1          ; THEN: 35 ; 1081
JOIN                 ; 1082
LD     0 0          ; ELSE: 35 ; 1083
CDR                 ; generateTupleAccess total=6 pos=4 ; 1084
CDR                  ; 1085
CDR                  ; 1086
CDR                  ; 1087
CAR                  ; 1088
JOIN                 ; 1089
LD     0 2          ; THEN: 36 ; 1090
JOIN                 ; 1091
LD     0 0          ; ELSE: 36 ; 1092
CDR                 ; generateTupleAccess total=6 pos=3 ; 1093
CDR                  ; 1094
CDR                  ; 1095
CAR                  ; 1096
LD     0 1          ; var lo ; 1097
CDR                 ; generateTupleAccess total=6 pos=3 ; 1098
CDR                  ; 1099
CDR                  ; 1100
CAR                  ; 1101
CGT                  ; 1102
SEL    1105 1107    ; IF? 105 ; 1103
JOIN                 ; 1104
LD     0 2          ; THEN: 105 ; 1105
JOIN                 ; 1106
LD     0 1          ; ELSE: 105 ; 1107
LD     0 0          ; var node ; 1108
LD     0 1          ; var lo ; 1109
CDR                 ; generateTupleAccess total=6 pos=5 ; 1110
CDR                  ; 1111
CDR                  ; 1112
CDR                  ; 1113
CDR                  ; 1114
LDF    868          ;  @sorted_node_with_lo ; 1115
AP     2             ; 1116
LDF    879          ;  @sorted_node_with_hi ; 1117
AP     2             ; 1118
JOIN                 ; 1119
LD     0 0          ;  <== sorted_node_split  [SortedMapNode<T> node] (as blk) ; 1120
CDR                 ; generateTupleAccess total=6 pos=5 ; 1121
CDR                  ; 1122
CDR                  ; 1123
CDR                  ; 1124
CDR                  ; 1125
ST     0 1           ; 1126
LD     0 1          ; var hi ; 1127
ATOM                 ; 1128
SEL    1131 1133    ; IF? 37 ; 1129
RTN                  ; 1130
LD     0 0          ; THEN: 37 ; 1131
JOIN                 ; 1132
LD     0 1          ; ELSE: 37 ; 1133
CDR                 ; generateTupleAccess total=6 pos=5 ; 1134
CDR                  ; 1135
CDR                  ; 1136
CDR                  ; 1137
CDR                  ; 1138
ATOM                 ; 1139
SEL    1142 1144    ; IF? 106 ; 1140
JOIN                 ; 1141
LD     0 0          ; THEN: 106 ; 1142
JOIN                 ; 1143
LD     0 0          ; ELSE: 106 ; 1144
CDR                 ; generateTupleAccess total=6 pos=3 ; 1145
CDR                  ; 1146
CDR                  ; 1147
CAR                  ; 1148
LD     0 1          ; var hi ; 1149
CDR                 ; generateTupleAccess total=6 pos=5 ; 1150
CDR                  ; 1151
CDR                  ; 1152
CDR                  ; 1153
CDR                  ; 1154
CDR                 ; generateTupleAccess total=6 pos=3 ; 1155
CDR                  ; 1156
CDR                  ; 1157
CAR                  ; 1158
CGT                  ; 1159
SEL    1162 1164    ; IF? 107 ; 1160
JOIN                 ; 1161
LD     0 0          ; THEN: 107 ; 1162
JOIN                 ; 1163
LD     0 1          ; ELSE: 107 ; 1164
CDR                 ; generateTupleAccess total=6 pos=1 ; 1165
CAR                  ; 1166
LD     0 1          ; var hi ; 1167
CDR                 ; generateTupleAccess total=6 pos=2 ; 1168
CDR                  ; 1169
CAR                  ; 1170
LD     0 1          ; var hi ; 1171
CDR                 ; generateTupleAccess total=6 pos=3 ; 1172
CDR                  ; 1173
CDR                  ; 1174
CAR                  ; 1175
LDC    1            ; just constant from code ; 1176
ADD                  ; 1177
LD     0 0          ; var node ; 1178
LD     0 1          ; var hi ; 1179
CDR                 ; generateTupleAccess total=6 pos=4 ; 1180
CDR                  ; 1181
CDR                  ; 1182
CDR                  ; 1183
CAR                  ; 1184
LDF    879          ;  @sorted_node_with_hi ; 1185
AP     2             ; 1186
LD     0 1          ; var hi ; 1187
CDR                 ; generateTupleAccess total=6 pos=5 ; 1188
CDR                  ; 1189
CDR                  ; 1190
CDR                  ; 1191
CDR                  ; 1192
LDF    794          ;  @sorted_node_new ; 1193
AP     5             ; 1194
JOIN                 ; 1195
LD     0 0          ;  <== sorted_node_walk  [SortedMapNode<T> node, X acc, Function2<X,Tuple<Integer,T>,X> fun] (as blk) ; 1196
ATOM                 ; 1197
SEL    1200 1202    ; IF? 38 ; 1198
RTN                  ; 1199
LD     0 1          ; THEN: 38 ; 1200
JOIN                 ; 1201
LD     0 0          ; ELSE: 38 ; 1202
CDR                 ; generateTupleAccess total=6 pos=5 ; 1203
CDR                  ; 1204
CDR                  ; 1205
CDR                  ; 1206
CDR                  ; 1207
ATOM                 ; 1208
LDC    1            ; for negation ; 1209
SUB                  ; 1210
SEL    1213 1243    ; IF? 108 ; 1211
JOIN                 ; 1212
LD     0 0          ; THEN: 108 ; 1213
CDR                 ; generateTupleAccess total=6 pos=5 ; 1214
CDR                  ; 1215
CDR                  ; 1216
CDR                  ; 1217
CDR                  ; 1218
LD     0 0          ; var node ; 1219
CDR                 ; generateTupleAccess total=6 pos=4 ; 1220
CDR                  ; 1221
CDR                  ; 1222
CDR                  ; 1223
CAR                  ; 1224
LD     0 1          ; var acc ; 1225
LD     0 2          ; var fun ; 1226
LDF    1196         ;  @sorted_node_walk ; 1227
AP     3             ; 1228
LD     0 0          ; var node ; 1229
CDR                 ; generateTupleAccess total=6 pos=1 ; 1230
CAR                  ; 1231
LD     0 0          ; var node ; 1232
CDR                 ; generateTupleAccess total=6 pos=2 ; 1233
CDR                  ; 1234
CAR                  ; 1235
CONS                 ; 1236
LD     0 2          ; var fun ; 1237
AP     2             ; 1238
LD     0 2          ; var fun ; 1239
LDF    1196         ;  @sorted_node_walk ; 1240
AP     3             ; 1241
JOIN                 ; 1242
LD     0 0          ; ELSE: 108 ; 1243
CDR                 ; generateTupleAccess total=6 pos=4 ; 1244
CDR                  ; 1245
CDR                  ; 1246
CDR                  ; 1247
CAR                  ; 1248
LD     0 1          ; var acc ; 1249
LD     0 2          ; var fun ; 1250
LDF    1196         ;  @sorted_node_walk ; 1251
AP     3             ; 1252
LD     0 0          ; var node ; 1253
CDR                 ; generateTupleAccess total=6 pos=1 ; 1254
CAR                  ; 1255
LD     0 0          ; var node ; 1256
CDR                 ; generateTupleAccess total=6 pos=2 ; 1257
CDR                  ; 1258
CAR                  ; 1259
CONS                 ; 1260
LD     0 2          ; var fun ; 1261
AP     2             ; 1262
JOIN                 ; 1263
LD     0 0          ;  <== sorted_map_count  [SortedMap<T> m] (as blk) ; 1264
CAR                 ; generateTupleAccess total=2 pos=0 ; 1265
ATOM                 ; 1266
LDC    1            ; for negation ; 1267
SUB                  ; 1268
SEL    1271 1275    ; IF? 39 ; 1269
RTN                  ; 1270
LD     0 0          ; THEN: 39 ; 1271
CAR                 ; generateTupleAccess total=2 pos=0 ; 1272
CAR                 ; generateTupleAccess total=6 pos=0 ; 1273
JOIN                 ; 1274
LDC    0            ; ELSE: 39 ; 1275
JOIN                 ; 1276
LD     0 0          ;  <== sorted_map_contains  [SortedMap<T> m, int key] (as blk) ; 1277
CAR                 ; generateTupleAccess total=2 pos=0 ; 1278
ATOM                 ; 1279
LDC    1            ; for negation ; 1280
SUB                  ; 1281
SEL    1284 1290    ; IF? 40 ; 1282
RTN                  ; 1283
LD     0 0          ; THEN: 40 ; 1284
CAR                 ; generateTupleAccess total=2 pos=0 ; 1285
LD     0 1          ; var key ; 1286
LDF    890          ;  @sorted_node_has ; 1287
AP     2             ; 1288
JOIN                 ; 1289
LDC    0            ; ELSE: 40 ; 1290
JOIN                 ; 1291
LD     0 0          ;  <== sorted_map_get  [SortedMap<T> m, int key, T def] (as blk) ; 1292
CAR                 ; generateTupleAccess total=2 pos=0 ; 1293
ATOM                 ; 1294
LDC    1            ; for negation ; 1295
SUB                  ; 1296
SEL    1299 1306    ; IF? 41 ; 1297
RTN                  ; 1298
LD     0 0          ; THEN: 41 ; 1299
CAR                 ; generateTupleAccess total=2 pos=0 ; 1300
LD     0 1          ; var key ; 1301
LD     0 2          ; var def ; 1302
LDF    929          ;  @sorted_node_get ; 1303
AP     3             ; 1304
JOIN                 ; 1305
LD     0 2          ; ELSE: 41 ; 1306
JOIN                 ; 1307
LD     0 0          ;  <== sorted_map_assoc  [SortedMap<T> m, int key, T val] (as blk) ; 1308
CAR                 ; generateTupleAccess total=2 pos=0 ; 1309
LD     0 1          ; var key ; 1310
LD     0 2          ; var val ; 1311
LDF    972          ;  @sorted_node_put ; 1312
AP     3             ; 1313
LDC    0            ; just constant from code ; 1314
CONS                 ; 1315
RTN                  ; 1316
LD     0 1          ;  <== sorted_map_assoc_all  [SortedMap<T> m, ListCons<Tuple<Integer,T>> l] (as blk) ; 1317
LD     0 0          ; var m ; 1318
LDF    10138        ;  @lambda_1003 ; 1319
LDF    386          ;  @fold0 ; 1320
AP     3             ; 1321
RTN                  ; 1322
LD     0 0          ;  <== sorted_map_walk  [SortedMap<T> map, X acc, Function2<X,Tuple<Integer,T>,X> fun] (as blk) ; 1323
CAR                 ; generateTupleAccess total=2 pos=0 ; 1324
ATOM                 ; 1325
SEL    1328 1330    ; IF? 42 ; 1326
RTN                  ; 1327
LD     0 1          ; THEN: 42 ; 1328
JOIN                 ; 1329
LD     0 0          ; ELSE: 42 ; 1330
CAR                 ; generateTupleAccess total=2 pos=0 ; 1331
LD     0 1          ; var acc ; 1332
LD     0 2          ; var fun ; 1333
LDF    1196         ;  @sorted_node_walk ; 1334
AP     3             ; 1335
JOIN                 ; 1336
LD     0 1          ;  <== ghcstate_read_val  [GHCState state, Cons<Integer,Integer> val_cons] (as blk) ; 1337
CAR                  ; 1338
ST     0 2           ; 1339
LD     0 1          ; var val_cons ; 1340
CDR                  ; 1341
ST     0 3           ; 1342
LD     0 2          ; var val_tag ; 1343
LDC    3            ; just constant from code ; 1344
CGT                  ; 1345
SEL    1352 1354     ; 1346
LD     0 2          ; var val_tag ; 1347
LDC    0            ; Named Const = Args.REGISTER ; 1348
CEQ                  ; 1349
SEL    1355 1363    ; IF? 43 ; 1350
RTN                  ; 1351
BRK                 ; branch@1352 ; 1352
JOIN                 ; 1353
JOIN                ; branch@1354 ; 1354
LD     0 0          ; THEN: 43 ; 1355
CDR                 ; generateTupleAccess total=3 pos=1 ; 1356
CAR                  ; 1357
LD     0 3          ; var val ; 1358
LDC    0            ; just constant from code ; 1359
LDF    1292         ;  @sorted_map_get ; 1360
AP     3             ; 1361
JOIN                 ; 1362
LD     0 2          ; ELSE: 43 ; 1363
LDC    1            ; Named Const = Args.REGISTER_INDIRECT ; 1364
CEQ                  ; 1365
SEL    1368 1382    ; IF? 109 ; 1366
JOIN                 ; 1367
LD     0 0          ; THEN: 109 ; 1368
CDR                 ; generateTupleAccess total=3 pos=2 ; 1369
CDR                  ; 1370
LD     0 0          ; var state ; 1371
CDR                 ; generateTupleAccess total=3 pos=1 ; 1372
CAR                  ; 1373
LD     0 3          ; var val ; 1374
LDC    0            ; just constant from code ; 1375
LDF    1292         ;  @sorted_map_get ; 1376
AP     3             ; 1377
LDC    0            ; just constant from code ; 1378
LDF    1292         ;  @sorted_map_get ; 1379
AP     3             ; 1380
JOIN                 ; 1381
LD     0 2          ; ELSE: 109 ; 1382
LDC    2            ; Named Const = Args.CONSTANT ; 1383
CEQ                  ; 1384
SEL    1387 1389    ; IF? 110 ; 1385
JOIN                 ; 1386
LD     0 3          ; THEN: 110 ; 1387
JOIN                 ; 1388
LD     0 0          ; ELSE: 110 ; 1389
CDR                 ; generateTupleAccess total=3 pos=2 ; 1390
CDR                  ; 1391
LD     0 3          ; var val ; 1392
LDC    0            ; just constant from code ; 1393
LDF    1292         ;  @sorted_map_get ; 1394
AP     3             ; 1395
JOIN                 ; 1396
LD     0 1          ;  <== ghcstate_write_val  [GHCState state, Cons arg_cons, Integer val] (as blk) ; 1397
CAR                  ; 1398
ST     0 3           ; 1399
LD     0 3          ; var arg_tag ; 1400
LDC    3            ; just constant from code ; 1401
CGT                  ; 1402
SEL    1413 1415     ; 1403
LD     0 3          ; var arg_tag ; 1404
LDC    2            ; just constant from code ; 1405
CEQ                  ; 1406
SEL    1416 1418     ; 1407
LD     0 3          ; var arg_tag ; 1408
LDC    0            ; just constant from code ; 1409
CEQ                  ; 1410
SEL    1419 1435    ; IF? 44 ; 1411
RTN                  ; 1412
BRK                 ; branch@1413 ; 1413
JOIN                 ; 1414
JOIN                ; branch@1415 ; 1415
BRK                 ; branch@1416 ; 1416
JOIN                 ; 1417
JOIN                ; branch@1418 ; 1418
LD     0 0          ; THEN: 44 ; 1419
CAR                 ; generateTupleAccess total=3 pos=0 ; 1420
LD     0 0          ; var state ; 1421
CDR                 ; generateTupleAccess total=3 pos=1 ; 1422
CAR                  ; 1423
LD     0 1          ; var arg_cons ; 1424
CDR                  ; 1425
LD     0 2          ; var val ; 1426
LDF    1308         ;  @sorted_map_assoc ; 1427
AP     3             ; 1428
LD     0 0          ; var state ; 1429
CDR                 ; generateTupleAccess total=3 pos=2 ; 1430
CDR                  ; 1431
CONS                 ; 1432
CONS                 ; 1433
JOIN                 ; 1434
LD     0 3          ; ELSE: 44 ; 1435
LDC    1            ; just constant from code ; 1436
CEQ                  ; 1437
SEL    1440 1462    ; IF? 111 ; 1438
JOIN                 ; 1439
LD     0 0          ; THEN: 111 ; 1440
CAR                 ; generateTupleAccess total=3 pos=0 ; 1441
LD     0 0          ; var state ; 1442
CDR                 ; generateTupleAccess total=3 pos=1 ; 1443
CAR                  ; 1444
LD     0 0          ; var state ; 1445
CDR                 ; generateTupleAccess total=3 pos=1 ; 1446
CAR                  ; 1447
LD     0 1          ; var arg_cons ; 1448
CDR                  ; 1449
LDC    0            ; just constant from code ; 1450
LDF    1292         ;  @sorted_map_get ; 1451
AP     3             ; 1452
LD     0 2          ; var val ; 1453
LDF    1308         ;  @sorted_map_assoc ; 1454
AP     3             ; 1455
LD     0 0          ; var state ; 1456
CDR                 ; generateTupleAccess total=3 pos=2 ; 1457
CDR                  ; 1458
CONS                 ; 1459
CONS                 ; 1460
JOIN                 ; 1461
LD     0 0          ; ELSE: 111 ; 1462
CAR                 ; generateTupleAccess total=3 pos=0 ; 1463
LD     0 0          ; var state ; 1464
CDR                 ; generateTupleAccess total=3 pos=1 ; 1465
CAR                  ; 1466
LD     0 0          ; var state ; 1467
CDR                 ; generateTupleAccess total=3 pos=2 ; 1468
CDR                  ; 1469
LD     0 1          ; var arg_cons ; 1470
CDR                  ; 1471
LD     0 2          ; var val ; 1472
LDF    1308         ;  @sorted_map_assoc ; 1473
AP     3             ; 1474
CONS                 ; 1475
CONS                 ; 1476
JOIN                 ; 1477
LD     0 0          ;  <== ghcstate_assoc  [GHCState state, Cons arg_cons, Cons val_cons] (as blk) ; 1478
LD     0 2          ; var val_cons ; 1479
LDC 0               ; local var space ; 1480
LDC 0               ; local var space ; 1481
LDF    1337         ;  @ghcstate_read_val ; 1482
AP     4             ; 1483
ST     0 3           ; 1484
LD     0 0          ; var state ; 1485
LD     0 1          ; var arg_cons ; 1486
LD     0 3          ; var val ; 1487
LDC 0               ; local var space ; 1488
LDF    1397         ;  @ghcstate_write_val ; 1489
AP     4             ; 1490
RTN                  ; 1491
LD     0 0          ;  <== processGhostInfoRequest  [WorldState world, GHCState state, GhostInfo ghostInfo, Integer index, int requestType] (as blk) ; 1492
CDR                 ; generateTupleAccess total=4 pos=2 ; 1493
CDR                  ; 1494
CAR                  ; 1495
LD     0 3          ; var index ; 1496
LD     0 1          ; var state ; 1497
CAR                 ; generateTupleAccess total=3 pos=0 ; 1498
LDF    469          ;  @list_item_def ; 1499
AP     3             ; 1500
ST     0 5           ; 1501
LDC    4            ; just constant from code ; 1502
LD     0 4          ; var requestType ; 1503
CEQ                  ; 1504
SEL    1507 1529    ; IF? 45 ; 1505
RTN                  ; 1506
LD     0 5          ; THEN: 45 ; 1507
LD     0 1          ; var state ; 1508
CDR                 ; generateTupleAccess total=3 pos=1 ; 1509
CAR                  ; 1510
LDC    0            ; just constant from code ; 1511
LD     0 2          ; var ghostInfo ; 1512
CAR                 ; generateTupleAccess total=3 pos=0 ; 1513
CAR                 ; generateTupleAccess total=2 pos=0 ; 1514
LDF    1308         ;  @sorted_map_assoc ; 1515
AP     3             ; 1516
LDC    1            ; just constant from code ; 1517
LD     0 2          ; var ghostInfo ; 1518
CAR                 ; generateTupleAccess total=3 pos=0 ; 1519
CDR                 ; generateTupleAccess total=2 pos=1 ; 1520
LDF    1308         ;  @sorted_map_assoc ; 1521
AP     3             ; 1522
LD     0 1          ; var state ; 1523
CDR                 ; generateTupleAccess total=3 pos=2 ; 1524
CDR                  ; 1525
CONS                 ; 1526
CONS                 ; 1527
JOIN                 ; 1528
LDC    5            ; ELSE: 45 ; 1529
LD     0 4          ; var requestType ; 1530
CEQ                  ; 1531
SEL    1534 1558    ; IF? 112 ; 1532
JOIN                 ; 1533
LD     0 5          ; THEN: 112 ; 1534
LD     0 1          ; var state ; 1535
CDR                 ; generateTupleAccess total=3 pos=1 ; 1536
CAR                  ; 1537
LDC    0            ; just constant from code ; 1538
LD     0 5          ; var gs ; 1539
CDR                 ; generateTupleAccess total=3 pos=1 ; 1540
CAR                  ; 1541
CAR                 ; generateTupleAccess total=2 pos=0 ; 1542
LDF    1308         ;  @sorted_map_assoc ; 1543
AP     3             ; 1544
LDC    1            ; just constant from code ; 1545
LD     0 5          ; var gs ; 1546
CDR                 ; generateTupleAccess total=3 pos=1 ; 1547
CAR                  ; 1548
CDR                 ; generateTupleAccess total=2 pos=1 ; 1549
LDF    1308         ;  @sorted_map_assoc ; 1550
AP     3             ; 1551
LD     0 1          ; var state ; 1552
CDR                 ; generateTupleAccess total=3 pos=2 ; 1553
CDR                  ; 1554
CONS                 ; 1555
CONS                 ; 1556
JOIN                 ; 1557
LD     0 5          ; ELSE: 112 ; 1558
LD     0 1          ; var state ; 1559
CDR                 ; generateTupleAccess total=3 pos=1 ; 1560
CAR                  ; 1561
LDC    0            ; just constant from code ; 1562
LD     0 5          ; var gs ; 1563
CAR                 ; generateTupleAccess total=3 pos=0 ; 1564
LDF    1308         ;  @sorted_map_assoc ; 1565
AP     3             ; 1566
LDC    1            ; just constant from code ; 1567
LD     0 5          ; var gs ; 1568
CDR                 ; generateTupleAccess total=3 pos=2 ; 1569
CDR                  ; 1570
LDF    1308         ;  @sorted_map_assoc ; 1571
AP     3             ; 1572
LD     0 1          ; var state ; 1573
CDR                 ; generateTupleAccess total=3 pos=2 ; 1574
CDR                  ; 1575
CONS                 ; 1576
CONS                 ; 1577
JOIN                 ; 1578
LD     0 1          ;  <== processGhostInt  [WorldState world, GHCState state, GhostInfo ghostInfo, Integer num, Cons arg] (as blk) ; 1579
CAR                 ; generateTupleAccess total=3 pos=0 ; 1580
ST     0 5           ; 1581
LD     0 2          ; var ghostInfo ; 1582
CDR                 ; generateTupleAccess total=3 pos=2 ; 1583
CDR                  ; 1584
ST     0 6           ; 1585
LDC    0            ; just constant from code ; 1586
LD     0 3          ; var num ; 1587
CEQ                  ; 1588
SEL    1591 1614    ; IF? 46 ; 1589
RTN                  ; 1590
LD     0 5          ; THEN: 46 ; 1591
CAR                 ; generateTupleAccess total=3 pos=0 ; 1592
LD     0 5          ; var gs ; 1593
CDR                 ; generateTupleAccess total=3 pos=1 ; 1594
CAR                  ; 1595
LD     0 1          ; var state ; 1596
CDR                 ; generateTupleAccess total=3 pos=1 ; 1597
CAR                  ; 1598
LDC    0            ; just constant from code ; 1599
LDC    0            ; just constant from code ; 1600
LDF    1292         ;  @sorted_map_get ; 1601
AP     3             ; 1602
CONS                 ; 1603
CONS                 ; 1604
LD     0 1          ; var state ; 1605
CDR                 ; generateTupleAccess total=3 pos=1 ; 1606
CAR                  ; 1607
LD     0 1          ; var state ; 1608
CDR                 ; generateTupleAccess total=3 pos=2 ; 1609
CDR                  ; 1610
CONS                 ; 1611
CONS                 ; 1612
JOIN                 ; 1613
LDC    1            ; ELSE: 46 ; 1614
LD     0 3          ; var num ; 1615
CEQ                  ; 1616
SEL    1619 1647    ; IF? 113 ; 1617
JOIN                 ; 1618
LD     0 5          ; THEN: 113 ; 1619
LD     0 1          ; var state ; 1620
CDR                 ; generateTupleAccess total=3 pos=1 ; 1621
CAR                  ; 1622
LDC    0            ; just constant from code ; 1623
LD     0 0          ; var world ; 1624
CDR                 ; generateTupleAccess total=4 pos=1 ; 1625
CAR                  ; 1626
CDR                 ; generateTupleAccess total=5 pos=1 ; 1627
CAR                  ; 1628
CAR                 ; generateTupleAccess total=2 pos=0 ; 1629
LDF    1308         ;  @sorted_map_assoc ; 1630
AP     3             ; 1631
LDC    1            ; just constant from code ; 1632
LD     0 0          ; var world ; 1633
CDR                 ; generateTupleAccess total=4 pos=1 ; 1634
CAR                  ; 1635
CDR                 ; generateTupleAccess total=5 pos=1 ; 1636
CAR                  ; 1637
CDR                 ; generateTupleAccess total=2 pos=1 ; 1638
LDF    1308         ;  @sorted_map_assoc ; 1639
AP     3             ; 1640
LD     0 1          ; var state ; 1641
CDR                 ; generateTupleAccess total=3 pos=2 ; 1642
CDR                  ; 1643
CONS                 ; 1644
CONS                 ; 1645
JOIN                 ; 1646
LDC    2            ; ELSE: 113 ; 1647
LD     0 3          ; var num ; 1648
CEQ                  ; 1649
SEL    1652 1680    ; IF? 114 ; 1650
JOIN                 ; 1651
LD     0 5          ; THEN: 114 ; 1652
LD     0 1          ; var state ; 1653
CDR                 ; generateTupleAccess total=3 pos=1 ; 1654
CAR                  ; 1655
LDC    0            ; just constant from code ; 1656
LD     0 0          ; var world ; 1657
CDR                 ; generateTupleAccess total=4 pos=1 ; 1658
CAR                  ; 1659
CDR                 ; generateTupleAccess total=5 pos=1 ; 1660
CAR                  ; 1661
CAR                 ; generateTupleAccess total=2 pos=0 ; 1662
LDF    1308         ;  @sorted_map_assoc ; 1663
AP     3             ; 1664
LDC    1            ; just constant from code ; 1665
LD     0 0          ; var world ; 1666
CDR                 ; generateTupleAccess total=4 pos=1 ; 1667
CAR                  ; 1668
CDR                 ; generateTupleAccess total=5 pos=1 ; 1669
CAR                  ; 1670
CDR                 ; generateTupleAccess total=2 pos=1 ; 1671
LDF    1308         ;  @sorted_map_assoc ; 1672
AP     3             ; 1673
LD     0 1          ; var state ; 1674
CDR                 ; generateTupleAccess total=3 pos=2 ; 1675
CDR                  ; 1676
CONS                 ; 1677
CONS                 ; 1678
JOIN                 ; 1679
LDC    3            ; ELSE: 114 ; 1680
LD     0 3          ; var num ; 1681
CEQ                  ; 1682
SEL    1685 1699    ; IF? 115 ; 1683
JOIN                 ; 1684
LD     0 5          ; THEN: 115 ; 1685
LD     0 1          ; var state ; 1686
CDR                 ; generateTupleAccess total=3 pos=1 ; 1687
CAR                  ; 1688
LDC    0            ; just constant from code ; 1689
LD     0 6          ; var currentGhostIndex ; 1690
LDF    1308         ;  @sorted_map_assoc ; 1691
AP     3             ; 1692
LD     0 1          ; var state ; 1693
CDR                 ; generateTupleAccess total=3 pos=2 ; 1694
CDR                  ; 1695
CONS                 ; 1696
CONS                 ; 1697
JOIN                 ; 1698
LDC    4            ; ELSE: 115 ; 1699
LD     0 3          ; var num ; 1700
CEQ                  ; 1701
SEL    1704 1719    ; IF? 116 ; 1702
JOIN                 ; 1703
LD     0 0          ; THEN: 116 ; 1704
LD     0 1          ; var state ; 1705
LD     0 2          ; var ghostInfo ; 1706
LD     0 1          ; var state ; 1707
CDR                 ; generateTupleAccess total=3 pos=1 ; 1708
CAR                  ; 1709
LDC    0            ; just constant from code ; 1710
LDC    0            ; just constant from code ; 1711
LDF    1292         ;  @sorted_map_get ; 1712
AP     3             ; 1713
LDC    4            ; just constant from code ; 1714
LDC 0               ; local var space ; 1715
LDF    1492         ;  @processGhostInfoRequest ; 1716
AP     6             ; 1717
JOIN                 ; 1718
LDC    5            ; ELSE: 116 ; 1719
LD     0 3          ; var num ; 1720
CEQ                  ; 1721
SEL    1724 1739    ; IF? 117 ; 1722
JOIN                 ; 1723
LD     0 0          ; THEN: 117 ; 1724
LD     0 1          ; var state ; 1725
LD     0 2          ; var ghostInfo ; 1726
LD     0 1          ; var state ; 1727
CDR                 ; generateTupleAccess total=3 pos=1 ; 1728
CAR                  ; 1729
LDC    0            ; just constant from code ; 1730
LDC    0            ; just constant from code ; 1731
LDF    1292         ;  @sorted_map_get ; 1732
AP     3             ; 1733
LDC    5            ; just constant from code ; 1734
LDC 0               ; local var space ; 1735
LDF    1492         ;  @processGhostInfoRequest ; 1736
AP     6             ; 1737
JOIN                 ; 1738
LDC    6            ; ELSE: 117 ; 1739
LD     0 3          ; var num ; 1740
CEQ                  ; 1741
SEL    1744 1759    ; IF? 118 ; 1742
JOIN                 ; 1743
LD     0 0          ; THEN: 118 ; 1744
LD     0 1          ; var state ; 1745
LD     0 2          ; var ghostInfo ; 1746
LD     0 1          ; var state ; 1747
CDR                 ; generateTupleAccess total=3 pos=1 ; 1748
CAR                  ; 1749
LDC    0            ; just constant from code ; 1750
LDC    0            ; just constant from code ; 1751
LDF    1292         ;  @sorted_map_get ; 1752
AP     3             ; 1753
LDC    6            ; just constant from code ; 1754
LDC 0               ; local var space ; 1755
LDF    1492         ;  @processGhostInfoRequest ; 1756
AP     6             ; 1757
JOIN                 ; 1758
LDC    7            ; ELSE: 118 ; 1759
LD     0 3          ; var num ; 1760
CEQ                  ; 1761
SEL    1764 1795    ; IF? 119 ; 1762
JOIN                 ; 1763
LD     0 5          ; THEN: 119 ; 1764
LD     0 1          ; var state ; 1765
CDR                 ; generateTupleAccess total=3 pos=1 ; 1766
CAR                  ; 1767
LDC    0            ; just constant from code ; 1768
LD     0 0          ; var world ; 1769
CAR                 ; generateTupleAccess total=4 pos=0 ; 1770
LD     0 1          ; var state ; 1771
CDR                 ; generateTupleAccess total=3 pos=1 ; 1772
CAR                  ; 1773
LDC    0            ; just constant from code ; 1774
LDC    0            ; just constant from code ; 1775
LDF    1292         ;  @sorted_map_get ; 1776
AP     3             ; 1777
LD     0 1          ; var state ; 1778
CDR                 ; generateTupleAccess total=3 pos=1 ; 1779
CAR                  ; 1780
LDC    1            ; just constant from code ; 1781
LDC    0            ; just constant from code ; 1782
LDF    1292         ;  @sorted_map_get ; 1783
AP     3             ; 1784
LDF    4087         ;  @getMapItem ; 1785
AP     3             ; 1786
LDF    1308         ;  @sorted_map_assoc ; 1787
AP     3             ; 1788
LD     0 1          ; var state ; 1789
CDR                 ; generateTupleAccess total=3 pos=2 ; 1790
CDR                  ; 1791
CONS                 ; 1792
CONS                 ; 1793
JOIN                 ; 1794
LD     0 1          ; ELSE: 119 ; 1795
JOIN                 ; 1796
LD     0 1          ;  <== produce_n  [Function1<T,Cons> f, T a, int n] (as blk) ; 1797
LD     0 0          ; var f ; 1798
AP     1             ; 1799
CAR                  ; 1800
ST     0 3           ; 1801
LD     0 2          ; var n ; 1802
LDC    0            ; just constant from code ; 1803
CEQ                  ; 1804
SEL    1807 1811    ; IF? 47 ; 1805
RTN                  ; 1806
LD     0 3          ; THEN: 47 ; 1807
LDC    0            ; NULL literal ; 1808
CONS                 ; 1809
JOIN                 ; 1810
LD     0 3          ; ELSE: 47 ; 1811
LD     0 0          ; var f ; 1812
LD     0 1          ; var a ; 1813
LD     0 0          ; var f ; 1814
AP     1             ; 1815
CDR                  ; 1816
LD     0 2          ; var n ; 1817
LDC    1            ; just constant from code ; 1818
SUB                  ; 1819
LDC 0               ; local var space ; 1820
LDF    749          ;  @produce_n ; 1821
AP     4             ; 1822
CONS                 ; 1823
JOIN                 ; 1824
LDF    10146        ;  <== bit_split  [Integer x] (as blk), ALSO: @lambda_1004 ; 1825
LD     0 0          ; var x ; 1826
LDC    7            ; just constant from code ; 1827
LDC 0               ; local var space ; 1828
LDF    749          ;  @produce_n ; 1829
AP     4             ; 1830
RTN                  ; 1831
LD     0 0          ;  <== emulate_bitop  [Integer x, Integer y, Function2<Integer,Integer,Integer> f] (as blk) ; 1832
LDF    1825         ;  @bit_split ; 1833
AP     1             ; 1834
ST     0 3           ; 1835
LD     0 1          ; var y ; 1836
LDF    1825         ;  @bit_split ; 1837
AP     1             ; 1838
ST     0 4           ; 1839
LDF    10163        ;  @lambda_1005 ; 1840
LDC    0            ; just constant from code ; 1841
LD     0 2          ; var f ; 1842
LD     0 3          ; var bits_x ; 1843
LD     0 4          ; var bits_y ; 1844
LDF    660          ;  @zip_with ; 1845
AP     3             ; 1846
LDF    48           ;  @foldr ; 1847
AP     3             ; 1848
RTN                  ; 1849
LD     0 0          ;  <== intCompare  [int a, int b] (as blk) ; 1850
LD     0 1          ; var b ; 1851
CEQ                  ; 1852
SEL    1855 1857    ; IF? 48 ; 1853
RTN                  ; 1854
LDC    1            ; THEN: 48 ; 1855
JOIN                 ; 1856
LDC    0            ; ELSE: 48 ; 1857
JOIN                 ; 1858
LD     0 0          ;  <== ghcstate_bitop  [GHCState state, Cons arg_cons, Cons val_cons, int type] (as blk) ; 1859
LD     0 1          ; var arg_cons ; 1860
LDC 0               ; local var space ; 1861
LDC 0               ; local var space ; 1862
LDF    1337         ;  @ghcstate_read_val ; 1863
AP     4             ; 1864
ST     0 4           ; 1865
LD     0 0          ; var state ; 1866
LD     0 2          ; var val_cons ; 1867
LDC 0               ; local var space ; 1868
LDC 0               ; local var space ; 1869
LDF    1337         ;  @ghcstate_read_val ; 1870
AP     4             ; 1871
ST     0 5           ; 1872
LD     0 4          ; var arg ; 1873
LD     0 5          ; var val ; 1874
LD     0 3          ; var type ; 1875
LDC    7            ; Named Const = GHCOps.AND ; 1876
CEQ                  ; 1877
SEL    1891 1893    ; IF? 49 ; 1878
LDC 0               ; local var space ; 1879
LDC 0               ; local var space ; 1880
LDF    1832         ;  @emulate_bitop ; 1881
AP     5             ; 1882
ST     0 6           ; 1883
LD     0 0          ; var state ; 1884
LD     0 1          ; var arg_cons ; 1885
LD     0 6          ; var result ; 1886
LDC 0               ; local var space ; 1887
LDF    1397         ;  @ghcstate_write_val ; 1888
AP     4             ; 1889
RTN                  ; 1890
LDF    11019        ; THEN: 49, ALSO: @lambda_1070 ; 1891
JOIN                 ; 1892
LD     0 3          ; ELSE: 49 ; 1893
LDC    8            ; Named Const = GHCOps.OR ; 1894
CEQ                  ; 1895
SEL    1898 1900    ; IF? 120 ; 1896
JOIN                 ; 1897
LDF    11023        ; THEN: 120, ALSO: @lambda_1071 ; 1898
JOIN                 ; 1899
LDF    11034        ; ELSE: 120, ALSO: @lambda_1072 ; 1900
JOIN                 ; 1901
LD     0 5          ;  <== runGhostStep  [SortedMap<Cons> prog, WorldState world, GhostInfo ghostInfo, int lev, GHCState state, Cons step] (as blk) ; 1902
CAR                  ; 1903
ST     0 6           ; 1904
LD     0 5          ; var step ; 1905
CDR                  ; 1906
ST     0 7           ; 1907
LD     0 4          ; var state ; 1908
CAR                 ; generateTupleAccess total=3 pos=0 ; 1909
LD     0 4          ; var state ; 1910
CDR                 ; generateTupleAccess total=3 pos=1 ; 1911
CAR                  ; 1912
LDC    8            ; just constant from code ; 1913
LD     0 4          ; var state ; 1914
CDR                 ; generateTupleAccess total=3 pos=1 ; 1915
CAR                  ; 1916
LDC    8            ; just constant from code ; 1917
LDC    0            ; just constant from code ; 1918
LDF    1292         ;  @sorted_map_get ; 1919
AP     3             ; 1920
LDC    1            ; just constant from code ; 1921
ADD                  ; 1922
LDF    1308         ;  @sorted_map_assoc ; 1923
AP     3             ; 1924
LD     0 4          ; var state ; 1925
CDR                 ; generateTupleAccess total=3 pos=2 ; 1926
CDR                  ; 1927
CONS                 ; 1928
CONS                 ; 1929
ST     0 8           ; 1930
LDC    0            ; Named Const = GHCOps.MOV ; 1931
LD     0 6          ; var opcode ; 1932
CEQ                  ; 1933
SEL    1936 1954    ; IF? 50 ; 1934
RTN                  ; 1935
LD     0 0          ; THEN: 50 ; 1936
LD     0 1          ; var world ; 1937
LD     0 2          ; var ghostInfo ; 1938
LD     0 3          ; var lev ; 1939
LD     0 8          ; var inc_pc ; 1940
LD     0 7          ; var args ; 1941
CAR                  ; 1942
LD     0 7          ; var args ; 1943
CDR                  ; 1944
CAR                  ; 1945
LDC 0               ; local var space ; 1946
LDF    1478         ;  @ghcstate_assoc ; 1947
AP     4             ; 1948
LDC 0               ; local var space ; 1949
LDC 0               ; local var space ; 1950
LDF    2414         ;  @runGhost ; 1951
AP     7             ; 1952
JOIN                 ; 1953
LDC    1            ; ELSE: 50 ; 1954
LD     0 6          ; var opcode ; 1955
CEQ                  ; 1956
SEL    1959 1983    ; IF? 121 ; 1957
JOIN                 ; 1958
LD     0 0          ; THEN: 121 ; 1959
LD     0 1          ; var world ; 1960
LD     0 2          ; var ghostInfo ; 1961
LD     0 3          ; var lev ; 1962
LD     0 8          ; var inc_pc ; 1963
LD     0 7          ; var args ; 1964
CAR                  ; 1965
LD     0 8          ; var inc_pc ; 1966
LD     0 7          ; var args ; 1967
CAR                  ; 1968
LDC 0               ; local var space ; 1969
LDC 0               ; local var space ; 1970
LDF    1337         ;  @ghcstate_read_val ; 1971
AP     4             ; 1972
LDC    1            ; just constant from code ; 1973
ADD                  ; 1974
LDC 0               ; local var space ; 1975
LDF    1397         ;  @ghcstate_write_val ; 1976
AP     4             ; 1977
LDC 0               ; local var space ; 1978
LDC 0               ; local var space ; 1979
LDF    2414         ;  @runGhost ; 1980
AP     7             ; 1981
JOIN                 ; 1982
LDC    2            ; ELSE: 121 ; 1983
LD     0 6          ; var opcode ; 1984
CEQ                  ; 1985
SEL    1988 2012    ; IF? 122 ; 1986
JOIN                 ; 1987
LD     0 0          ; THEN: 122 ; 1988
LD     0 1          ; var world ; 1989
LD     0 2          ; var ghostInfo ; 1990
LD     0 3          ; var lev ; 1991
LD     0 8          ; var inc_pc ; 1992
LD     0 7          ; var args ; 1993
CAR                  ; 1994
LD     0 8          ; var inc_pc ; 1995
LD     0 7          ; var args ; 1996
CAR                  ; 1997
LDC 0               ; local var space ; 1998
LDC 0               ; local var space ; 1999
LDF    1337         ;  @ghcstate_read_val ; 2000
AP     4             ; 2001
LDC    1            ; just constant from code ; 2002
SUB                  ; 2003
LDC 0               ; local var space ; 2004
LDF    1397         ;  @ghcstate_write_val ; 2005
AP     4             ; 2006
LDC 0               ; local var space ; 2007
LDC 0               ; local var space ; 2008
LDF    2414         ;  @runGhost ; 2009
AP     7             ; 2010
JOIN                 ; 2011
LDC    3            ; ELSE: 122 ; 2012
LD     0 6          ; var opcode ; 2013
CEQ                  ; 2014
SEL    2017 2048    ; IF? 123 ; 2015
JOIN                 ; 2016
LD     0 0          ; THEN: 123 ; 2017
LD     0 1          ; var world ; 2018
LD     0 2          ; var ghostInfo ; 2019
LD     0 3          ; var lev ; 2020
LD     0 8          ; var inc_pc ; 2021
LD     0 7          ; var args ; 2022
CAR                  ; 2023
LD     0 8          ; var inc_pc ; 2024
LD     0 7          ; var args ; 2025
CAR                  ; 2026
LDC 0               ; local var space ; 2027
LDC 0               ; local var space ; 2028
LDF    1337         ;  @ghcstate_read_val ; 2029
AP     4             ; 2030
LD     0 8          ; var inc_pc ; 2031
LD     0 7          ; var args ; 2032
CDR                  ; 2033
CAR                  ; 2034
LDC 0               ; local var space ; 2035
LDC 0               ; local var space ; 2036
LDF    1337         ;  @ghcstate_read_val ; 2037
AP     4             ; 2038
ADD                  ; 2039
LDC 0               ; local var space ; 2040
LDF    1397         ;  @ghcstate_write_val ; 2041
AP     4             ; 2042
LDC 0               ; local var space ; 2043
LDC 0               ; local var space ; 2044
LDF    2414         ;  @runGhost ; 2045
AP     7             ; 2046
JOIN                 ; 2047
LDC    4            ; ELSE: 123 ; 2048
LD     0 6          ; var opcode ; 2049
CEQ                  ; 2050
SEL    2053 2084    ; IF? 124 ; 2051
JOIN                 ; 2052
LD     0 0          ; THEN: 124 ; 2053
LD     0 1          ; var world ; 2054
LD     0 2          ; var ghostInfo ; 2055
LD     0 3          ; var lev ; 2056
LD     0 8          ; var inc_pc ; 2057
LD     0 7          ; var args ; 2058
CAR                  ; 2059
LD     0 8          ; var inc_pc ; 2060
LD     0 7          ; var args ; 2061
CAR                  ; 2062
LDC 0               ; local var space ; 2063
LDC 0               ; local var space ; 2064
LDF    1337         ;  @ghcstate_read_val ; 2065
AP     4             ; 2066
LD     0 8          ; var inc_pc ; 2067
LD     0 7          ; var args ; 2068
CDR                  ; 2069
CAR                  ; 2070
LDC 0               ; local var space ; 2071
LDC 0               ; local var space ; 2072
LDF    1337         ;  @ghcstate_read_val ; 2073
AP     4             ; 2074
SUB                  ; 2075
LDC 0               ; local var space ; 2076
LDF    1397         ;  @ghcstate_write_val ; 2077
AP     4             ; 2078
LDC 0               ; local var space ; 2079
LDC 0               ; local var space ; 2080
LDF    2414         ;  @runGhost ; 2081
AP     7             ; 2082
JOIN                 ; 2083
LDC    5            ; ELSE: 124 ; 2084
LD     0 6          ; var opcode ; 2085
CEQ                  ; 2086
SEL    2089 2120    ; IF? 125 ; 2087
JOIN                 ; 2088
LD     0 0          ; THEN: 125 ; 2089
LD     0 1          ; var world ; 2090
LD     0 2          ; var ghostInfo ; 2091
LD     0 3          ; var lev ; 2092
LD     0 8          ; var inc_pc ; 2093
LD     0 7          ; var args ; 2094
CAR                  ; 2095
LD     0 8          ; var inc_pc ; 2096
LD     0 7          ; var args ; 2097
CAR                  ; 2098
LDC 0               ; local var space ; 2099
LDC 0               ; local var space ; 2100
LDF    1337         ;  @ghcstate_read_val ; 2101
AP     4             ; 2102
LD     0 8          ; var inc_pc ; 2103
LD     0 7          ; var args ; 2104
CDR                  ; 2105
CAR                  ; 2106
LDC 0               ; local var space ; 2107
LDC 0               ; local var space ; 2108
LDF    1337         ;  @ghcstate_read_val ; 2109
AP     4             ; 2110
MUL                  ; 2111
LDC 0               ; local var space ; 2112
LDF    1397         ;  @ghcstate_write_val ; 2113
AP     4             ; 2114
LDC 0               ; local var space ; 2115
LDC 0               ; local var space ; 2116
LDF    2414         ;  @runGhost ; 2117
AP     7             ; 2118
JOIN                 ; 2119
LDC    6            ; ELSE: 125 ; 2120
LD     0 6          ; var opcode ; 2121
CEQ                  ; 2122
SEL    2125 2156    ; IF? 126 ; 2123
JOIN                 ; 2124
LD     0 0          ; THEN: 126 ; 2125
LD     0 1          ; var world ; 2126
LD     0 2          ; var ghostInfo ; 2127
LD     0 3          ; var lev ; 2128
LD     0 8          ; var inc_pc ; 2129
LD     0 7          ; var args ; 2130
CAR                  ; 2131
LD     0 8          ; var inc_pc ; 2132
LD     0 7          ; var args ; 2133
CAR                  ; 2134
LDC 0               ; local var space ; 2135
LDC 0               ; local var space ; 2136
LDF    1337         ;  @ghcstate_read_val ; 2137
AP     4             ; 2138
LD     0 8          ; var inc_pc ; 2139
LD     0 7          ; var args ; 2140
CDR                  ; 2141
CAR                  ; 2142
LDC 0               ; local var space ; 2143
LDC 0               ; local var space ; 2144
LDF    1337         ;  @ghcstate_read_val ; 2145
AP     4             ; 2146
DIV                  ; 2147
LDC 0               ; local var space ; 2148
LDF    1397         ;  @ghcstate_write_val ; 2149
AP     4             ; 2150
LDC 0               ; local var space ; 2151
LDC 0               ; local var space ; 2152
LDF    2414         ;  @runGhost ; 2153
AP     7             ; 2154
JOIN                 ; 2155
LDC    7            ; ELSE: 126 ; 2156
LD     0 6          ; var opcode ; 2157
CEQ                  ; 2158
SEL    2161 2182    ; IF? 127 ; 2159
JOIN                 ; 2160
LD     0 0          ; THEN: 127 ; 2161
LD     0 1          ; var world ; 2162
LD     0 2          ; var ghostInfo ; 2163
LD     0 3          ; var lev ; 2164
LD     0 8          ; var inc_pc ; 2165
LD     0 7          ; var args ; 2166
CAR                  ; 2167
LD     0 7          ; var args ; 2168
CDR                  ; 2169
CAR                  ; 2170
LDC    7            ; Named Const = GHCOps.AND ; 2171
LDC 0               ; local var space ; 2172
LDC 0               ; local var space ; 2173
LDC 0               ; local var space ; 2174
LDF    1859         ;  @ghcstate_bitop ; 2175
AP     7             ; 2176
LDC 0               ; local var space ; 2177
LDC 0               ; local var space ; 2178
LDF    2414         ;  @runGhost ; 2179
AP     7             ; 2180
JOIN                 ; 2181
LDC    8            ; ELSE: 127 ; 2182
LD     0 6          ; var opcode ; 2183
CEQ                  ; 2184
SEL    2187 2208    ; IF? 128 ; 2185
JOIN                 ; 2186
LD     0 0          ; THEN: 128 ; 2187
LD     0 1          ; var world ; 2188
LD     0 2          ; var ghostInfo ; 2189
LD     0 3          ; var lev ; 2190
LD     0 8          ; var inc_pc ; 2191
LD     0 7          ; var args ; 2192
CAR                  ; 2193
LD     0 7          ; var args ; 2194
CDR                  ; 2195
CAR                  ; 2196
LDC    8            ; Named Const = GHCOps.OR ; 2197
LDC 0               ; local var space ; 2198
LDC 0               ; local var space ; 2199
LDC 0               ; local var space ; 2200
LDF    1859         ;  @ghcstate_bitop ; 2201
AP     7             ; 2202
LDC 0               ; local var space ; 2203
LDC 0               ; local var space ; 2204
LDF    2414         ;  @runGhost ; 2205
AP     7             ; 2206
JOIN                 ; 2207
LDC    9            ; ELSE: 128 ; 2208
LD     0 6          ; var opcode ; 2209
CEQ                  ; 2210
SEL    2213 2234    ; IF? 129 ; 2211
JOIN                 ; 2212
LD     0 0          ; THEN: 129 ; 2213
LD     0 1          ; var world ; 2214
LD     0 2          ; var ghostInfo ; 2215
LD     0 3          ; var lev ; 2216
LD     0 8          ; var inc_pc ; 2217
LD     0 7          ; var args ; 2218
CAR                  ; 2219
LD     0 7          ; var args ; 2220
CDR                  ; 2221
CAR                  ; 2222
LDC    9            ; Named Const = GHCOps.XOR ; 2223
LDC 0               ; local var space ; 2224
LDC 0               ; local var space ; 2225
LDC 0               ; local var space ; 2226
LDF    1859         ;  @ghcstate_bitop ; 2227
AP     7             ; 2228
LDC 0               ; local var space ; 2229
LDC 0               ; local var space ; 2230
LDF    2414         ;  @runGhost ; 2231
AP     7             ; 2232
JOIN                 ; 2233
LDC    10           ; ELSE: 129 ; 2234
LD     0 6          ; var opcode ; 2235
CEQ                  ; 2236
SEL    2239 2266    ; IF? 130 ; 2237
JOIN                 ; 2238
LD     0 0          ; THEN: 130 ; 2239
LD     0 1          ; var world ; 2240
LD     0 2          ; var ghostInfo ; 2241
LD     0 3          ; var lev ; 2242
LD     0 4          ; var state ; 2243
LD     0 7          ; var args ; 2244
CDR                  ; 2245
CDR                  ; 2246
LDC 0               ; local var space ; 2247
LDC 0               ; local var space ; 2248
LDF    1337         ;  @ghcstate_read_val ; 2249
AP     4             ; 2250
LD     0 4          ; var state ; 2251
LD     0 7          ; var args ; 2252
CDR                  ; 2253
CAR                  ; 2254
LDC 0               ; local var space ; 2255
LDC 0               ; local var space ; 2256
LDF    1337         ;  @ghcstate_read_val ; 2257
AP     4             ; 2258
CGT                  ; 2259
SEL    2271 2287    ; IF? 131 ; 2260
LDC 0               ; local var space ; 2261
LDC 0               ; local var space ; 2262
LDF    2414         ;  @runGhost ; 2263
AP     7             ; 2264
JOIN                 ; 2265
LDC    11           ; ELSE: 130 ; 2266
LD     0 6          ; var opcode ; 2267
CEQ                  ; 2268
SEL    2289 2316    ; IF? 132 ; 2269
JOIN                 ; 2270
LD     0 4          ; THEN: 131 ; 2271
CAR                 ; generateTupleAccess total=3 pos=0 ; 2272
LD     0 4          ; var state ; 2273
CDR                 ; generateTupleAccess total=3 pos=1 ; 2274
CAR                  ; 2275
LDC    8            ; just constant from code ; 2276
LD     0 7          ; var args ; 2277
CAR                  ; 2278
LDF    1308         ;  @sorted_map_assoc ; 2279
AP     3             ; 2280
LD     0 4          ; var state ; 2281
CDR                 ; generateTupleAccess total=3 pos=2 ; 2282
CDR                  ; 2283
CONS                 ; 2284
CONS                 ; 2285
JOIN                 ; 2286
LD     0 4          ; ELSE: 131 ; 2287
JOIN                 ; 2288
LD     0 0          ; THEN: 132 ; 2289
LD     0 1          ; var world ; 2290
LD     0 2          ; var ghostInfo ; 2291
LD     0 3          ; var lev ; 2292
LD     0 4          ; var state ; 2293
LD     0 7          ; var args ; 2294
CDR                  ; 2295
CAR                  ; 2296
LDC 0               ; local var space ; 2297
LDC 0               ; local var space ; 2298
LDF    1337         ;  @ghcstate_read_val ; 2299
AP     4             ; 2300
LD     0 4          ; var state ; 2301
LD     0 7          ; var args ; 2302
CDR                  ; 2303
CDR                  ; 2304
LDC 0               ; local var space ; 2305
LDC 0               ; local var space ; 2306
LDF    1337         ;  @ghcstate_read_val ; 2307
AP     4             ; 2308
CEQ                  ; 2309
SEL    2321 2337    ; IF? 133 ; 2310
LDC 0               ; local var space ; 2311
LDC 0               ; local var space ; 2312
LDF    2414         ;  @runGhost ; 2313
AP     7             ; 2314
JOIN                 ; 2315
LDC    12           ; ELSE: 132 ; 2316
LD     0 6          ; var opcode ; 2317
CEQ                  ; 2318
SEL    2339 2366    ; IF? 134 ; 2319
JOIN                 ; 2320
LD     0 4          ; THEN: 133 ; 2321
CAR                 ; generateTupleAccess total=3 pos=0 ; 2322
LD     0 4          ; var state ; 2323
CDR                 ; generateTupleAccess total=3 pos=1 ; 2324
CAR                  ; 2325
LDC    8            ; just constant from code ; 2326
LD     0 7          ; var args ; 2327
CAR                  ; 2328
LDF    1308         ;  @sorted_map_assoc ; 2329
AP     3             ; 2330
LD     0 4          ; var state ; 2331
CDR                 ; generateTupleAccess total=3 pos=2 ; 2332
CDR                  ; 2333
CONS                 ; 2334
CONS                 ; 2335
JOIN                 ; 2336
LD     0 4          ; ELSE: 133 ; 2337
JOIN                 ; 2338
LD     0 0          ; THEN: 134 ; 2339
LD     0 1          ; var world ; 2340
LD     0 2          ; var ghostInfo ; 2341
LD     0 3          ; var lev ; 2342
LD     0 4          ; var state ; 2343
LD     0 7          ; var args ; 2344
CDR                  ; 2345
CAR                  ; 2346
LDC 0               ; local var space ; 2347
LDC 0               ; local var space ; 2348
LDF    1337         ;  @ghcstate_read_val ; 2349
AP     4             ; 2350
LD     0 4          ; var state ; 2351
LD     0 7          ; var args ; 2352
CDR                  ; 2353
CDR                  ; 2354
LDC 0               ; local var space ; 2355
LDC 0               ; local var space ; 2356
LDF    1337         ;  @ghcstate_read_val ; 2357
AP     4             ; 2358
CGT                  ; 2359
SEL    2371 2387    ; IF? 135 ; 2360
LDC 0               ; local var space ; 2361
LDC 0               ; local var space ; 2362
LDF    2414         ;  @runGhost ; 2363
AP     7             ; 2364
JOIN                 ; 2365
LDC    13           ; ELSE: 134 ; 2366
LD     0 6          ; var opcode ; 2367
CEQ                  ; 2368
SEL    2389 2409    ; IF? 136 ; 2369
JOIN                 ; 2370
LD     0 4          ; THEN: 135 ; 2371
CAR                 ; generateTupleAccess total=3 pos=0 ; 2372
LD     0 4          ; var state ; 2373
CDR                 ; generateTupleAccess total=3 pos=1 ; 2374
CAR                  ; 2375
LDC    8            ; just constant from code ; 2376
LD     0 7          ; var args ; 2377
CAR                  ; 2378
LDF    1308         ;  @sorted_map_assoc ; 2379
AP     3             ; 2380
LD     0 4          ; var state ; 2381
CDR                 ; generateTupleAccess total=3 pos=2 ; 2382
CDR                  ; 2383
CONS                 ; 2384
CONS                 ; 2385
JOIN                 ; 2386
LD     0 4          ; ELSE: 135 ; 2387
JOIN                 ; 2388
LD     0 0          ; THEN: 136 ; 2389
LD     0 1          ; var world ; 2390
LD     0 2          ; var ghostInfo ; 2391
LD     0 3          ; var lev ; 2392
LD     0 1          ; var world ; 2393
LD     0 8          ; var inc_pc ; 2394
LD     0 2          ; var ghostInfo ; 2395
LD     0 7          ; var args ; 2396
CAR                  ; 2397
LD     0 7          ; var args ; 2398
CDR                  ; 2399
LDC 0               ; local var space ; 2400
LDC 0               ; local var space ; 2401
LDF    1579         ;  @processGhostInt ; 2402
AP     7             ; 2403
LDC 0               ; local var space ; 2404
LDC 0               ; local var space ; 2405
LDF    2414         ;  @runGhost ; 2406
AP     7             ; 2407
JOIN                 ; 2408
LD     0 4          ; ELSE: 136 ; 2409
CAR                 ; generateTupleAccess total=3 pos=0 ; 2410
CDR                 ; generateTupleAccess total=3 pos=2 ; 2411
CDR                  ; 2412
JOIN                 ; 2413
LD     0 4          ;  <== runGhost  [SortedMap<Cons> prog, WorldState world, GhostInfo ghostInfo, int lev, GHCState state] (as blk) ; 2414
CDR                 ; generateTupleAccess total=3 pos=1 ; 2415
CAR                  ; 2416
LDC    8            ; just constant from code ; 2417
LDC    0            ; just constant from code ; 2418
LDF    1292         ;  @sorted_map_get ; 2419
AP     3             ; 2420
ST     0 5           ; 2421
LD     0 0          ; var prog ; 2422
LD     0 5          ; var pc ; 2423
LDC    0            ; NULL literal ; 2424
LDF    1292         ;  @sorted_map_get ; 2425
AP     3             ; 2426
ST     0 6           ; 2427
LD     0 6          ; var step ; 2428
ATOM                 ; 2429
SEL    2432 2437    ; IF? 51 ; 2430
RTN                  ; 2431
LD     0 4          ; THEN: 51 ; 2432
CAR                 ; generateTupleAccess total=3 pos=0 ; 2433
CDR                 ; generateTupleAccess total=3 pos=2 ; 2434
CDR                  ; 2435
JOIN                 ; 2436
LD     0 3          ; ELSE: 51 ; 2437
LDC    1023         ; just constant from code ; 2438
CGT                  ; 2439
SEL    2442 2447    ; IF? 137 ; 2440
JOIN                 ; 2441
LD     0 4          ; THEN: 137 ; 2442
CAR                 ; generateTupleAccess total=3 pos=0 ; 2443
CDR                 ; generateTupleAccess total=3 pos=2 ; 2444
CDR                  ; 2445
JOIN                 ; 2446
LD     0 0          ; ELSE: 137 ; 2447
LD     0 1          ; var world ; 2448
LD     0 2          ; var ghostInfo ; 2449
LD     0 3          ; var lev ; 2450
LDC    1            ; just constant from code ; 2451
ADD                  ; 2452
LD     0 4          ; var state ; 2453
LD     0 6          ; var step ; 2454
LDC 0               ; local var space ; 2455
LDC 0               ; local var space ; 2456
LDC 0               ; local var space ; 2457
LDF    1902         ;  @runGhostStep ; 2458
AP     9             ; 2459
JOIN                 ; 2460
LD     0 1          ;  <== getGhostDirection  [WorldState world, GhostInfo ghostInfo] (as blk) ; 2461
CDR                 ; generateTupleAccess total=3 pos=1 ; 2462
CAR                  ; 2463
LDC    0            ; just constant from code ; 2464
LDC    0            ; NULL literal ; 2465
LDC    0            ; just constant from code ; 2466
CONS                 ; 2467
CONS                 ; 2468
LDF    10169        ;  @lambda_1006 ; 2469
LDF    386          ;  @fold0 ; 2470
AP     3             ; 2471
ST     0 2           ; 2472
LD     0 0          ; var world ; 2473
CDR                 ; generateTupleAccess total=4 pos=2 ; 2474
CDR                  ; 2475
CAR                  ; 2476
CAR                  ; 2477
ST     0 3           ; 2478
LD     0 2          ; var prog ; 2479
CDR                 ; generateTupleAccess total=2 pos=1 ; 2480
LD     0 0          ; var world ; 2481
LD     0 1          ; var ghostInfo ; 2482
LDC    0            ; just constant from code ; 2483
LD     0 3          ; var ghostState ; 2484
LDC    0            ; NULL literal ; 2485
LDC    0            ; just constant from code ; 2486
CONS                 ; 2487
LDC    0            ; NULL literal ; 2488
LDC    0            ; just constant from code ; 2489
CONS                 ; 2490
CONS                 ; 2491
CONS                 ; 2492
LDC 0               ; local var space ; 2493
LDC 0               ; local var space ; 2494
LDF    2414         ;  @runGhost ; 2495
AP     7             ; 2496
RTN                  ; 2497
LDC    1000001      ;  <== entryCPUEmulator  [] (as blk) ; 2498
DBUG                 ; 2499
LDF    9017         ;  @sample_map ; 2500
AP     0             ; 2501
ST     0 0           ; 2502
LDC    1000002      ; just constant from code ; 2503
DBUG                 ; 2504
LD     0 0          ; var ws ; 2505
DBUG                 ; 2506
BRK                  ; 2507
LD     0 0          ; var ws ; 2508
LDC    0            ; NULL literal ; 2509
LDC 0               ; local var space ; 2510
LDC 0               ; local var space ; 2511
LDC 0               ; local var space ; 2512
LDF    2534         ;  @entryFactual ; 2513
AP     5             ; 2514
ST     0 1           ; 2515
LDC    1000003      ; just constant from code ; 2516
DBUG                 ; 2517
LD     0 0          ; var ws ; 2518
DBUG                 ; 2519
BRK                  ; 2520
LD     0 1          ; var initialDone ; 2521
CDR                 ; generateTupleAccess total=2 pos=1 ; 2522
ST     0 2           ; 2523
LD     0 1          ; var initialDone ; 2524
CAR                 ; generateTupleAccess total=2 pos=0 ; 2525
ST     0 3           ; 2526
LD     0 3          ; var a ; 2527
LD     0 0          ; var ws ; 2528
LD     0 2          ; var b ; 2529
AP     2             ; 2530
ST     0 4           ; 2531
LDC    0            ; NULL literal ; 2532
RTN                  ; 2533
LD     0 0          ;  <== entryFactual  [WorldState ws, ListCons<ListCons> ghostSpecs] (as blk) ; 2534
LD     0 1          ; var ghostSpecs ; 2535
LDC 0               ; local var space ; 2536
LDF    3465         ;  @createInitialState ; 2537
AP     3             ; 2538
ST     0 2           ; 2539
LD     0 2          ; var initialState ; 2540
CAR                 ; generateTupleAccess total=4 pos=0 ; 2541
CDR                 ; generateTupleAccess total=6 pos=5 ; 2542
CDR                  ; 2543
CDR                  ; 2544
CDR                  ; 2545
CDR                  ; 2546
LDC    1            ; just constant from code ; 2547
LDF    423          ;  @list_item ; 2548
AP     2             ; 2549
ST     0 3           ; 2550
LDC    0            ; just constant from code ; 2551
LDC    100          ; Named Const = VMExtras.GET_READER ; 2552
LDC    1            ; just constant from code ; 2553
LD     0 3          ; var newRowAccessor ; 2554
AP     2             ; 2555
AP     1             ; 2556
ST     0 4           ; 2557
LD     0 2          ; var initialState ; 2558
LDF    10330        ;  @lambda_1017 ; 2559
CONS                 ; 2560
RTN                  ; 2561
LDF    4108         ;  <== test01  [] (as blk), ALSO: @array_256 ; 2562
AP     0             ; 2563
ST     0 0           ; 2564
LDC    100          ; Named Const = VMExtras.GET_READER ; 2565
LDC    22           ; just constant from code ; 2566
LD     0 0          ; var accessor ; 2567
AP     2             ; 2568
ST     0 1           ; 2569
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 2570
LDC    22           ; just constant from code ; 2571
LD     0 0          ; var accessor ; 2572
AP     2             ; 2573
ST     0 2           ; 2574
LDC    77           ; just constant from code ; 2575
LD     0 2          ; var writer101 ; 2576
AP     1             ; 2577
ST     0 3           ; 2578
LDC    0            ; just constant from code ; 2579
LD     0 1          ; var reader101 ; 2580
AP     1             ; 2581
ST     0 4           ; 2582
LDC    0            ; just constant from code ; 2583
RTN                  ; 2584
LD     0 0          ;  <== collectEdgePills  [ParsedEdge edge, Point start, ListCons<ListCons<Integer>> map] (as blk) ; 2585
CDR                 ; generateTupleAccess total=8 pos=3 ; 2586
CDR                  ; 2587
CDR                  ; 2588
CAR                  ; 2589
LDF    10348        ;  @lambda_1018 ; 2590
LDF    349          ;  @dropWhile ; 2591
AP     2             ; 2592
ST     0 3           ; 2593
LD     0 3          ; var pathRemaining ; 2594
LDF    10371        ;  @lambda_1019 ; 2595
LDF    537          ;  @filter ; 2596
AP     2             ; 2597
ST     0 4           ; 2598
LD     0 4          ; var rv ; 2599
RTN                  ; 2600
LD     0 0          ;  <== collectEdgeGhosts  [ParsedEdge edge, Point start, ListCons<ListCons<Integer>> map] (as blk) ; 2601
CDR                 ; generateTupleAccess total=8 pos=2 ; 2602
CDR                  ; 2603
CAR                  ; 2604
LDF    10383        ;  @lambda_1020 ; 2605
LDF    349          ;  @dropWhile ; 2606
AP     2             ; 2607
ST     0 3           ; 2608
LD     0 3          ; var pathOnEdge ; 2609
LDF    10404        ;  @lambda_1021 ; 2610
LDF    537          ;  @filter ; 2611
AP     2             ; 2612
RTN                  ; 2613
LD     0 0          ;  <== collectAnyEdgePills  [ParsedEdge edge, ListCons<ListCons<Integer>> map] (as blk) ; 2614
CDR                 ; generateTupleAccess total=8 pos=3 ; 2615
CDR                  ; 2616
CDR                  ; 2617
CAR                  ; 2618
ST     0 2           ; 2619
LD     0 2          ; var edgeAccess ; 2620
LDF    10419        ;  @lambda_1022 ; 2621
LDF    537          ;  @filter ; 2622
AP     2             ; 2623
ST     0 3           ; 2624
LD     0 3          ; var rv ; 2625
RTN                  ; 2626
LD     0 0          ;  <== countAnyEdgePills  [ParsedEdge edge] (as blk) ; 2627
CDR                 ; generateTupleAccess total=8 pos=3 ; 2628
CDR                  ; 2629
CDR                  ; 2630
CAR                  ; 2631
ST     0 1           ; 2632
LD     0 1          ; var edgeAccess ; 2633
LDC    0            ; just constant from code ; 2634
LDF    10431        ;  @lambda_1023 ; 2635
LDF    386          ;  @fold0 ; 2636
AP     3             ; 2637
ST     0 2           ; 2638
LD     0 2          ; var rv ; 2639
RTN                  ; 2640
LD     0 0          ;  <== countMyEdgePills  [ParsedEdge edge, Point start] (as blk) ; 2641
CDR                 ; generateTupleAccess total=8 pos=3 ; 2642
CDR                  ; 2643
CDR                  ; 2644
CAR                  ; 2645
LDF    10445        ;  @lambda_1024 ; 2646
LDF    349          ;  @dropWhile ; 2647
AP     2             ; 2648
ST     0 2           ; 2649
LD     0 2          ; var pathRemaining ; 2650
LDC    0            ; just constant from code ; 2651
LDF    10468        ;  @lambda_1025 ; 2652
LDF    386          ;  @fold0 ; 2653
AP     3             ; 2654
ST     0 3           ; 2655
LD     0 3          ; var rv ; 2656
RTN                  ; 2657
LD     0 1          ;  <== performMove  [AIState aistate, WorldState worldState] (as blk) ; 2658
CDR                 ; generateTupleAccess total=4 pos=1 ; 2659
CAR                  ; 2660
CDR                 ; generateTupleAccess total=5 pos=1 ; 2661
CAR                  ; 2662
ST     0 2           ; 2663
LD     0 0          ; var aistate ; 2664
LD     0 2          ; var location ; 2665
LDF    3866         ;  @findEdgesForPoint ; 2666
AP     2             ; 2667
ST     0 3           ; 2668
LD     0 3          ; var edgesForPoint ; 2669
LD     0 0          ; var aistate ; 2670
LD     0 1          ; var worldState ; 2671
LDC 0               ; local var space ; 2672
LDC 0               ; local var space ; 2673
LDC 0               ; local var space ; 2674
LDC 0               ; local var space ; 2675
LDC 0               ; local var space ; 2676
LDC 0               ; local var space ; 2677
LDF    3417         ;  @findBestDistantEdge ; 2678
AP     9             ; 2679
ST     0 7           ; 2680
LD     0 0          ; var aistate ; 2681
CAR                 ; generateTupleAccess total=4 pos=0 ; 2682
CDR                 ; generateTupleAccess total=6 pos=2 ; 2683
CDR                  ; 2684
CAR                  ; 2685
LDF    10566        ;  @lambda_1032 ; 2686
LDF    69           ;  @map ; 2687
AP     2             ; 2688
ST     0 8           ; 2689
LD     0 1          ; var worldState ; 2690
CDR                 ; generateTupleAccess total=4 pos=2 ; 2691
CDR                  ; 2692
CAR                  ; 2693
LDF    10580        ;  @lambda_1033 ; 2694
LDF    69           ;  @map ; 2695
AP     2             ; 2696
ST     0 8           ; 2697
LD     0 7          ; var startEdge ; 2698
CDR                 ; generateTupleAccess total=8 pos=2 ; 2699
CDR                  ; 2700
CAR                  ; 2701
LDF    10591        ;  @lambda_1034 ; 2702
LDF    349          ;  @dropWhile ; 2703
AP     2             ; 2704
ST     0 9           ; 2705
LD     0 9          ; var pathToWalk ; 2706
LDF    532          ;  @length ; 2707
AP     1             ; 2708
LDC    2            ; just constant from code ; 2709
CGTE                 ; 2710
SEL    2752 2768     ; 2711
LD     0 4          ; var retval ; 2712
CDR                 ; generateTupleAccess total=2 pos=1 ; 2713
LDC    3            ; Named Const = Direction.LEFT ; 2714
CEQ                  ; 2715
SEL    2773 2778    ; IF? 52 ; 2716
ST     0 10          ; 2717
LD     0 4          ; var retval ; 2718
CDR                 ; generateTupleAccess total=2 pos=1 ; 2719
LDC    0            ; Named Const = Direction.UP ; 2720
CEQ                  ; 2721
SEL    2784 2789    ; IF? 53 ; 2722
ST     0 11          ; 2723
LD     0 4          ; var retval ; 2724
CAR                 ; generateTupleAccess total=2 pos=0 ; 2725
ST     0 12          ; 2726
LD     0 12         ; var a ; 2727
CAR                 ; generateTupleAccess total=4 pos=0 ; 2728
CDR                 ; generateTupleAccess total=6 pos=5 ; 2729
CDR                  ; 2730
CDR                  ; 2731
CDR                  ; 2732
CDR                  ; 2733
LD     0 11         ; var ny ; 2734
LDF    423          ;  @list_item ; 2735
AP     2             ; 2736
ST     0 13          ; 2737
LDC    0            ; just constant from code ; 2738
LDC    100          ; Named Const = VMExtras.GET_READER ; 2739
LD     0 10         ; var nx ; 2740
LD     0 13         ; var newRowAccessor ; 2741
AP     2             ; 2742
AP     1             ; 2743
ST     0 14          ; 2744
LD     0 14         ; var oldValue ; 2745
LDC    2            ; Named Const = CT.PILL ; 2746
CEQ                  ; 2747
SEL    2795 2802    ; IF? 54 ; 2748
ST     0 14          ; 2749
LD     0 4          ; var retval ; 2750
RTN                  ; 2751
LD     0 9          ; branch@2752 ; 2752
CDR                  ; 2753
CAR                  ; 2754
ST     0 5           ; 2755
LD     0 5          ; var newLocation ; 2756
CAR                 ; generateTupleAccess total=2 pos=0 ; 2757
LD     0 2          ; var location ; 2758
CAR                 ; generateTupleAccess total=2 pos=0 ; 2759
CGT                  ; 2760
SEL    2804 2806    ; IF? 138 ; 2761
ST     0 6           ; 2762
LD     0 0          ; var aistate ; 2763
LD     0 6          ; var direction ; 2764
CONS                 ; 2765
ST     0 4           ; 2766
JOIN                 ; 2767
LD     0 0          ; branch@2768 ; 2768
LDC    0            ; Named Const = Direction.UP ; 2769
CONS                 ; 2770
ST     0 4           ; 2771
JOIN                 ; 2772
LD     0 2          ; THEN: 52 ; 2773
CAR                 ; generateTupleAccess total=2 pos=0 ; 2774
LDC    1            ; just constant from code ; 2775
SUB                  ; 2776
JOIN                 ; 2777
LD     0 4          ; ELSE: 52 ; 2778
CDR                 ; generateTupleAccess total=2 pos=1 ; 2779
LDC    1            ; Named Const = Direction.RIGHT ; 2780
CEQ                  ; 2781
SEL    2813 2818    ; IF? 139 ; 2782
JOIN                 ; 2783
LD     0 2          ; THEN: 53 ; 2784
CDR                 ; generateTupleAccess total=2 pos=1 ; 2785
LDC    1            ; just constant from code ; 2786
SUB                  ; 2787
JOIN                 ; 2788
LD     0 4          ; ELSE: 53 ; 2789
CDR                 ; generateTupleAccess total=2 pos=1 ; 2790
LDC    2            ; Named Const = Direction.DOWN ; 2791
CEQ                  ; 2792
SEL    2821 2826    ; IF? 140 ; 2793
JOIN                 ; 2794
LDC    1            ; THEN: 54 ; 2795
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 2796
LD     0 10         ; var nx ; 2797
LD     0 13         ; var newRowAccessor ; 2798
AP     2             ; 2799
AP     1             ; 2800
JOIN                 ; 2801
LD     0 14         ; ELSE: 54 ; 2802
JOIN                 ; 2803
LDC    1            ; THEN: 138 ; 2804
JOIN                 ; 2805
LD     0 2          ; ELSE: 138 ; 2806
CAR                 ; generateTupleAccess total=2 pos=0 ; 2807
LD     0 5          ; var newLocation ; 2808
CAR                 ; generateTupleAccess total=2 pos=0 ; 2809
CGT                  ; 2810
SEL    2829 2831    ; IF? 141 ; 2811
JOIN                 ; 2812
LD     0 2          ; THEN: 139 ; 2813
CAR                 ; generateTupleAccess total=2 pos=0 ; 2814
LDC    1            ; just constant from code ; 2815
ADD                  ; 2816
JOIN                 ; 2817
LD     0 2          ; ELSE: 139 ; 2818
CAR                 ; generateTupleAccess total=2 pos=0 ; 2819
JOIN                 ; 2820
LD     0 2          ; THEN: 140 ; 2821
CDR                 ; generateTupleAccess total=2 pos=1 ; 2822
LDC    1            ; just constant from code ; 2823
ADD                  ; 2824
JOIN                 ; 2825
LD     0 2          ; ELSE: 140 ; 2826
CDR                 ; generateTupleAccess total=2 pos=1 ; 2827
JOIN                 ; 2828
LDC    3            ; THEN: 141 ; 2829
JOIN                 ; 2830
LD     0 2          ; ELSE: 141 ; 2831
CDR                 ; generateTupleAccess total=2 pos=1 ; 2832
LD     0 5          ; var newLocation ; 2833
CDR                 ; generateTupleAccess total=2 pos=1 ; 2834
CGT                  ; 2835
SEL    2838 2840    ; IF? 142 ; 2836
JOIN                 ; 2837
LDC    0            ; THEN: 142 ; 2838
JOIN                 ; 2839
LDC    2            ; ELSE: 142 ; 2840
JOIN                 ; 2841
LD     0 1          ;  <== waveGhostDangerAcc0  [AIState aistate, Queue<EdgeDangerWaveItem> queue, ListCons<Integer> visitedEdges] (as blk) ; 2842
LDF    415          ;  @queue_isempty ; 2843
AP     1             ; 2844
SEL    2847 2851    ; IF? 55 ; 2845
RTN                  ; 2846
LDC    0            ; THEN: 55 ; 2847
LDF    21           ;  @mydebug ; 2848
AP     1             ; 2849
JOIN                 ; 2850
LD     0 0          ; ELSE: 55 ; 2851
LD     0 1          ; var queue ; 2852
LD     0 2          ; var visitedEdges ; 2853
LDC 0               ; local var space ; 2854
LDC 0               ; local var space ; 2855
LDC 0               ; local var space ; 2856
LDC 0               ; local var space ; 2857
LDC 0               ; local var space ; 2858
LDC 0               ; local var space ; 2859
LDC 0               ; local var space ; 2860
LDC 0               ; local var space ; 2861
LDF    2865         ;  @waveGhostDangerAcc ; 2862
AP     11            ; 2863
JOIN                 ; 2864
LD     0 1          ;  <== waveGhostDangerAcc  [AIState aistate, Queue<EdgeDangerWaveItem> queue, ListCons<Integer> visitedEdges] (as blk) ; 2865
LDC 0               ; local var space ; 2866
LDF    492          ;  @queue_dequeue ; 2867
AP     2             ; 2868
ST     0 3           ; 2869
LD     0 3          ; var smaller ; 2870
CAR                 ; generateTupleAccess total=2 pos=0 ; 2871
ST     0 4           ; 2872
LD     0 0          ; var aistate ; 2873
CAR                 ; generateTupleAccess total=4 pos=0 ; 2874
CDR                 ; generateTupleAccess total=6 pos=2 ; 2875
CDR                  ; 2876
CAR                  ; 2877
LD     0 4          ; var a ; 2878
CAR                 ; generateTupleAccess total=3 pos=0 ; 2879
LDF    3284         ;  @findPrecedingEdgesSimple ; 2880
AP     2             ; 2881
ST     0 5           ; 2882
LD     0 5          ; var precedingEdges ; 2883
LDF    10620        ;  @lambda_1036 ; 2884
LDF    537          ;  @filter ; 2885
AP     2             ; 2886
ST     0 5           ; 2887
LD     0 5          ; var precedingEdges ; 2888
LDF    532          ;  @length ; 2889
AP     1             ; 2890
ST     0 6           ; 2891
LD     0 5          ; var precedingEdges ; 2892
LDF    10625        ;  @lambda_1037 ; 2893
LDF    69           ;  @map ; 2894
AP     2             ; 2895
ST     0 7           ; 2896
LD     0 2          ; var visitedEdges ; 2897
LD     0 5          ; var precedingEdges ; 2898
LDF    10636        ;  @lambda_1038 ; 2899
LDF    69           ;  @map ; 2900
AP     2             ; 2901
LDF    184          ;  @concat2_set ; 2902
AP     2             ; 2903
ST     0 8           ; 2904
LD     0 8          ; var nvisited ; 2905
LD     0 5          ; var precedingEdges ; 2906
LDF    10644        ;  @lambda_1039 ; 2907
LDF    69           ;  @map ; 2908
AP     2             ; 2909
LDF    184          ;  @concat2_set ; 2910
AP     2             ; 2911
ST     0 9           ; 2912
LD     0 5          ; var precedingEdges ; 2913
LD     0 3          ; var smaller ; 2914
CDR                 ; generateTupleAccess total=2 pos=1 ; 2915
LDF    10653        ;  @lambda_1040 ; 2916
LDF    386          ;  @fold0 ; 2917
AP     3             ; 2918
ST     0 10          ; 2919
LD     0 4          ; var a ; 2920
CDR                 ; generateTupleAccess total=3 pos=1 ; 2921
CAR                  ; 2922
LDC    5            ; just constant from code ; 2923
CGTE                 ; 2924
SEL    2927 2933    ; IF? 56 ; 2925
RTN                  ; 2926
LD     0 0          ; THEN: 56 ; 2927
LD     0 10         ; var newQueue ; 2928
LD     0 9          ; var nvisited2 ; 2929
LDF    2842         ;  @waveGhostDangerAcc0 ; 2930
AP     3             ; 2931
JOIN                 ; 2932
LDC    0            ; ELSE: 56 ; 2933
JOIN                 ; 2934
LDF    403          ;  <== waveGhostDanger  [AIState aistate, EdgeDangerWaveItem item] (as blk), ALSO: @queue_new ; 2935
AP     0             ; 2936
LD     0 1          ; var item ; 2937
LDF    407          ;  @queue_enqueue ; 2938
AP     2             ; 2939
ST     0 2           ; 2940
LD     0 0          ; var aistate ; 2941
LD     0 2          ; var q ; 2942
LD     0 1          ; var item ; 2943
CAR                 ; generateTupleAccess total=3 pos=0 ; 2944
CDR                 ; generateTupleAccess total=8 pos=5 ; 2945
CDR                  ; 2946
CDR                  ; 2947
CDR                  ; 2948
CDR                  ; 2949
CAR                  ; 2950
LD     0 1          ; var item ; 2951
CAR                 ; generateTupleAccess total=3 pos=0 ; 2952
CDR                 ; generateTupleAccess total=8 pos=6 ; 2953
CDR                  ; 2954
CDR                  ; 2955
CDR                  ; 2956
CDR                  ; 2957
CDR                  ; 2958
CAR                  ; 2959
LDC    0            ; NULL literal ; 2960
CONS                 ; 2961
CONS                 ; 2962
LDF    2842         ;  @waveGhostDangerAcc0 ; 2963
AP     3             ; 2964
ST     0 3           ; 2965
LDC    0            ; just constant from code ; 2966
RTN                  ; 2967
LD     0 0          ;  <== placeGhostDanger  [AIState aistate, GhostState gs] (as blk) ; 2968
LD     0 1          ; var gs ; 2969
CDR                 ; generateTupleAccess total=3 pos=1 ; 2970
CAR                  ; 2971
LDF    3866         ;  @findEdgesForPoint ; 2972
AP     2             ; 2973
ST     0 2           ; 2974
LD     0 1          ; var gs ; 2975
CDR                 ; generateTupleAccess total=3 pos=2 ; 2976
CDR                  ; 2977
ST     0 3           ; 2978
LD     0 3          ; var direction ; 2979
LDC    1            ; just constant from code ; 2980
CEQ                  ; 2981
SEL    3010 3017    ; IF? 57 ; 2982
ST     0 4           ; 2983
LD     0 3          ; var direction ; 2984
LDC    0            ; just constant from code ; 2985
CEQ                  ; 2986
SEL    3022 3029    ; IF? 58 ; 2987
ST     0 5           ; 2988
LD     0 4          ; var nx ; 2989
LD     0 5          ; var ny ; 2990
CONS                 ; 2991
ST     0 6           ; 2992
LD     0 2          ; var edgesForPoint ; 2993
LDF    10675        ;  @lambda_1041 ; 2994
LDF    537          ;  @filter ; 2995
AP     2             ; 2996
ST     0 2           ; 2997
LD     0 2          ; var edgesForPoint ; 2998
LDF    10694        ;  @lambda_1042 ; 2999
LDF    69           ;  @map ; 3000
AP     2             ; 3001
ST     0 7           ; 3002
LD     0 2          ; var edgesForPoint ; 3003
LDF    10716        ;  @lambda_1043 ; 3004
LDF    69           ;  @map ; 3005
AP     2             ; 3006
ST     0 7           ; 3007
LDC    0            ; just constant from code ; 3008
RTN                  ; 3009
LD     0 1          ; THEN: 57 ; 3010
CDR                 ; generateTupleAccess total=3 pos=1 ; 3011
CAR                  ; 3012
CAR                 ; generateTupleAccess total=2 pos=0 ; 3013
LDC    1            ; just constant from code ; 3014
ADD                  ; 3015
JOIN                 ; 3016
LD     0 3          ; ELSE: 57 ; 3017
LDC    3            ; just constant from code ; 3018
CEQ                  ; 3019
SEL    3034 3041    ; IF? 143 ; 3020
JOIN                 ; 3021
LD     0 1          ; THEN: 58 ; 3022
CDR                 ; generateTupleAccess total=3 pos=1 ; 3023
CAR                  ; 3024
CDR                 ; generateTupleAccess total=2 pos=1 ; 3025
LDC    1            ; just constant from code ; 3026
SUB                  ; 3027
JOIN                 ; 3028
LD     0 3          ; ELSE: 58 ; 3029
LDC    2            ; just constant from code ; 3030
CEQ                  ; 3031
SEL    3046 3053    ; IF? 144 ; 3032
JOIN                 ; 3033
LD     0 1          ; THEN: 143 ; 3034
CDR                 ; generateTupleAccess total=3 pos=1 ; 3035
CAR                  ; 3036
CAR                 ; generateTupleAccess total=2 pos=0 ; 3037
LDC    1            ; just constant from code ; 3038
SUB                  ; 3039
JOIN                 ; 3040
LD     0 1          ; ELSE: 143 ; 3041
CDR                 ; generateTupleAccess total=3 pos=1 ; 3042
CAR                  ; 3043
CAR                 ; generateTupleAccess total=2 pos=0 ; 3044
JOIN                 ; 3045
LD     0 1          ; THEN: 144 ; 3046
CDR                 ; generateTupleAccess total=3 pos=1 ; 3047
CAR                  ; 3048
CDR                 ; generateTupleAccess total=2 pos=1 ; 3049
LDC    1            ; just constant from code ; 3050
ADD                  ; 3051
JOIN                 ; 3052
LD     0 1          ; ELSE: 144 ; 3053
CDR                 ; generateTupleAccess total=3 pos=1 ; 3054
CAR                  ; 3055
CDR                 ; generateTupleAccess total=2 pos=1 ; 3056
JOIN                 ; 3057
LDC    100          ;  <== initialDangerPercent  [int count, ListCons<Point> remainingPath] (as blk) ; 3058
LD     0 1          ; var remainingPath ; 3059
LDF    532          ;  @length ; 3060
AP     1             ; 3061
LDC    100          ; just constant from code ; 3062
MUL                  ; 3063
LD     0 0          ; var count ; 3064
DIV                  ; 3065
SUB                  ; 3066
ST     0 2           ; 3067
LDC    50           ; just constant from code ; 3068
LD     0 2          ; var completedPercent ; 3069
LDC    350          ; just constant from code ; 3070
MUL                  ; 3071
LDC    100          ; just constant from code ; 3072
DIV                  ; 3073
ADD                  ; 3074
RTN                  ; 3075
LD     0 0          ;  <== findReverseEdge  [AIState aistate, ParsedEdge e] (as blk) ; 3076
CAR                 ; generateTupleAccess total=4 pos=0 ; 3077
CDR                 ; generateTupleAccess total=6 pos=2 ; 3078
CDR                  ; 3079
CAR                  ; 3080
LDF    10738        ;  @lambda_1044 ; 3081
LDF    537          ;  @filter ; 3082
AP     2             ; 3083
CAR                  ; 3084
RTN                  ; 3085
LDC    0            ;  <== addEdgeDanger  [ParsedEdge e, int danger] (as blk) ; 3086
LDC    100          ; Named Const = VMExtras.GET_READER ; 3087
LDC    0            ; just constant from code ; 3088
LD     0 0          ; var e ; 3089
CDR                 ; generateTupleAccess total=8 pos=7 ; 3090
CDR                  ; 3091
CDR                  ; 3092
CDR                  ; 3093
CDR                  ; 3094
CDR                  ; 3095
CDR                  ; 3096
AP     2             ; 3097
AP     1             ; 3098
ST     0 2           ; 3099
LD     0 2          ; var oldValue ; 3100
LD     0 1          ; var danger ; 3101
ADD                  ; 3102
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 3103
LDC    0            ; just constant from code ; 3104
LD     0 0          ; var e ; 3105
CDR                 ; generateTupleAccess total=8 pos=7 ; 3106
CDR                  ; 3107
CDR                  ; 3108
CDR                  ; 3109
CDR                  ; 3110
CDR                  ; 3111
CDR                  ; 3112
AP     2             ; 3113
AP     1             ; 3114
ST     0 3           ; 3115
LDC    0            ; just constant from code ; 3116
RTN                  ; 3117
LD     0 0          ;  <== remainingPath  [ParsedEdge pe, Point location] (as blk) ; 3118
CDR                 ; generateTupleAccess total=8 pos=2 ; 3119
CDR                  ; 3120
CAR                  ; 3121
LDF    10760        ;  @lambda_1045 ; 3122
LDF    349          ;  @dropWhile ; 3123
AP     2             ; 3124
ST     0 2           ; 3125
LD     0 2          ; var meAndFurther ; 3126
CDR                  ; 3127
ATOM                 ; 3128
SEL    3131 3133    ; IF? 59 ; 3129
RTN                  ; 3130
LD     0 2          ; THEN: 59 ; 3131
JOIN                 ; 3132
LD     0 2          ; ELSE: 59 ; 3133
CDR                  ; 3134
JOIN                 ; 3135
LD     0 2          ;  <== waveFromEdgeToNearestEdges  [AIState aistate, WorldState worldState, Queue<ListCons<ParsedEdge>> edgeQueue, SortedMap<Integer> visited, ListCons<ListCons<ParsedEdge>> acc, int edgesWithDotsSoFar] (as blk) ; 3136
LDF    415          ;  @queue_isempty ; 3137
AP     1             ; 3138
SEL    3142 3145     ; 3139
LD     0 6          ; var retval ; 3140
RTN                  ; 3141
LD     0 4          ; branch@3142 ; 3142
ST     0 6           ; 3143
JOIN                 ; 3144
LD     0 0          ; branch@3145 ; 3145
LD     0 1          ; var worldState ; 3146
LD     0 2          ; var edgeQueue ; 3147
LD     0 3          ; var visited ; 3148
LD     0 4          ; var acc ; 3149
LD     0 5          ; var edgesWithDotsSoFar ; 3150
LDC 0               ; local var space ; 3151
LDC 0               ; local var space ; 3152
LDC 0               ; local var space ; 3153
LDC 0               ; local var space ; 3154
LDC 0               ; local var space ; 3155
LDC 0               ; local var space ; 3156
LDC 0               ; local var space ; 3157
LDC 0               ; local var space ; 3158
LDC 0               ; local var space ; 3159
LDC 0               ; local var space ; 3160
LDF    3165         ;  @waveFromEdgeToNearestEdges0 ; 3161
AP     16            ; 3162
ST     0 6           ; 3163
JOIN                 ; 3164
LD     0 2          ;  <== waveFromEdgeToNearestEdges0  [AIState aistate, WorldState worldState, Queue<ListCons<ParsedEdge>> edgeQueue, SortedMap<Integer> visited, ListCons<ListCons<ParsedEdge>> acc, int edgesWithDotsSoFar] (as blk) ; 3165
LDC 0               ; local var space ; 3166
LDF    492          ;  @queue_dequeue ; 3167
AP     2             ; 3168
ST     0 7           ; 3169
LD     0 7          ; var reduced ; 3170
CAR                 ; generateTupleAccess total=2 pos=0 ; 3171
ST     0 8           ; 3172
LD     0 0          ; var aistate ; 3173
CAR                 ; generateTupleAccess total=4 pos=0 ; 3174
CDR                 ; generateTupleAccess total=6 pos=2 ; 3175
CDR                  ; 3176
CAR                  ; 3177
LD     0 8          ; var lookingEdge ; 3178
LDF    3274         ;  @findFollowingEdges ; 3179
AP     2             ; 3180
ST     0 9           ; 3181
LD     0 9          ; var following ; 3182
LDF    10781        ;  @lambda_1047 ; 3183
LDF    537          ;  @filter ; 3184
AP     2             ; 3185
ST     0 9           ; 3186
LD     0 9          ; var following ; 3187
LDF    10794        ;  @lambda_1048 ; 3188
LDF    537          ;  @filter ; 3189
AP     2             ; 3190
ST     0 10          ; 3191
LD     0 3          ; var visited ; 3192
LD     0 9          ; var following ; 3193
LDF    10811        ;  @lambda_1049 ; 3194
LDF    69           ;  @map ; 3195
AP     2             ; 3196
LDF    1317         ;  @sorted_map_assoc_all ; 3197
AP     2             ; 3198
ST     0 11          ; 3199
LD     0 11         ; var nvisited ; 3200
LD     0 9          ; var following ; 3201
LDF    10821        ;  @lambda_1050 ; 3202
LDF    69           ;  @map ; 3203
AP     2             ; 3204
LDF    1317         ;  @sorted_map_assoc_all ; 3205
AP     2             ; 3206
ST     0 11          ; 3207
LD     0 9          ; var following ; 3208
LDF    10832        ;  @lambda_1051 ; 3209
LDF    69           ;  @map ; 3210
AP     2             ; 3211
ST     0 12          ; 3212
LD     0 12         ; var newRoutes ; 3213
LD     0 7          ; var reduced ; 3214
CDR                 ; generateTupleAccess total=2 pos=1 ; 3215
LDF    10836        ;  @lambda_1052 ; 3216
LDF    386          ;  @fold0 ; 3217
AP     3             ; 3218
ST     0 13          ; 3219
LD     0 12         ; var newRoutes ; 3220
LD     0 4          ; var acc ; 3221
LDF    184          ;  @concat2_set ; 3222
AP     2             ; 3223
ST     0 14          ; 3224
LD     0 4          ; var acc ; 3225
ATOM                 ; 3226
LDC    1            ; for negation ; 3227
SUB                  ; 3228
SEL    3236 3256    ; IF? 60 ; 3229
ST     0 15          ; 3230
LD     0 15         ; var stopCondition ; 3231
SEL    3258 3260    ; IF? 61 ; 3232
ST     0 6           ; 3233
LD     0 6          ; var retval ; 3234
RTN                  ; 3235
LD     0 5          ; THEN: 60 ; 3236
LDC    3            ; just constant from code ; 3237
CGT                  ; 3238
LD     0 4          ; var acc ; 3239
LDF    532          ;  @length ; 3240
AP     1             ; 3241
LDC    15           ; just constant from code ; 3242
CGT                  ; 3243
MUL                  ; 3244
LD     0 14         ; var newAcc ; 3245
CAR                  ; 3246
LDF    532          ;  @length ; 3247
AP     1             ; 3248
LD     0 4          ; var acc ; 3249
CAR                  ; 3250
LDF    532          ;  @length ; 3251
AP     1             ; 3252
CGT                  ; 3253
MUL                  ; 3254
JOIN                 ; 3255
LDC    0            ; ELSE: 60 ; 3256
JOIN                 ; 3257
LD     0 4          ; THEN: 61 ; 3258
JOIN                 ; 3259
LD     0 0          ; ELSE: 61 ; 3260
LD     0 1          ; var worldState ; 3261
LD     0 13         ; var newqq ; 3262
LD     0 11         ; var nvisited ; 3263
LD     0 14         ; var newAcc ; 3264
LD     0 5          ; var edgesWithDotsSoFar ; 3265
LD     0 10         ; var withDots ; 3266
LDF    532          ;  @length ; 3267
AP     1             ; 3268
ADD                  ; 3269
LDC 0               ; local var space ; 3270
LDF    3136         ;  @waveFromEdgeToNearestEdges ; 3271
AP     7             ; 3272
JOIN                 ; 3273
LD     0 0          ;  <== findFollowingEdges  [ListCons<ParsedEdge> parsedEdges, ListCons<ParsedEdge> lookingEdge] (as blk) ; 3274
LDF    10772        ;  @lambda_1046 ; 3275
LDF    537          ;  @filter ; 3276
AP     2             ; 3277
RTN                  ; 3278
LD     0 0          ;  <== findFollowingEdgesSimple  [ListCons<ParsedEdge> parsedEdges, ParsedEdge lookingEdge] (as blk) ; 3279
LDF    10841        ;  @lambda_1053 ; 3280
LDF    537          ;  @filter ; 3281
AP     2             ; 3282
RTN                  ; 3283
LD     0 0          ;  <== findPrecedingEdgesSimple  [ListCons<ParsedEdge> parsedEdges, ParsedEdge assEdge] (as blk) ; 3284
LDF    10612        ;  @lambda_1035 ; 3285
LDF    537          ;  @filter ; 3286
AP     2             ; 3287
RTN                  ; 3288
LD     0 0          ;  <== pointEquals  [Point a, Point b] (as blk) ; 3289
CAR                 ; generateTupleAccess total=2 pos=0 ; 3290
LD     0 1          ; var b ; 3291
CAR                 ; generateTupleAccess total=2 pos=0 ; 3292
CEQ                  ; 3293
LD     0 0          ; var a ; 3294
CDR                 ; generateTupleAccess total=2 pos=1 ; 3295
LD     0 1          ; var b ; 3296
CDR                 ; generateTupleAccess total=2 pos=1 ; 3297
CEQ                  ; 3298
MUL                  ; 3299
SEL    3302 3304    ; IF? 62 ; 3300
RTN                  ; 3301
LDC    1            ; THEN: 62 ; 3302
JOIN                 ; 3303
LDC    0            ; ELSE: 62 ; 3304
JOIN                 ; 3305
LD     0 0          ;  <== endingPointOfEdgeRoute  [ListCons<ParsedEdge> lookingEdge] (as blk) ; 3306
CAR                  ; 3307
ST     0 1           ; 3308
LD     0 1          ; var lastEdge ; 3309
CDR                 ; generateTupleAccess total=8 pos=1 ; 3310
CAR                  ; 3311
RTN                  ; 3312
LD     0 0          ;  <== countRoutePills  [ListCons<ParsedEdge> route] (as blk) ; 3313
LDC    0            ; just constant from code ; 3314
LDF    10849        ;  @lambda_1054 ; 3315
LDF    386          ;  @fold0 ; 3316
AP     3             ; 3317
RTN                  ; 3318
LD     0 0          ;  <== safetyPercent  [ListCons<ParsedEdge> routeDirected] (as blk) ; 3319
CAR                  ; 3320
ST     0 1           ; 3321
LDC    0            ; just constant from code ; 3322
LDC    100          ; Named Const = VMExtras.GET_READER ; 3323
LDC    0            ; just constant from code ; 3324
LD     0 1          ; var hd ; 3325
CDR                 ; generateTupleAccess total=8 pos=7 ; 3326
CDR                  ; 3327
CDR                  ; 3328
CDR                  ; 3329
CDR                  ; 3330
CDR                  ; 3331
CDR                  ; 3332
AP     2             ; 3333
AP     1             ; 3334
ST     0 2           ; 3335
LD     0 0          ; var routeDirected ; 3336
CDR                  ; 3337
ST     0 0           ; 3338
LD     0 0          ; var routeDirected ; 3339
ATOM                 ; 3340
LDC    1            ; for negation ; 3341
SUB                  ; 3342
SEL    3364 3389     ; 3343
LD     0 0          ; var routeDirected ; 3344
ATOM                 ; 3345
LDC    1            ; for negation ; 3346
SUB                  ; 3347
SEL    3390 3412     ; 3348
LD     0 2          ; var danger ; 3349
LDC    100          ; just constant from code ; 3350
CGT                  ; 3351
SEL    3413 3415    ; IF? 63 ; 3352
LDC    100          ; just constant from code ; 3353
MUL                  ; 3354
LDC    100          ; just constant from code ; 3355
DIV                  ; 3356
ST     0 2           ; 3357
LDC    100          ; just constant from code ; 3358
LD     0 2          ; var danger ; 3359
SUB                  ; 3360
ST     0 3           ; 3361
LD     0 3          ; var safety ; 3362
RTN                  ; 3363
LD     0 0          ; branch@3364 ; 3364
CAR                  ; 3365
ST     0 1           ; 3366
LD     0 2          ; var danger ; 3367
LDC    0            ; just constant from code ; 3368
LDC    100          ; Named Const = VMExtras.GET_READER ; 3369
LDC    0            ; just constant from code ; 3370
LD     0 1          ; var hd ; 3371
CDR                 ; generateTupleAccess total=8 pos=7 ; 3372
CDR                  ; 3373
CDR                  ; 3374
CDR                  ; 3375
CDR                  ; 3376
CDR                  ; 3377
CDR                  ; 3378
AP     2             ; 3379
AP     1             ; 3380
LDC    5            ; just constant from code ; 3381
DIV                  ; 3382
ADD                  ; 3383
ST     0 2           ; 3384
LD     0 0          ; var routeDirected ; 3385
CDR                  ; 3386
ST     0 0           ; 3387
JOIN                 ; 3388
JOIN                ; branch@3389 ; 3389
LD     0 0          ; branch@3390 ; 3390
CAR                  ; 3391
ST     0 1           ; 3392
LD     0 2          ; var danger ; 3393
LDC    0            ; just constant from code ; 3394
LDC    100          ; Named Const = VMExtras.GET_READER ; 3395
LDC    0            ; just constant from code ; 3396
LD     0 1          ; var hd ; 3397
CDR                 ; generateTupleAccess total=8 pos=7 ; 3398
CDR                  ; 3399
CDR                  ; 3400
CDR                  ; 3401
CDR                  ; 3402
CDR                  ; 3403
CDR                  ; 3404
AP     2             ; 3405
AP     1             ; 3406
LDC    15           ; just constant from code ; 3407
DIV                  ; 3408
ADD                  ; 3409
ST     0 2           ; 3410
JOIN                 ; 3411
JOIN                ; branch@3412 ; 3412
LDC    100          ; THEN: 63 ; 3413
JOIN                 ; 3414
LD     0 2          ; ELSE: 63 ; 3415
JOIN                 ; 3416
LDF    403          ;  <== findBestDistantEdge  [ListCons<ParsedEdge> currentEdges, AIState aistate, WorldState worldState] (as blk), ALSO: @queue_new ; 3417
AP     0             ; 3418
ST     0 3           ; 3419
LD     0 0          ; var currentEdges ; 3420
LD     0 3          ; var q ; 3421
LDF    10487        ;  @lambda_1027 ; 3422
LDF    386          ;  @fold0 ; 3423
AP     3             ; 3424
ST     0 3           ; 3425
LD     0 1          ; var aistate ; 3426
LD     0 2          ; var worldState ; 3427
LD     0 3          ; var q ; 3428
LDC    0            ; NULL literal ; 3429
LDC    0            ; just constant from code ; 3430
CONS                 ; 3431
LD     0 0          ; var currentEdges ; 3432
LDF    10494        ;  @lambda_1028 ; 3433
LDF    69           ;  @map ; 3434
AP     2             ; 3435
LDF    1317         ;  @sorted_map_assoc_all ; 3436
AP     2             ; 3437
LDC    0            ; NULL literal ; 3438
LDC    0            ; just constant from code ; 3439
LDC 0               ; local var space ; 3440
LDF    3136         ;  @waveFromEdgeToNearestEdges ; 3441
AP     7             ; 3442
ST     0 4           ; 3443
LD     0 4          ; var dests ; 3444
LDF    10504        ;  @lambda_1029 ; 3445
LDF    69           ;  @map ; 3446
AP     2             ; 3447
ST     0 5           ; 3448
LD     0 5          ; var directedRoutes ; 3449
LDF    10508        ;  @lambda_1030 ; 3450
LDF    69           ;  @map ; 3451
AP     2             ; 3452
ST     0 6           ; 3453
LD     0 6          ; var scores ; 3454
LDF    10562        ;  @lambda_1031 ; 3455
LDF    335          ;  @maximum_by ; 3456
AP     2             ; 3457
ST     0 7           ; 3458
LD     0 7          ; var winningRoute ; 3459
CAR                 ; generateTupleAccess total=3 pos=0 ; 3460
CAR                  ; 3461
ST     0 8           ; 3462
LD     0 8          ; var myStart ; 3463
RTN                  ; 3464
LD     0 0          ;  <== createInitialState  [WorldState ws, ListCons<ListCons> ghostSpecs] (as blk) ; 3465
CDR                 ; generateTupleAccess total=4 pos=2 ; 3466
CDR                  ; 3467
CAR                  ; 3468
LDF    532          ;  @length ; 3469
AP     1             ; 3470
LDF    777          ;  @range_n ; 3471
AP     1             ; 3472
ST     0 2           ; 3473
LD     0 0          ; var ws ; 3474
CAR                 ; generateTupleAccess total=4 pos=0 ; 3475
LDF    4013         ;  @parseStaticMap ; 3476
AP     1             ; 3477
LDC    0            ; just constant from code ; 3478
LDC    0            ; just constant from code ; 3479
LDF    10322        ;  @lambda_1016 ; 3480
LD     0 0          ; var ws ; 3481
CDR                 ; generateTupleAccess total=4 pos=2 ; 3482
CDR                  ; 3483
CAR                  ; 3484
LD     0 1          ; var ghostSpecs ; 3485
LD     0 2          ; var ghostNumbers ; 3486
LDF    687          ;  @zip3_with ; 3487
AP     4             ; 3488
CONS                 ; 3489
CONS                 ; 3490
CONS                 ; 3491
RTN                  ; 3492
LD     0 0          ;  <== isWall  [int test] (as blk) ; 3493
LDC    0            ; Named Const = CT.WALL ; 3494
CEQ                  ; 3495
SEL    3498 3500    ; IF? 64 ; 3496
RTN                  ; 3497
LDC    1            ; THEN: 64 ; 3498
JOIN                 ; 3499
LDC    0            ; ELSE: 64 ; 3500
JOIN                 ; 3501
LDC    77           ;  <== isWalkable  [int test] (as blk) ; 3502
ST     0 1           ; 3503
LD     0 0          ; var test ; 3504
LDC    0            ; Named Const = CT.WALL ; 3505
CEQ                  ; 3506
SEL    3510 3513     ; 3507
LD     0 1          ; var retval ; 3508
RTN                  ; 3509
LDC    0            ; branch@3510 ; 3510
ST     0 1           ; 3511
JOIN                 ; 3512
LDC    1            ; branch@3513 ; 3513
ST     0 1           ; 3514
JOIN                 ; 3515
LD     0 0          ;  <== isWalkable2  [ListCons<ListCons<Integer>> map, Point p] (as blk) ; 3516
LD     0 1          ; var p ; 3517
CDR                 ; generateTupleAccess total=2 pos=1 ; 3518
LD     0 1          ; var p ; 3519
CAR                 ; generateTupleAccess total=2 pos=0 ; 3520
LDF    4087         ;  @getMapItem ; 3521
AP     3             ; 3522
LDC 0               ; local var space ; 3523
LDF    3502         ;  @isWalkable ; 3524
AP     2             ; 3525
RTN                  ; 3526
LD     0 0          ;  <== isJunction  [ListCons<ListCons<Integer>> map, int x, int y] (as blk) ; 3527
LD     0 2          ; var y ; 3528
LDC    1            ; just constant from code ; 3529
SUB                  ; 3530
LD     0 1          ; var x ; 3531
LDF    4087         ;  @getMapItem ; 3532
AP     3             ; 3533
LDC 0               ; local var space ; 3534
LDF    3502         ;  @isWalkable ; 3535
AP     2             ; 3536
ST     0 3           ; 3537
LD     0 0          ; var map ; 3538
LD     0 2          ; var y ; 3539
LDC    1            ; just constant from code ; 3540
ADD                  ; 3541
LD     0 1          ; var x ; 3542
LDF    4087         ;  @getMapItem ; 3543
AP     3             ; 3544
LDC 0               ; local var space ; 3545
LDF    3502         ;  @isWalkable ; 3546
AP     2             ; 3547
ST     0 4           ; 3548
LD     0 0          ; var map ; 3549
LD     0 2          ; var y ; 3550
LD     0 1          ; var x ; 3551
LDC    1            ; just constant from code ; 3552
SUB                  ; 3553
LDF    4087         ;  @getMapItem ; 3554
AP     3             ; 3555
LDC 0               ; local var space ; 3556
LDF    3502         ;  @isWalkable ; 3557
AP     2             ; 3558
ST     0 5           ; 3559
LD     0 0          ; var map ; 3560
LD     0 2          ; var y ; 3561
LD     0 1          ; var x ; 3562
LDC    1            ; just constant from code ; 3563
ADD                  ; 3564
LDF    4087         ;  @getMapItem ; 3565
AP     3             ; 3566
LDC 0               ; local var space ; 3567
LDF    3502         ;  @isWalkable ; 3568
AP     2             ; 3569
ST     0 6           ; 3570
LD     0 3          ; var a1 ; 3571
LD     0 4          ; var a2 ; 3572
ADD                  ; 3573
LD     0 5          ; var a3 ; 3574
ADD                  ; 3575
LD     0 6          ; var a4 ; 3576
ADD                  ; 3577
LDC    2            ; just constant from code ; 3578
CGT                  ; 3579
SEL    3582 3584    ; IF? 66 ; 3580
RTN                  ; 3581
LDC    1            ; THEN: 66 ; 3582
JOIN                 ; 3583
LDC    0            ; ELSE: 66 ; 3584
JOIN                 ; 3585
LD     0 0          ;  <== isDeadEnd  [ListCons<ListCons<Integer>> map, int x, int y] (as blk) ; 3586
LD     0 2          ; var y ; 3587
LDC    1            ; just constant from code ; 3588
SUB                  ; 3589
LD     0 1          ; var x ; 3590
LDF    4087         ;  @getMapItem ; 3591
AP     3             ; 3592
LDC 0               ; local var space ; 3593
LDF    3502         ;  @isWalkable ; 3594
AP     2             ; 3595
ST     0 3           ; 3596
LD     0 0          ; var map ; 3597
LD     0 2          ; var y ; 3598
LDC    1            ; just constant from code ; 3599
ADD                  ; 3600
LD     0 1          ; var x ; 3601
LDF    4087         ;  @getMapItem ; 3602
AP     3             ; 3603
LDC 0               ; local var space ; 3604
LDF    3502         ;  @isWalkable ; 3605
AP     2             ; 3606
ST     0 4           ; 3607
LD     0 0          ; var map ; 3608
LD     0 2          ; var y ; 3609
LD     0 1          ; var x ; 3610
LDC    1            ; just constant from code ; 3611
SUB                  ; 3612
LDF    4087         ;  @getMapItem ; 3613
AP     3             ; 3614
LDC 0               ; local var space ; 3615
LDF    3502         ;  @isWalkable ; 3616
AP     2             ; 3617
ST     0 5           ; 3618
LD     0 0          ; var map ; 3619
LD     0 2          ; var y ; 3620
LD     0 1          ; var x ; 3621
LDC    1            ; just constant from code ; 3622
ADD                  ; 3623
LDF    4087         ;  @getMapItem ; 3624
AP     3             ; 3625
LDC 0               ; local var space ; 3626
LDF    3502         ;  @isWalkable ; 3627
AP     2             ; 3628
ST     0 6           ; 3629
LD     0 3          ; var a1 ; 3630
LD     0 4          ; var a2 ; 3631
ADD                  ; 3632
LD     0 5          ; var a3 ; 3633
ADD                  ; 3634
LD     0 6          ; var a4 ; 3635
ADD                  ; 3636
LDC    1            ; just constant from code ; 3637
CEQ                  ; 3638
SEL    3641 3643    ; IF? 67 ; 3639
RTN                  ; 3640
LDC    1            ; THEN: 67 ; 3641
JOIN                 ; 3642
LDC    0            ; ELSE: 67 ; 3643
JOIN                 ; 3644
LD     0 0          ;  <== findNeighbourJunctions  [ListCons<ListCons<Integer>> map, Point somePoint, SortedMap<Point> allJunctions, ListCons<Point> allJunctions2, ListCons<Function2<Integer,Integer,Function1<Integer,Integer>>> accessors] (as blk) ; 3645
LDF    403          ;  @queue_new ; 3646
AP     0             ; 3647
LD     0 1          ; var somePoint ; 3648
LDC    0            ; NULL literal ; 3649
CONS                 ; 3650
LDF    407          ;  @queue_enqueue ; 3651
AP     2             ; 3652
LD     0 2          ; var allJunctions ; 3653
LD     0 3          ; var allJunctions2 ; 3654
LDC    0            ; NULL literal ; 3655
LDC    0            ; just constant from code ; 3656
CONS                 ; 3657
LD     0 1          ; var somePoint ; 3658
LDF    3714         ;  @getPointKey ; 3659
AP     1             ; 3660
LD     0 1          ; var somePoint ; 3661
LDF    1308         ;  @sorted_map_assoc ; 3662
AP     3             ; 3663
LDC    0            ; NULL literal ; 3664
LDC 0               ; local var space ; 3665
LDF    3682         ;  @waveFromPointToNearestJunction ; 3666
AP     7             ; 3667
ST     0 5           ; 3668
LD     0 5          ; var allNeighbourJunctionsPaths ; 3669
LDF    10857        ;  @lambda_1055 ; 3670
LDF    69           ;  @map ; 3671
AP     2             ; 3672
RTN                  ; 3673
LD     0 0          ;  <== makeEdgeAccess  [ListCons<Point> p, ListCons<Function2<Integer,Integer,Function1<Integer,Integer>>> accessors] (as blk) ; 3674
LDF    10884        ;  @lambda_1056 ; 3675
LDF    69           ;  @map ; 3676
AP     2             ; 3677
LD     0 0          ; var p ; 3678
LDF    724          ;  @zip ; 3679
AP     2             ; 3680
RTN                  ; 3681
LD     0 1          ;  <== waveFromPointToNearestJunction  [ListCons<ListCons<Integer>> map, Queue<ListCons<Point>> pointQueue, SortedMap<Point> destinations, ListCons<Point> destinations2, SortedMap<Point> visited, ListCons<ListCons<Point>> acc] (as blk) ; 3682
LDF    415          ;  @queue_isempty ; 3683
AP     1             ; 3684
SEL    3688 3691     ; 3685
LD     0 6          ; var retval ; 3686
RTN                  ; 3687
LD     0 5          ; branch@3688 ; 3688
ST     0 6           ; 3689
JOIN                 ; 3690
LD     0 0          ; branch@3691 ; 3691
LD     0 1          ; var pointQueue ; 3692
LD     0 2          ; var destinations ; 3693
LD     0 3          ; var destinations2 ; 3694
LD     0 4          ; var visited ; 3695
LD     0 5          ; var acc ; 3696
LDC 0               ; local var space ; 3697
LDC 0               ; local var space ; 3698
LDC 0               ; local var space ; 3699
LDC 0               ; local var space ; 3700
LDC 0               ; local var space ; 3701
LDC 0               ; local var space ; 3702
LDC 0               ; local var space ; 3703
LDC 0               ; local var space ; 3704
LDC 0               ; local var space ; 3705
LDC 0               ; local var space ; 3706
LDC 0               ; local var space ; 3707
LDC 0               ; local var space ; 3708
LDC 0               ; local var space ; 3709
LDF    3727         ;  @waveFromPointToNearestJunction0 ; 3710
AP     19            ; 3711
ST     0 6           ; 3712
JOIN                 ; 3713
LD     0 0          ;  <== getPointKey  [Point pt] (as blk) ; 3714
CAR                 ; generateTupleAccess total=2 pos=0 ; 3715
LDC    300          ; just constant from code ; 3716
MUL                  ; 3717
LD     0 0          ; var pt ; 3718
CDR                 ; generateTupleAccess total=2 pos=1 ; 3719
ADD                  ; 3720
RTN                  ; 3721
LD     0 0          ;  <== addPointKeyAll  [ListCons<Point> in] (as blk) ; 3722
LDF    10216        ;  @lambda_1012 ; 3723
LDF    69           ;  @map ; 3724
AP     2             ; 3725
RTN                  ; 3726
LD     0 1          ;  <== waveFromPointToNearestJunction0  [ListCons<ListCons<Integer>> map, Queue<ListCons<Point>> pointQueue, SortedMap<Point> destinations, ListCons<Point> destinations2, SortedMap<Point> visited, ListCons<ListCons<Point>> acc] (as blk) ; 3727
LDC 0               ; local var space ; 3728
LDF    492          ;  @queue_dequeue ; 3729
AP     2             ; 3730
ST     0 7           ; 3731
LD     0 7          ; var emptier ; 3732
CAR                 ; generateTupleAccess total=2 pos=0 ; 3733
ST     0 8           ; 3734
LD     0 8          ; var thisRoute ; 3735
CAR                  ; 3736
ST     0 9           ; 3737
LD     0 9          ; var weAreHere ; 3738
CAR                 ; generateTupleAccess total=2 pos=0 ; 3739
LDC    1            ; just constant from code ; 3740
ADD                  ; 3741
LD     0 9          ; var weAreHere ; 3742
CDR                 ; generateTupleAccess total=2 pos=1 ; 3743
CONS                 ; 3744
LD     0 9          ; var weAreHere ; 3745
CAR                 ; generateTupleAccess total=2 pos=0 ; 3746
LDC    1            ; just constant from code ; 3747
SUB                  ; 3748
LD     0 9          ; var weAreHere ; 3749
CDR                 ; generateTupleAccess total=2 pos=1 ; 3750
CONS                 ; 3751
LD     0 9          ; var weAreHere ; 3752
CAR                 ; generateTupleAccess total=2 pos=0 ; 3753
LD     0 9          ; var weAreHere ; 3754
CDR                 ; generateTupleAccess total=2 pos=1 ; 3755
LDC    1            ; just constant from code ; 3756
ADD                  ; 3757
CONS                 ; 3758
LD     0 9          ; var weAreHere ; 3759
CAR                 ; generateTupleAccess total=2 pos=0 ; 3760
LD     0 9          ; var weAreHere ; 3761
CDR                 ; generateTupleAccess total=2 pos=1 ; 3762
LDC    1            ; just constant from code ; 3763
SUB                  ; 3764
CONS                 ; 3765
LDC    0            ; NULL literal ; 3766
CONS                 ; 3767
CONS                 ; 3768
CONS                 ; 3769
CONS                 ; 3770
LDF    3722         ;  @addPointKeyAll ; 3771
AP     1             ; 3772
ST     0 10          ; 3773
LD     0 10         ; var possibleDestinations ; 3774
LDF    10894        ;  @lambda_1057 ; 3775
LDF    537          ;  @filter ; 3776
AP     2             ; 3777
ST     0 11          ; 3778
LD     0 11         ; var exits ; 3779
LDF    10908        ;  @lambda_1058 ; 3780
LDF    537          ;  @filter ; 3781
AP     2             ; 3782
ST     0 12          ; 3783
LD     0 11         ; var exits ; 3784
LDF    10914        ;  @lambda_1059 ; 3785
LDF    537          ;  @filter ; 3786
AP     2             ; 3787
ST     0 13          ; 3788
LDC    0            ; NULL literal ; 3789
LDC    1            ; just constant from code ; 3790
CONS                 ; 3791
LD     0 12         ; var arrivedsList ; 3792
LDF    1317         ;  @sorted_map_assoc_all ; 3793
AP     2             ; 3794
ST     0 14          ; 3795
LD     0 11         ; var exits ; 3796
LDF    10919        ;  @lambda_1060 ; 3797
LDF    537          ;  @filter ; 3798
AP     2             ; 3799
ST     0 15          ; 3800
LD     0 15         ; var continueds ; 3801
LDF    10927        ;  @lambda_1061 ; 3802
LDF    69           ;  @map ; 3803
AP     2             ; 3804
ST     0 16          ; 3805
LD     0 16         ; var exitRoutes ; 3806
LD     0 7          ; var emptier ; 3807
CDR                 ; generateTupleAccess total=2 pos=1 ; 3808
LDF    10932        ;  @lambda_1062 ; 3809
LDF    386          ;  @fold0 ; 3810
AP     3             ; 3811
ST     0 17          ; 3812
LD     0 5          ; var acc ; 3813
LD     0 12         ; var arrivedsList ; 3814
LDF    10937        ;  @lambda_1063 ; 3815
LDF    69           ;  @map ; 3816
AP     2             ; 3817
LDF    184          ;  @concat2_set ; 3818
AP     2             ; 3819
ST     0 18          ; 3820
LD     0 12         ; var arrivedsList ; 3821
LDF    532          ;  @length ; 3822
AP     1             ; 3823
LD     0 13         ; var arrivedsList2 ; 3824
LDF    532          ;  @length ; 3825
AP     1             ; 3826
CEQ                  ; 3827
LDC    1            ; for negation ; 3828
SUB                  ; 3829
SEL    3846 3865     ; 3830
LD     0 0          ; var map ; 3831
LD     0 17         ; var filledQueue ; 3832
LD     0 2          ; var destinations ; 3833
LD     0 3          ; var destinations2 ; 3834
LD     0 4          ; var visited ; 3835
LD     0 11         ; var exits ; 3836
LDF    1317         ;  @sorted_map_assoc_all ; 3837
AP     2             ; 3838
LD     0 18         ; var newacc ; 3839
LDC 0               ; local var space ; 3840
LDF    3682         ;  @waveFromPointToNearestJunction ; 3841
AP     7             ; 3842
ST     0 6           ; 3843
LD     0 6          ; var retval ; 3844
RTN                  ; 3845
LDC    5000000      ; branch@3846 ; 3846
DBUG                 ; 3847
LD     0 2          ; var destinations ; 3848
DBUG                 ; 3849
LD     0 3          ; var destinations2 ; 3850
DBUG                 ; 3851
LD     0 12         ; var arrivedsList ; 3852
DBUG                 ; 3853
LD     0 13         ; var arrivedsList2 ; 3854
DBUG                 ; 3855
LD     0 11         ; var exits ; 3856
DBUG                 ; 3857
BRK                  ; 3858
LD     0 11         ; var exits ; 3859
LDF    11046        ;  @lambda_1073 ; 3860
LDF    537          ;  @filter ; 3861
AP     2             ; 3862
DBUG                 ; 3863
JOIN                 ; 3864
JOIN                ; branch@3865 ; 3865
LD     0 0          ;  <== findEdgesForPoint  [AIState state, Point pos] (as blk) ; 3866
CAR                 ; generateTupleAccess total=4 pos=0 ; 3867
CDR                 ; generateTupleAccess total=6 pos=2 ; 3868
CDR                  ; 3869
CAR                  ; 3870
LDF    10482        ;  @lambda_1026 ; 3871
LDF    537          ;  @filter ; 3872
AP     2             ; 3873
RTN                  ; 3874
LD     0 1          ;  <== pointInEdge  [Point pos, ParsedEdge e] (as blk) ; 3875
CDR                 ; generateTupleAccess total=8 pos=2 ; 3876
CDR                  ; 3877
CAR                  ; 3878
LDF    10942        ;  @lambda_1064 ; 3879
LDF    545          ;  @any ; 3880
AP     2             ; 3881
RTN                  ; 3882
LDC    4000001      ;  <== parseMap  [ListCons<ListCons<Integer>> m] (as blk) ; 3883
DBUG                 ; 3884
LD     0 0          ; var m ; 3885
LDF    10182        ;  @lambda_1007 ; 3886
LDF    69           ;  @map ; 3887
AP     2             ; 3888
ST     0 1           ; 3889
LDC    4000002      ; just constant from code ; 3890
DBUG                 ; 3891
LDF    10185        ;  @lambda_1008 ; 3892
LD     0 0          ; var m ; 3893
LD     0 1          ; var accessors ; 3894
LDF    660          ;  @zip_with ; 3895
AP     3             ; 3896
ST     0 2           ; 3897
LDC    4000003      ; just constant from code ; 3898
DBUG                 ; 3899
LD     0 2          ; var mapAccessors ; 3900
LDF    10189        ;  @lambda_1009 ; 3901
LDF    69           ;  @map ; 3902
AP     2             ; 3903
ST     0 3           ; 3904
LDC    4000004      ; just constant from code ; 3905
DBUG                 ; 3906
LD     0 0          ; var m ; 3907
LDC    0            ; just constant from code ; 3908
LDF    10196        ;  @lambda_1010 ; 3909
LDF    86           ;  @mapi ; 3910
AP     3             ; 3911
ST     0 4           ; 3912
LDC    4000005      ; just constant from code ; 3913
DBUG                 ; 3914
LD     0 4          ; var toConcat ; 3915
LDF    118          ;  @concat ; 3916
AP     1             ; 3917
ST     0 5           ; 3918
LD     0 5          ; var walkableList ; 3919
LDF    10204        ;  @lambda_1011 ; 3920
LDF    537          ;  @filter ; 3921
AP     2             ; 3922
ST     0 6           ; 3923
LDC    4000006      ; just constant from code ; 3924
DBUG                 ; 3925
LDC    0            ; NULL literal ; 3926
LDC    0            ; just constant from code ; 3927
CONS                 ; 3928
LD     0 5          ; var walkableList ; 3929
LDF    3722         ;  @addPointKeyAll ; 3930
AP     1             ; 3931
LDF    1317         ;  @sorted_map_assoc_all ; 3932
AP     2             ; 3933
ST     0 7           ; 3934
LDC    4000007      ; just constant from code ; 3935
DBUG                 ; 3936
LDC    0            ; NULL literal ; 3937
LDC    0            ; just constant from code ; 3938
CONS                 ; 3939
LD     0 6          ; var junctionsList ; 3940
LDF    3722         ;  @addPointKeyAll ; 3941
AP     1             ; 3942
LDF    1317         ;  @sorted_map_assoc_all ; 3943
AP     2             ; 3944
ST     0 8           ; 3945
LDC    4000008      ; just constant from code ; 3946
DBUG                 ; 3947
LD     0 6          ; var junctionsList ; 3948
LDF    10222        ;  @lambda_1013 ; 3949
LDF    69           ;  @map ; 3950
AP     2             ; 3951
LDF    118          ;  @concat ; 3952
AP     1             ; 3953
ST     0 9           ; 3954
LDC    4000009      ; just constant from code ; 3955
DBUG                 ; 3956
LD     0 9          ; var allParsedEdges ; 3957
LDC    0            ; just constant from code ; 3958
LDF    10231        ;  @lambda_1014 ; 3959
LDF    86           ;  @mapi ; 3960
AP     3             ; 3961
ST     0 10          ; 3962
LDC    4000010      ; just constant from code ; 3963
DBUG                 ; 3964
LD     0 10         ; var allParsedEdges2 ; 3965
LDC    0            ; just constant from code ; 3966
LDF    10269        ;  @lambda_1015 ; 3967
LDF    86           ;  @mapi ; 3968
AP     3             ; 3969
ST     0 11          ; 3970
LDC    4000011      ; just constant from code ; 3971
DBUG                 ; 3972
LD     0 7          ; var walkable ; 3973
LD     0 8          ; var junctions ; 3974
LD     0 11         ; var allParsedEdges3 ; 3975
LDC    0            ; NULL literal ; 3976
LDC    0            ; NULL literal ; 3977
LD     0 1          ; var accessors ; 3978
CONS                 ; 3979
CONS                 ; 3980
CONS                 ; 3981
CONS                 ; 3982
CONS                 ; 3983
RTN                  ; 3984
LD     0 2          ;  <== findEdge  [Point a, Point b, ListCons<ParsedEdge> edges] (as blk) ; 3985
LDF    10959        ;  @lambda_1065 ; 3986
LDF    537          ;  @filter ; 3987
AP     2             ; 3988
CAR                  ; 3989
RTN                  ; 3990
LD     0 0          ;  <== edgeNumber  [ParsedEdge edge] (as blk) ; 3991
CDR                 ; generateTupleAccess total=8 pos=5 ; 3992
CDR                  ; 3993
CDR                  ; 3994
CDR                  ; 3995
CDR                  ; 3996
CAR                  ; 3997
RTN                  ; 3998
LD     0 0          ;  <== my_cat_maybes  [ListCons<Maybe<Point>> maybeListCons] (as blk) ; 3999
LDC 0               ; local var space ; 4000
LDC 0               ; local var space ; 4001
LDF    107          ;  @cat_maybes ; 4002
AP     3             ; 4003
ST     0 1           ; 4004
LD     0 1          ; var rv ; 4005
RTN                  ; 4006
LD     0 0          ;  <== collectWalkableXY  [ListCons<Integer> row, Integer rowy] (as blk) ; 4007
LDC    0            ; just constant from code ; 4008
LDF    10972        ;  @lambda_1066 ; 4009
LDF    86           ;  @mapi ; 4010
AP     3             ; 4011
RTN                  ; 4012
LD     0 0          ;  <== parseStaticMap  [ListCons<ListCons<Integer>> map] (as blk) ; 4013
LDC 0               ; local var space ; 4014
LDC 0               ; local var space ; 4015
LDC 0               ; local var space ; 4016
LDC 0               ; local var space ; 4017
LDC 0               ; local var space ; 4018
LDC 0               ; local var space ; 4019
LDC 0               ; local var space ; 4020
LDC 0               ; local var space ; 4021
LDC 0               ; local var space ; 4022
LDC 0               ; local var space ; 4023
LDC 0               ; local var space ; 4024
LDF    3883         ;  @parseMap ; 4025
AP     12            ; 4026
RTN                  ; 4027
LDF    403          ;  <== test2  [] (as blk), ALSO: @queue_new ; 4028
AP     0             ; 4029
LDC    1            ; just constant from code ; 4030
LDF    407          ;  @queue_enqueue ; 4031
AP     2             ; 4032
LDC    2            ; just constant from code ; 4033
LDF    407          ;  @queue_enqueue ; 4034
AP     2             ; 4035
LDC    3            ; just constant from code ; 4036
LDF    407          ;  @queue_enqueue ; 4037
AP     2             ; 4038
ST     0 0           ; 4039
LD     0 0          ; var queue ; 4040
LDC 0               ; local var space ; 4041
LDF    492          ;  @queue_dequeue ; 4042
AP     2             ; 4043
ST     0 1           ; 4044
LD     0 1          ; var q1 ; 4045
CDR                 ; generateTupleAccess total=2 pos=1 ; 4046
LDC 0               ; local var space ; 4047
LDF    492          ;  @queue_dequeue ; 4048
AP     2             ; 4049
ST     0 1           ; 4050
LD     0 1          ; var q1 ; 4051
CDR                 ; generateTupleAccess total=2 pos=1 ; 4052
LDC 0               ; local var space ; 4053
LDF    492          ;  @queue_dequeue ; 4054
AP     2             ; 4055
ST     0 1           ; 4056
LDC    1            ; just constant from code ; 4057
RTN                  ; 4058
LDC    0            ;  <== test3  [] (as blk) ; 4059
LDC    0            ; just constant from code ; 4060
CONS                 ; 4061
ST     0 0           ; 4062
LD     0 0          ; var map ; 4063
LDC    30           ; just constant from code ; 4064
LDC    31           ; just constant from code ; 4065
LDF    1308         ;  @sorted_map_assoc ; 4066
AP     3             ; 4067
LDC    20           ; just constant from code ; 4068
LDC    21           ; just constant from code ; 4069
LDF    1308         ;  @sorted_map_assoc ; 4070
AP     3             ; 4071
LDC    10           ; just constant from code ; 4072
LDC    11           ; just constant from code ; 4073
LDF    1308         ;  @sorted_map_assoc ; 4074
AP     3             ; 4075
ST     0 1           ; 4076
LD     0 1          ; var new_map2 ; 4077
LDC    20           ; just constant from code ; 4078
LDC    33           ; just constant from code ; 4079
LDF    1308         ;  @sorted_map_assoc ; 4080
AP     3             ; 4081
LDC    20           ; just constant from code ; 4082
LDC    88           ; just constant from code ; 4083
LDF    1292         ;  @sorted_map_get ; 4084
AP     3             ; 4085
RTN                  ; 4086
LDC    0            ;  <== getMapItem  [ListCons<ListCons<Integer>> map, int y, int x] (as blk) ; 4087
LD     0 1          ; var y ; 4088
CGT                  ; 4089
LDC    0            ; just constant from code ; 4090
LD     0 2          ; var x ; 4091
CGT                  ; 4092
ADD                  ; 4093
SEL    4096 4098    ; IF? 65 ; 4094
RTN                  ; 4095
LDC    0            ; THEN: 65 ; 4096
JOIN                 ; 4097
LD     0 0          ; ELSE: 65 ; 4098
LD     0 1          ; var y ; 4099
LDC    0            ; just constant from code ; 4100
LDF    469          ;  @list_item_def ; 4101
AP     3             ; 4102
LD     0 2          ; var x ; 4103
LDC    0            ; just constant from code ; 4104
LDF    469          ;  @list_item_def ; 4105
AP     3             ; 4106
JOIN                 ; 4107
LDC 0               ; generated from native: array_256 ; 4108
LDC 0                ; 4109
LDC 0                ; 4110
LDC 0                ; 4111
LDC 0                ; 4112
LDC 0                ; 4113
LDC 0                ; 4114
LDC 0                ; 4115
LDC 0                ; 4116
LDC 0                ; 4117
LDC 0                ; 4118
LDC 0                ; 4119
LDC 0                ; 4120
LDC 0                ; 4121
LDC 0                ; 4122
LDC 0                ; 4123
LDC 0                ; 4124
LDC 0                ; 4125
LDC 0                ; 4126
LDC 0                ; 4127
LDC 0                ; 4128
LDC 0                ; 4129
LDC 0                ; 4130
LDC 0                ; 4131
LDC 0                ; 4132
LDC 0                ; 4133
LDC 0                ; 4134
LDC 0                ; 4135
LDC 0                ; 4136
LDC 0                ; 4137
LDC 0                ; 4138
LDC 0                ; 4139
LDC 0                ; 4140
LDC 0                ; 4141
LDC 0                ; 4142
LDC 0                ; 4143
LDC 0                ; 4144
LDC 0                ; 4145
LDC 0                ; 4146
LDC 0                ; 4147
LDC 0                ; 4148
LDC 0                ; 4149
LDC 0                ; 4150
LDC 0                ; 4151
LDC 0                ; 4152
LDC 0                ; 4153
LDC 0                ; 4154
LDC 0                ; 4155
LDC 0                ; 4156
LDC 0                ; 4157
LDC 0                ; 4158
LDC 0                ; 4159
LDC 0                ; 4160
LDC 0                ; 4161
LDC 0                ; 4162
LDC 0                ; 4163
LDC 0                ; 4164
LDC 0                ; 4165
LDC 0                ; 4166
LDC 0                ; 4167
LDC 0                ; 4168
LDC 0                ; 4169
LDC 0                ; 4170
LDC 0                ; 4171
LDC 0                ; 4172
LDC 0                ; 4173
LDC 0                ; 4174
LDC 0                ; 4175
LDC 0                ; 4176
LDC 0                ; 4177
LDC 0                ; 4178
LDC 0                ; 4179
LDC 0                ; 4180
LDC 0                ; 4181
LDC 0                ; 4182
LDC 0                ; 4183
LDC 0                ; 4184
LDC 0                ; 4185
LDC 0                ; 4186
LDC 0                ; 4187
LDC 0                ; 4188
LDC 0                ; 4189
LDC 0                ; 4190
LDC 0                ; 4191
LDC 0                ; 4192
LDC 0                ; 4193
LDC 0                ; 4194
LDC 0                ; 4195
LDC 0                ; 4196
LDC 0                ; 4197
LDC 0                ; 4198
LDC 0                ; 4199
LDC 0                ; 4200
LDC 0                ; 4201
LDC 0                ; 4202
LDC 0                ; 4203
LDC 0                ; 4204
LDC 0                ; 4205
LDC 0                ; 4206
LDC 0                ; 4207
LDC 0                ; 4208
LDC 0                ; 4209
LDC 0                ; 4210
LDC 0                ; 4211
LDC 0                ; 4212
LDC 0                ; 4213
LDC 0                ; 4214
LDC 0                ; 4215
LDC 0                ; 4216
LDC 0                ; 4217
LDC 0                ; 4218
LDC 0                ; 4219
LDC 0                ; 4220
LDC 0                ; 4221
LDC 0                ; 4222
LDC 0                ; 4223
LDC 0                ; 4224
LDC 0                ; 4225
LDC 0                ; 4226
LDC 0                ; 4227
LDC 0                ; 4228
LDC 0                ; 4229
LDC 0                ; 4230
LDC 0                ; 4231
LDC 0                ; 4232
LDC 0                ; 4233
LDC 0                ; 4234
LDC 0                ; 4235
LDC 0                ; 4236
LDC 0                ; 4237
LDC 0                ; 4238
LDC 0                ; 4239
LDC 0                ; 4240
LDC 0                ; 4241
LDC 0                ; 4242
LDC 0                ; 4243
LDC 0                ; 4244
LDC 0                ; 4245
LDC 0                ; 4246
LDC 0                ; 4247
LDC 0                ; 4248
LDC 0                ; 4249
LDC 0                ; 4250
LDC 0                ; 4251
LDC 0                ; 4252
LDC 0                ; 4253
LDC 0                ; 4254
LDC 0                ; 4255
LDC 0                ; 4256
LDC 0                ; 4257
LDC 0                ; 4258
LDC 0                ; 4259
LDC 0                ; 4260
LDC 0                ; 4261
LDC 0                ; 4262
LDC 0                ; 4263
LDC 0                ; 4264
LDC 0                ; 4265
LDC 0                ; 4266
LDC 0                ; 4267
LDC 0                ; 4268
LDC 0                ; 4269
LDC 0                ; 4270
LDC 0                ; 4271
LDC 0                ; 4272
LDC 0                ; 4273
LDC 0                ; 4274
LDC 0                ; 4275
LDC 0                ; 4276
LDC 0                ; 4277
LDC 0                ; 4278
LDC 0                ; 4279
LDC 0                ; 4280
LDC 0                ; 4281
LDC 0                ; 4282
LDC 0                ; 4283
LDC 0                ; 4284
LDC 0                ; 4285
LDC 0                ; 4286
LDC 0                ; 4287
LDC 0                ; 4288
LDC 0                ; 4289
LDC 0                ; 4290
LDC 0                ; 4291
LDC 0                ; 4292
LDC 0                ; 4293
LDC 0                ; 4294
LDC 0                ; 4295
LDC 0                ; 4296
LDC 0                ; 4297
LDC 0                ; 4298
LDC 0                ; 4299
LDC 0                ; 4300
LDC 0                ; 4301
LDC 0                ; 4302
LDC 0                ; 4303
LDC 0                ; 4304
LDC 0                ; 4305
LDC 0                ; 4306
LDC 0                ; 4307
LDC 0                ; 4308
LDC 0                ; 4309
LDC 0                ; 4310
LDC 0                ; 4311
LDC 0                ; 4312
LDC 0                ; 4313
LDC 0                ; 4314
LDC 0                ; 4315
LDC 0                ; 4316
LDC 0                ; 4317
LDC 0                ; 4318
LDC 0                ; 4319
LDC 0                ; 4320
LDC 0                ; 4321
LDC 0                ; 4322
LDC 0                ; 4323
LDC 0                ; 4324
LDC 0                ; 4325
LDC 0                ; 4326
LDC 0                ; 4327
LDC 0                ; 4328
LDC 0                ; 4329
LDC 0                ; 4330
LDC 0                ; 4331
LDC 0                ; 4332
LDC 0                ; 4333
LDC 0                ; 4334
LDC 0                ; 4335
LDC 0                ; 4336
LDC 0                ; 4337
LDC 0                ; 4338
LDC 0                ; 4339
LDC 0                ; 4340
LDC 0                ; 4341
LDC 0                ; 4342
LDC 0                ; 4343
LDC 0                ; 4344
LDC 0                ; 4345
LDC 0                ; 4346
LDC 0                ; 4347
LDC 0                ; 4348
LDC 0                ; 4349
LDC 0                ; 4350
LDC 0                ; 4351
LDC 0                ; 4352
LDC 0                ; 4353
LDC 0                ; 4354
LDC 0                ; 4355
LDC 0                ; 4356
LDC 0                ; 4357
LDC 0                ; 4358
LDC 0                ; 4359
LDC 0                ; 4360
LDC 0                ; 4361
LDC 0                ; 4362
LDC 0                ; 4363
LDF 4367             ; 4364
AP 256               ; 4365
RTN                  ; 4366
LDF  4369            ; 4367
RTN                  ; 4368
LD  0   0            ; 4369
LDC 100              ; 4370
CEQ                  ; 4371
TSEL    4373 5399    ; 4372
LD  0   1            ; 4373
LDC 0                ; 4374
CEQ                  ; 4375
TSEL    6427 4377    ; 4376
LD  0   1            ; 4377
LDC 1                ; 4378
CEQ                  ; 4379
TSEL    6437 4381    ; 4380
LD  0   1            ; 4381
LDC 2                ; 4382
CEQ                  ; 4383
TSEL    6447 4385    ; 4384
LD  0   1            ; 4385
LDC 3                ; 4386
CEQ                  ; 4387
TSEL    6457 4389    ; 4388
LD  0   1            ; 4389
LDC 4                ; 4390
CEQ                  ; 4391
TSEL    6467 4393    ; 4392
LD  0   1            ; 4393
LDC 5                ; 4394
CEQ                  ; 4395
TSEL    6477 4397    ; 4396
LD  0   1            ; 4397
LDC 6                ; 4398
CEQ                  ; 4399
TSEL    6487 4401    ; 4400
LD  0   1            ; 4401
LDC 7                ; 4402
CEQ                  ; 4403
TSEL    6497 4405    ; 4404
LD  0   1            ; 4405
LDC 8                ; 4406
CEQ                  ; 4407
TSEL    6507 4409    ; 4408
LD  0   1            ; 4409
LDC 9                ; 4410
CEQ                  ; 4411
TSEL    6517 4413    ; 4412
LD  0   1            ; 4413
LDC 10               ; 4414
CEQ                  ; 4415
TSEL    6527 4417    ; 4416
LD  0   1            ; 4417
LDC 11               ; 4418
CEQ                  ; 4419
TSEL    6537 4421    ; 4420
LD  0   1            ; 4421
LDC 12               ; 4422
CEQ                  ; 4423
TSEL    6547 4425    ; 4424
LD  0   1            ; 4425
LDC 13               ; 4426
CEQ                  ; 4427
TSEL    6557 4429    ; 4428
LD  0   1            ; 4429
LDC 14               ; 4430
CEQ                  ; 4431
TSEL    6567 4433    ; 4432
LD  0   1            ; 4433
LDC 15               ; 4434
CEQ                  ; 4435
TSEL    6577 4437    ; 4436
LD  0   1            ; 4437
LDC 16               ; 4438
CEQ                  ; 4439
TSEL    6587 4441    ; 4440
LD  0   1            ; 4441
LDC 17               ; 4442
CEQ                  ; 4443
TSEL    6597 4445    ; 4444
LD  0   1            ; 4445
LDC 18               ; 4446
CEQ                  ; 4447
TSEL    6607 4449    ; 4448
LD  0   1            ; 4449
LDC 19               ; 4450
CEQ                  ; 4451
TSEL    6617 4453    ; 4452
LD  0   1            ; 4453
LDC 20               ; 4454
CEQ                  ; 4455
TSEL    6627 4457    ; 4456
LD  0   1            ; 4457
LDC 21               ; 4458
CEQ                  ; 4459
TSEL    6637 4461    ; 4460
LD  0   1            ; 4461
LDC 22               ; 4462
CEQ                  ; 4463
TSEL    6647 4465    ; 4464
LD  0   1            ; 4465
LDC 23               ; 4466
CEQ                  ; 4467
TSEL    6657 4469    ; 4468
LD  0   1            ; 4469
LDC 24               ; 4470
CEQ                  ; 4471
TSEL    6667 4473    ; 4472
LD  0   1            ; 4473
LDC 25               ; 4474
CEQ                  ; 4475
TSEL    6677 4477    ; 4476
LD  0   1            ; 4477
LDC 26               ; 4478
CEQ                  ; 4479
TSEL    6687 4481    ; 4480
LD  0   1            ; 4481
LDC 27               ; 4482
CEQ                  ; 4483
TSEL    6697 4485    ; 4484
LD  0   1            ; 4485
LDC 28               ; 4486
CEQ                  ; 4487
TSEL    6707 4489    ; 4488
LD  0   1            ; 4489
LDC 29               ; 4490
CEQ                  ; 4491
TSEL    6717 4493    ; 4492
LD  0   1            ; 4493
LDC 30               ; 4494
CEQ                  ; 4495
TSEL    6727 4497    ; 4496
LD  0   1            ; 4497
LDC 31               ; 4498
CEQ                  ; 4499
TSEL    6737 4501    ; 4500
LD  0   1            ; 4501
LDC 32               ; 4502
CEQ                  ; 4503
TSEL    6747 4505    ; 4504
LD  0   1            ; 4505
LDC 33               ; 4506
CEQ                  ; 4507
TSEL    6757 4509    ; 4508
LD  0   1            ; 4509
LDC 34               ; 4510
CEQ                  ; 4511
TSEL    6767 4513    ; 4512
LD  0   1            ; 4513
LDC 35               ; 4514
CEQ                  ; 4515
TSEL    6777 4517    ; 4516
LD  0   1            ; 4517
LDC 36               ; 4518
CEQ                  ; 4519
TSEL    6787 4521    ; 4520
LD  0   1            ; 4521
LDC 37               ; 4522
CEQ                  ; 4523
TSEL    6797 4525    ; 4524
LD  0   1            ; 4525
LDC 38               ; 4526
CEQ                  ; 4527
TSEL    6807 4529    ; 4528
LD  0   1            ; 4529
LDC 39               ; 4530
CEQ                  ; 4531
TSEL    6817 4533    ; 4532
LD  0   1            ; 4533
LDC 40               ; 4534
CEQ                  ; 4535
TSEL    6827 4537    ; 4536
LD  0   1            ; 4537
LDC 41               ; 4538
CEQ                  ; 4539
TSEL    6837 4541    ; 4540
LD  0   1            ; 4541
LDC 42               ; 4542
CEQ                  ; 4543
TSEL    6847 4545    ; 4544
LD  0   1            ; 4545
LDC 43               ; 4546
CEQ                  ; 4547
TSEL    6857 4549    ; 4548
LD  0   1            ; 4549
LDC 44               ; 4550
CEQ                  ; 4551
TSEL    6867 4553    ; 4552
LD  0   1            ; 4553
LDC 45               ; 4554
CEQ                  ; 4555
TSEL    6877 4557    ; 4556
LD  0   1            ; 4557
LDC 46               ; 4558
CEQ                  ; 4559
TSEL    6887 4561    ; 4560
LD  0   1            ; 4561
LDC 47               ; 4562
CEQ                  ; 4563
TSEL    6897 4565    ; 4564
LD  0   1            ; 4565
LDC 48               ; 4566
CEQ                  ; 4567
TSEL    6907 4569    ; 4568
LD  0   1            ; 4569
LDC 49               ; 4570
CEQ                  ; 4571
TSEL    6917 4573    ; 4572
LD  0   1            ; 4573
LDC 50               ; 4574
CEQ                  ; 4575
TSEL    6927 4577    ; 4576
LD  0   1            ; 4577
LDC 51               ; 4578
CEQ                  ; 4579
TSEL    6937 4581    ; 4580
LD  0   1            ; 4581
LDC 52               ; 4582
CEQ                  ; 4583
TSEL    6947 4585    ; 4584
LD  0   1            ; 4585
LDC 53               ; 4586
CEQ                  ; 4587
TSEL    6957 4589    ; 4588
LD  0   1            ; 4589
LDC 54               ; 4590
CEQ                  ; 4591
TSEL    6967 4593    ; 4592
LD  0   1            ; 4593
LDC 55               ; 4594
CEQ                  ; 4595
TSEL    6977 4597    ; 4596
LD  0   1            ; 4597
LDC 56               ; 4598
CEQ                  ; 4599
TSEL    6987 4601    ; 4600
LD  0   1            ; 4601
LDC 57               ; 4602
CEQ                  ; 4603
TSEL    6997 4605    ; 4604
LD  0   1            ; 4605
LDC 58               ; 4606
CEQ                  ; 4607
TSEL    7007 4609    ; 4608
LD  0   1            ; 4609
LDC 59               ; 4610
CEQ                  ; 4611
TSEL    7017 4613    ; 4612
LD  0   1            ; 4613
LDC 60               ; 4614
CEQ                  ; 4615
TSEL    7027 4617    ; 4616
LD  0   1            ; 4617
LDC 61               ; 4618
CEQ                  ; 4619
TSEL    7037 4621    ; 4620
LD  0   1            ; 4621
LDC 62               ; 4622
CEQ                  ; 4623
TSEL    7047 4625    ; 4624
LD  0   1            ; 4625
LDC 63               ; 4626
CEQ                  ; 4627
TSEL    7057 4629    ; 4628
LD  0   1            ; 4629
LDC 64               ; 4630
CEQ                  ; 4631
TSEL    7067 4633    ; 4632
LD  0   1            ; 4633
LDC 65               ; 4634
CEQ                  ; 4635
TSEL    7077 4637    ; 4636
LD  0   1            ; 4637
LDC 66               ; 4638
CEQ                  ; 4639
TSEL    7087 4641    ; 4640
LD  0   1            ; 4641
LDC 67               ; 4642
CEQ                  ; 4643
TSEL    7097 4645    ; 4644
LD  0   1            ; 4645
LDC 68               ; 4646
CEQ                  ; 4647
TSEL    7107 4649    ; 4648
LD  0   1            ; 4649
LDC 69               ; 4650
CEQ                  ; 4651
TSEL    7117 4653    ; 4652
LD  0   1            ; 4653
LDC 70               ; 4654
CEQ                  ; 4655
TSEL    7127 4657    ; 4656
LD  0   1            ; 4657
LDC 71               ; 4658
CEQ                  ; 4659
TSEL    7137 4661    ; 4660
LD  0   1            ; 4661
LDC 72               ; 4662
CEQ                  ; 4663
TSEL    7147 4665    ; 4664
LD  0   1            ; 4665
LDC 73               ; 4666
CEQ                  ; 4667
TSEL    7157 4669    ; 4668
LD  0   1            ; 4669
LDC 74               ; 4670
CEQ                  ; 4671
TSEL    7167 4673    ; 4672
LD  0   1            ; 4673
LDC 75               ; 4674
CEQ                  ; 4675
TSEL    7177 4677    ; 4676
LD  0   1            ; 4677
LDC 76               ; 4678
CEQ                  ; 4679
TSEL    7187 4681    ; 4680
LD  0   1            ; 4681
LDC 77               ; 4682
CEQ                  ; 4683
TSEL    7197 4685    ; 4684
LD  0   1            ; 4685
LDC 78               ; 4686
CEQ                  ; 4687
TSEL    7207 4689    ; 4688
LD  0   1            ; 4689
LDC 79               ; 4690
CEQ                  ; 4691
TSEL    7217 4693    ; 4692
LD  0   1            ; 4693
LDC 80               ; 4694
CEQ                  ; 4695
TSEL    7227 4697    ; 4696
LD  0   1            ; 4697
LDC 81               ; 4698
CEQ                  ; 4699
TSEL    7237 4701    ; 4700
LD  0   1            ; 4701
LDC 82               ; 4702
CEQ                  ; 4703
TSEL    7247 4705    ; 4704
LD  0   1            ; 4705
LDC 83               ; 4706
CEQ                  ; 4707
TSEL    7257 4709    ; 4708
LD  0   1            ; 4709
LDC 84               ; 4710
CEQ                  ; 4711
TSEL    7267 4713    ; 4712
LD  0   1            ; 4713
LDC 85               ; 4714
CEQ                  ; 4715
TSEL    7277 4717    ; 4716
LD  0   1            ; 4717
LDC 86               ; 4718
CEQ                  ; 4719
TSEL    7287 4721    ; 4720
LD  0   1            ; 4721
LDC 87               ; 4722
CEQ                  ; 4723
TSEL    7297 4725    ; 4724
LD  0   1            ; 4725
LDC 88               ; 4726
CEQ                  ; 4727
TSEL    7307 4729    ; 4728
LD  0   1            ; 4729
LDC 89               ; 4730
CEQ                  ; 4731
TSEL    7317 4733    ; 4732
LD  0   1            ; 4733
LDC 90               ; 4734
CEQ                  ; 4735
TSEL    7327 4737    ; 4736
LD  0   1            ; 4737
LDC 91               ; 4738
CEQ                  ; 4739
TSEL    7337 4741    ; 4740
LD  0   1            ; 4741
LDC 92               ; 4742
CEQ                  ; 4743
TSEL    7347 4745    ; 4744
LD  0   1            ; 4745
LDC 93               ; 4746
CEQ                  ; 4747
TSEL    7357 4749    ; 4748
LD  0   1            ; 4749
LDC 94               ; 4750
CEQ                  ; 4751
TSEL    7367 4753    ; 4752
LD  0   1            ; 4753
LDC 95               ; 4754
CEQ                  ; 4755
TSEL    7377 4757    ; 4756
LD  0   1            ; 4757
LDC 96               ; 4758
CEQ                  ; 4759
TSEL    7387 4761    ; 4760
LD  0   1            ; 4761
LDC 97               ; 4762
CEQ                  ; 4763
TSEL    7397 4765    ; 4764
LD  0   1            ; 4765
LDC 98               ; 4766
CEQ                  ; 4767
TSEL    7407 4769    ; 4768
LD  0   1            ; 4769
LDC 99               ; 4770
CEQ                  ; 4771
TSEL    7417 4773    ; 4772
LD  0   1            ; 4773
LDC 100              ; 4774
CEQ                  ; 4775
TSEL    7427 4777    ; 4776
LD  0   1            ; 4777
LDC 101              ; 4778
CEQ                  ; 4779
TSEL    7437 4781    ; 4780
LD  0   1            ; 4781
LDC 102              ; 4782
CEQ                  ; 4783
TSEL    7447 4785    ; 4784
LD  0   1            ; 4785
LDC 103              ; 4786
CEQ                  ; 4787
TSEL    7457 4789    ; 4788
LD  0   1            ; 4789
LDC 104              ; 4790
CEQ                  ; 4791
TSEL    7467 4793    ; 4792
LD  0   1            ; 4793
LDC 105              ; 4794
CEQ                  ; 4795
TSEL    7477 4797    ; 4796
LD  0   1            ; 4797
LDC 106              ; 4798
CEQ                  ; 4799
TSEL    7487 4801    ; 4800
LD  0   1            ; 4801
LDC 107              ; 4802
CEQ                  ; 4803
TSEL    7497 4805    ; 4804
LD  0   1            ; 4805
LDC 108              ; 4806
CEQ                  ; 4807
TSEL    7507 4809    ; 4808
LD  0   1            ; 4809
LDC 109              ; 4810
CEQ                  ; 4811
TSEL    7517 4813    ; 4812
LD  0   1            ; 4813
LDC 110              ; 4814
CEQ                  ; 4815
TSEL    7527 4817    ; 4816
LD  0   1            ; 4817
LDC 111              ; 4818
CEQ                  ; 4819
TSEL    7537 4821    ; 4820
LD  0   1            ; 4821
LDC 112              ; 4822
CEQ                  ; 4823
TSEL    7547 4825    ; 4824
LD  0   1            ; 4825
LDC 113              ; 4826
CEQ                  ; 4827
TSEL    7557 4829    ; 4828
LD  0   1            ; 4829
LDC 114              ; 4830
CEQ                  ; 4831
TSEL    7567 4833    ; 4832
LD  0   1            ; 4833
LDC 115              ; 4834
CEQ                  ; 4835
TSEL    7577 4837    ; 4836
LD  0   1            ; 4837
LDC 116              ; 4838
CEQ                  ; 4839
TSEL    7587 4841    ; 4840
LD  0   1            ; 4841
LDC 117              ; 4842
CEQ                  ; 4843
TSEL    7597 4845    ; 4844
LD  0   1            ; 4845
LDC 118              ; 4846
CEQ                  ; 4847
TSEL    7607 4849    ; 4848
LD  0   1            ; 4849
LDC 119              ; 4850
CEQ                  ; 4851
TSEL    7617 4853    ; 4852
LD  0   1            ; 4853
LDC 120              ; 4854
CEQ                  ; 4855
TSEL    7627 4857    ; 4856
LD  0   1            ; 4857
LDC 121              ; 4858
CEQ                  ; 4859
TSEL    7637 4861    ; 4860
LD  0   1            ; 4861
LDC 122              ; 4862
CEQ                  ; 4863
TSEL    7647 4865    ; 4864
LD  0   1            ; 4865
LDC 123              ; 4866
CEQ                  ; 4867
TSEL    7657 4869    ; 4868
LD  0   1            ; 4869
LDC 124              ; 4870
CEQ                  ; 4871
TSEL    7667 4873    ; 4872
LD  0   1            ; 4873
LDC 125              ; 4874
CEQ                  ; 4875
TSEL    7677 4877    ; 4876
LD  0   1            ; 4877
LDC 126              ; 4878
CEQ                  ; 4879
TSEL    7687 4881    ; 4880
LD  0   1            ; 4881
LDC 127              ; 4882
CEQ                  ; 4883
TSEL    7697 4885    ; 4884
LD  0   1            ; 4885
LDC 128              ; 4886
CEQ                  ; 4887
TSEL    7707 4889    ; 4888
LD  0   1            ; 4889
LDC 129              ; 4890
CEQ                  ; 4891
TSEL    7717 4893    ; 4892
LD  0   1            ; 4893
LDC 130              ; 4894
CEQ                  ; 4895
TSEL    7727 4897    ; 4896
LD  0   1            ; 4897
LDC 131              ; 4898
CEQ                  ; 4899
TSEL    7737 4901    ; 4900
LD  0   1            ; 4901
LDC 132              ; 4902
CEQ                  ; 4903
TSEL    7747 4905    ; 4904
LD  0   1            ; 4905
LDC 133              ; 4906
CEQ                  ; 4907
TSEL    7757 4909    ; 4908
LD  0   1            ; 4909
LDC 134              ; 4910
CEQ                  ; 4911
TSEL    7767 4913    ; 4912
LD  0   1            ; 4913
LDC 135              ; 4914
CEQ                  ; 4915
TSEL    7777 4917    ; 4916
LD  0   1            ; 4917
LDC 136              ; 4918
CEQ                  ; 4919
TSEL    7787 4921    ; 4920
LD  0   1            ; 4921
LDC 137              ; 4922
CEQ                  ; 4923
TSEL    7797 4925    ; 4924
LD  0   1            ; 4925
LDC 138              ; 4926
CEQ                  ; 4927
TSEL    7807 4929    ; 4928
LD  0   1            ; 4929
LDC 139              ; 4930
CEQ                  ; 4931
TSEL    7817 4933    ; 4932
LD  0   1            ; 4933
LDC 140              ; 4934
CEQ                  ; 4935
TSEL    7827 4937    ; 4936
LD  0   1            ; 4937
LDC 141              ; 4938
CEQ                  ; 4939
TSEL    7837 4941    ; 4940
LD  0   1            ; 4941
LDC 142              ; 4942
CEQ                  ; 4943
TSEL    7847 4945    ; 4944
LD  0   1            ; 4945
LDC 143              ; 4946
CEQ                  ; 4947
TSEL    7857 4949    ; 4948
LD  0   1            ; 4949
LDC 144              ; 4950
CEQ                  ; 4951
TSEL    7867 4953    ; 4952
LD  0   1            ; 4953
LDC 145              ; 4954
CEQ                  ; 4955
TSEL    7877 4957    ; 4956
LD  0   1            ; 4957
LDC 146              ; 4958
CEQ                  ; 4959
TSEL    7887 4961    ; 4960
LD  0   1            ; 4961
LDC 147              ; 4962
CEQ                  ; 4963
TSEL    7897 4965    ; 4964
LD  0   1            ; 4965
LDC 148              ; 4966
CEQ                  ; 4967
TSEL    7907 4969    ; 4968
LD  0   1            ; 4969
LDC 149              ; 4970
CEQ                  ; 4971
TSEL    7917 4973    ; 4972
LD  0   1            ; 4973
LDC 150              ; 4974
CEQ                  ; 4975
TSEL    7927 4977    ; 4976
LD  0   1            ; 4977
LDC 151              ; 4978
CEQ                  ; 4979
TSEL    7937 4981    ; 4980
LD  0   1            ; 4981
LDC 152              ; 4982
CEQ                  ; 4983
TSEL    7947 4985    ; 4984
LD  0   1            ; 4985
LDC 153              ; 4986
CEQ                  ; 4987
TSEL    7957 4989    ; 4988
LD  0   1            ; 4989
LDC 154              ; 4990
CEQ                  ; 4991
TSEL    7967 4993    ; 4992
LD  0   1            ; 4993
LDC 155              ; 4994
CEQ                  ; 4995
TSEL    7977 4997    ; 4996
LD  0   1            ; 4997
LDC 156              ; 4998
CEQ                  ; 4999
TSEL    7987 5001    ; 5000
LD  0   1            ; 5001
LDC 157              ; 5002
CEQ                  ; 5003
TSEL    7997 5005    ; 5004
LD  0   1            ; 5005
LDC 158              ; 5006
CEQ                  ; 5007
TSEL    8007 5009    ; 5008
LD  0   1            ; 5009
LDC 159              ; 5010
CEQ                  ; 5011
TSEL    8017 5013    ; 5012
LD  0   1            ; 5013
LDC 160              ; 5014
CEQ                  ; 5015
TSEL    8027 5017    ; 5016
LD  0   1            ; 5017
LDC 161              ; 5018
CEQ                  ; 5019
TSEL    8037 5021    ; 5020
LD  0   1            ; 5021
LDC 162              ; 5022
CEQ                  ; 5023
TSEL    8047 5025    ; 5024
LD  0   1            ; 5025
LDC 163              ; 5026
CEQ                  ; 5027
TSEL    8057 5029    ; 5028
LD  0   1            ; 5029
LDC 164              ; 5030
CEQ                  ; 5031
TSEL    8067 5033    ; 5032
LD  0   1            ; 5033
LDC 165              ; 5034
CEQ                  ; 5035
TSEL    8077 5037    ; 5036
LD  0   1            ; 5037
LDC 166              ; 5038
CEQ                  ; 5039
TSEL    8087 5041    ; 5040
LD  0   1            ; 5041
LDC 167              ; 5042
CEQ                  ; 5043
TSEL    8097 5045    ; 5044
LD  0   1            ; 5045
LDC 168              ; 5046
CEQ                  ; 5047
TSEL    8107 5049    ; 5048
LD  0   1            ; 5049
LDC 169              ; 5050
CEQ                  ; 5051
TSEL    8117 5053    ; 5052
LD  0   1            ; 5053
LDC 170              ; 5054
CEQ                  ; 5055
TSEL    8127 5057    ; 5056
LD  0   1            ; 5057
LDC 171              ; 5058
CEQ                  ; 5059
TSEL    8137 5061    ; 5060
LD  0   1            ; 5061
LDC 172              ; 5062
CEQ                  ; 5063
TSEL    8147 5065    ; 5064
LD  0   1            ; 5065
LDC 173              ; 5066
CEQ                  ; 5067
TSEL    8157 5069    ; 5068
LD  0   1            ; 5069
LDC 174              ; 5070
CEQ                  ; 5071
TSEL    8167 5073    ; 5072
LD  0   1            ; 5073
LDC 175              ; 5074
CEQ                  ; 5075
TSEL    8177 5077    ; 5076
LD  0   1            ; 5077
LDC 176              ; 5078
CEQ                  ; 5079
TSEL    8187 5081    ; 5080
LD  0   1            ; 5081
LDC 177              ; 5082
CEQ                  ; 5083
TSEL    8197 5085    ; 5084
LD  0   1            ; 5085
LDC 178              ; 5086
CEQ                  ; 5087
TSEL    8207 5089    ; 5088
LD  0   1            ; 5089
LDC 179              ; 5090
CEQ                  ; 5091
TSEL    8217 5093    ; 5092
LD  0   1            ; 5093
LDC 180              ; 5094
CEQ                  ; 5095
TSEL    8227 5097    ; 5096
LD  0   1            ; 5097
LDC 181              ; 5098
CEQ                  ; 5099
TSEL    8237 5101    ; 5100
LD  0   1            ; 5101
LDC 182              ; 5102
CEQ                  ; 5103
TSEL    8247 5105    ; 5104
LD  0   1            ; 5105
LDC 183              ; 5106
CEQ                  ; 5107
TSEL    8257 5109    ; 5108
LD  0   1            ; 5109
LDC 184              ; 5110
CEQ                  ; 5111
TSEL    8267 5113    ; 5112
LD  0   1            ; 5113
LDC 185              ; 5114
CEQ                  ; 5115
TSEL    8277 5117    ; 5116
LD  0   1            ; 5117
LDC 186              ; 5118
CEQ                  ; 5119
TSEL    8287 5121    ; 5120
LD  0   1            ; 5121
LDC 187              ; 5122
CEQ                  ; 5123
TSEL    8297 5125    ; 5124
LD  0   1            ; 5125
LDC 188              ; 5126
CEQ                  ; 5127
TSEL    8307 5129    ; 5128
LD  0   1            ; 5129
LDC 189              ; 5130
CEQ                  ; 5131
TSEL    8317 5133    ; 5132
LD  0   1            ; 5133
LDC 190              ; 5134
CEQ                  ; 5135
TSEL    8327 5137    ; 5136
LD  0   1            ; 5137
LDC 191              ; 5138
CEQ                  ; 5139
TSEL    8337 5141    ; 5140
LD  0   1            ; 5141
LDC 192              ; 5142
CEQ                  ; 5143
TSEL    8347 5145    ; 5144
LD  0   1            ; 5145
LDC 193              ; 5146
CEQ                  ; 5147
TSEL    8357 5149    ; 5148
LD  0   1            ; 5149
LDC 194              ; 5150
CEQ                  ; 5151
TSEL    8367 5153    ; 5152
LD  0   1            ; 5153
LDC 195              ; 5154
CEQ                  ; 5155
TSEL    8377 5157    ; 5156
LD  0   1            ; 5157
LDC 196              ; 5158
CEQ                  ; 5159
TSEL    8387 5161    ; 5160
LD  0   1            ; 5161
LDC 197              ; 5162
CEQ                  ; 5163
TSEL    8397 5165    ; 5164
LD  0   1            ; 5165
LDC 198              ; 5166
CEQ                  ; 5167
TSEL    8407 5169    ; 5168
LD  0   1            ; 5169
LDC 199              ; 5170
CEQ                  ; 5171
TSEL    8417 5173    ; 5172
LD  0   1            ; 5173
LDC 200              ; 5174
CEQ                  ; 5175
TSEL    8427 5177    ; 5176
LD  0   1            ; 5177
LDC 201              ; 5178
CEQ                  ; 5179
TSEL    8437 5181    ; 5180
LD  0   1            ; 5181
LDC 202              ; 5182
CEQ                  ; 5183
TSEL    8447 5185    ; 5184
LD  0   1            ; 5185
LDC 203              ; 5186
CEQ                  ; 5187
TSEL    8457 5189    ; 5188
LD  0   1            ; 5189
LDC 204              ; 5190
CEQ                  ; 5191
TSEL    8467 5193    ; 5192
LD  0   1            ; 5193
LDC 205              ; 5194
CEQ                  ; 5195
TSEL    8477 5197    ; 5196
LD  0   1            ; 5197
LDC 206              ; 5198
CEQ                  ; 5199
TSEL    8487 5201    ; 5200
LD  0   1            ; 5201
LDC 207              ; 5202
CEQ                  ; 5203
TSEL    8497 5205    ; 5204
LD  0   1            ; 5205
LDC 208              ; 5206
CEQ                  ; 5207
TSEL    8507 5209    ; 5208
LD  0   1            ; 5209
LDC 209              ; 5210
CEQ                  ; 5211
TSEL    8517 5213    ; 5212
LD  0   1            ; 5213
LDC 210              ; 5214
CEQ                  ; 5215
TSEL    8527 5217    ; 5216
LD  0   1            ; 5217
LDC 211              ; 5218
CEQ                  ; 5219
TSEL    8537 5221    ; 5220
LD  0   1            ; 5221
LDC 212              ; 5222
CEQ                  ; 5223
TSEL    8547 5225    ; 5224
LD  0   1            ; 5225
LDC 213              ; 5226
CEQ                  ; 5227
TSEL    8557 5229    ; 5228
LD  0   1            ; 5229
LDC 214              ; 5230
CEQ                  ; 5231
TSEL    8567 5233    ; 5232
LD  0   1            ; 5233
LDC 215              ; 5234
CEQ                  ; 5235
TSEL    8577 5237    ; 5236
LD  0   1            ; 5237
LDC 216              ; 5238
CEQ                  ; 5239
TSEL    8587 5241    ; 5240
LD  0   1            ; 5241
LDC 217              ; 5242
CEQ                  ; 5243
TSEL    8597 5245    ; 5244
LD  0   1            ; 5245
LDC 218              ; 5246
CEQ                  ; 5247
TSEL    8607 5249    ; 5248
LD  0   1            ; 5249
LDC 219              ; 5250
CEQ                  ; 5251
TSEL    8617 5253    ; 5252
LD  0   1            ; 5253
LDC 220              ; 5254
CEQ                  ; 5255
TSEL    8627 5257    ; 5256
LD  0   1            ; 5257
LDC 221              ; 5258
CEQ                  ; 5259
TSEL    8637 5261    ; 5260
LD  0   1            ; 5261
LDC 222              ; 5262
CEQ                  ; 5263
TSEL    8647 5265    ; 5264
LD  0   1            ; 5265
LDC 223              ; 5266
CEQ                  ; 5267
TSEL    8657 5269    ; 5268
LD  0   1            ; 5269
LDC 224              ; 5270
CEQ                  ; 5271
TSEL    8667 5273    ; 5272
LD  0   1            ; 5273
LDC 225              ; 5274
CEQ                  ; 5275
TSEL    8677 5277    ; 5276
LD  0   1            ; 5277
LDC 226              ; 5278
CEQ                  ; 5279
TSEL    8687 5281    ; 5280
LD  0   1            ; 5281
LDC 227              ; 5282
CEQ                  ; 5283
TSEL    8697 5285    ; 5284
LD  0   1            ; 5285
LDC 228              ; 5286
CEQ                  ; 5287
TSEL    8707 5289    ; 5288
LD  0   1            ; 5289
LDC 229              ; 5290
CEQ                  ; 5291
TSEL    8717 5293    ; 5292
LD  0   1            ; 5293
LDC 230              ; 5294
CEQ                  ; 5295
TSEL    8727 5297    ; 5296
LD  0   1            ; 5297
LDC 231              ; 5298
CEQ                  ; 5299
TSEL    8737 5301    ; 5300
LD  0   1            ; 5301
LDC 232              ; 5302
CEQ                  ; 5303
TSEL    8747 5305    ; 5304
LD  0   1            ; 5305
LDC 233              ; 5306
CEQ                  ; 5307
TSEL    8757 5309    ; 5308
LD  0   1            ; 5309
LDC 234              ; 5310
CEQ                  ; 5311
TSEL    8767 5313    ; 5312
LD  0   1            ; 5313
LDC 235              ; 5314
CEQ                  ; 5315
TSEL    8777 5317    ; 5316
LD  0   1            ; 5317
LDC 236              ; 5318
CEQ                  ; 5319
TSEL    8787 5321    ; 5320
LD  0   1            ; 5321
LDC 237              ; 5322
CEQ                  ; 5323
TSEL    8797 5325    ; 5324
LD  0   1            ; 5325
LDC 238              ; 5326
CEQ                  ; 5327
TSEL    8807 5329    ; 5328
LD  0   1            ; 5329
LDC 239              ; 5330
CEQ                  ; 5331
TSEL    8817 5333    ; 5332
LD  0   1            ; 5333
LDC 240              ; 5334
CEQ                  ; 5335
TSEL    8827 5337    ; 5336
LD  0   1            ; 5337
LDC 241              ; 5338
CEQ                  ; 5339
TSEL    8837 5341    ; 5340
LD  0   1            ; 5341
LDC 242              ; 5342
CEQ                  ; 5343
TSEL    8847 5345    ; 5344
LD  0   1            ; 5345
LDC 243              ; 5346
CEQ                  ; 5347
TSEL    8857 5349    ; 5348
LD  0   1            ; 5349
LDC 244              ; 5350
CEQ                  ; 5351
TSEL    8867 5353    ; 5352
LD  0   1            ; 5353
LDC 245              ; 5354
CEQ                  ; 5355
TSEL    8877 5357    ; 5356
LD  0   1            ; 5357
LDC 246              ; 5358
CEQ                  ; 5359
TSEL    8887 5361    ; 5360
LD  0   1            ; 5361
LDC 247              ; 5362
CEQ                  ; 5363
TSEL    8897 5365    ; 5364
LD  0   1            ; 5365
LDC 248              ; 5366
CEQ                  ; 5367
TSEL    8907 5369    ; 5368
LD  0   1            ; 5369
LDC 249              ; 5370
CEQ                  ; 5371
TSEL    8917 5373    ; 5372
LD  0   1            ; 5373
LDC 250              ; 5374
CEQ                  ; 5375
TSEL    8927 5377    ; 5376
LD  0   1            ; 5377
LDC 251              ; 5378
CEQ                  ; 5379
TSEL    8937 5381    ; 5380
LD  0   1            ; 5381
LDC 252              ; 5382
CEQ                  ; 5383
TSEL    8947 5385    ; 5384
LD  0   1            ; 5385
LDC 253              ; 5386
CEQ                  ; 5387
TSEL    8957 5389    ; 5388
LD  0   1            ; 5389
LDC 254              ; 5390
CEQ                  ; 5391
TSEL    8967 5393    ; 5392
LD  0   1            ; 5393
LDC 255              ; 5394
CEQ                  ; 5395
TSEL    8977 5397    ; 5396
LDC  0               ; 5397
RTN                  ; 5398
LD  0   1            ; 5399
LDC 0                ; 5400
CEQ                  ; 5401
TSEL    6433 5403    ; 5402
LD  0   1            ; 5403
LDC 1                ; 5404
CEQ                  ; 5405
TSEL    6443 5407    ; 5406
LD  0   1            ; 5407
LDC 2                ; 5408
CEQ                  ; 5409
TSEL    6453 5411    ; 5410
LD  0   1            ; 5411
LDC 3                ; 5412
CEQ                  ; 5413
TSEL    6463 5415    ; 5414
LD  0   1            ; 5415
LDC 4                ; 5416
CEQ                  ; 5417
TSEL    6473 5419    ; 5418
LD  0   1            ; 5419
LDC 5                ; 5420
CEQ                  ; 5421
TSEL    6483 5423    ; 5422
LD  0   1            ; 5423
LDC 6                ; 5424
CEQ                  ; 5425
TSEL    6493 5427    ; 5426
LD  0   1            ; 5427
LDC 7                ; 5428
CEQ                  ; 5429
TSEL    6503 5431    ; 5430
LD  0   1            ; 5431
LDC 8                ; 5432
CEQ                  ; 5433
TSEL    6513 5435    ; 5434
LD  0   1            ; 5435
LDC 9                ; 5436
CEQ                  ; 5437
TSEL    6523 5439    ; 5438
LD  0   1            ; 5439
LDC 10               ; 5440
CEQ                  ; 5441
TSEL    6533 5443    ; 5442
LD  0   1            ; 5443
LDC 11               ; 5444
CEQ                  ; 5445
TSEL    6543 5447    ; 5446
LD  0   1            ; 5447
LDC 12               ; 5448
CEQ                  ; 5449
TSEL    6553 5451    ; 5450
LD  0   1            ; 5451
LDC 13               ; 5452
CEQ                  ; 5453
TSEL    6563 5455    ; 5454
LD  0   1            ; 5455
LDC 14               ; 5456
CEQ                  ; 5457
TSEL    6573 5459    ; 5458
LD  0   1            ; 5459
LDC 15               ; 5460
CEQ                  ; 5461
TSEL    6583 5463    ; 5462
LD  0   1            ; 5463
LDC 16               ; 5464
CEQ                  ; 5465
TSEL    6593 5467    ; 5466
LD  0   1            ; 5467
LDC 17               ; 5468
CEQ                  ; 5469
TSEL    6603 5471    ; 5470
LD  0   1            ; 5471
LDC 18               ; 5472
CEQ                  ; 5473
TSEL    6613 5475    ; 5474
LD  0   1            ; 5475
LDC 19               ; 5476
CEQ                  ; 5477
TSEL    6623 5479    ; 5478
LD  0   1            ; 5479
LDC 20               ; 5480
CEQ                  ; 5481
TSEL    6633 5483    ; 5482
LD  0   1            ; 5483
LDC 21               ; 5484
CEQ                  ; 5485
TSEL    6643 5487    ; 5486
LD  0   1            ; 5487
LDC 22               ; 5488
CEQ                  ; 5489
TSEL    6653 5491    ; 5490
LD  0   1            ; 5491
LDC 23               ; 5492
CEQ                  ; 5493
TSEL    6663 5495    ; 5494
LD  0   1            ; 5495
LDC 24               ; 5496
CEQ                  ; 5497
TSEL    6673 5499    ; 5498
LD  0   1            ; 5499
LDC 25               ; 5500
CEQ                  ; 5501
TSEL    6683 5503    ; 5502
LD  0   1            ; 5503
LDC 26               ; 5504
CEQ                  ; 5505
TSEL    6693 5507    ; 5506
LD  0   1            ; 5507
LDC 27               ; 5508
CEQ                  ; 5509
TSEL    6703 5511    ; 5510
LD  0   1            ; 5511
LDC 28               ; 5512
CEQ                  ; 5513
TSEL    6713 5515    ; 5514
LD  0   1            ; 5515
LDC 29               ; 5516
CEQ                  ; 5517
TSEL    6723 5519    ; 5518
LD  0   1            ; 5519
LDC 30               ; 5520
CEQ                  ; 5521
TSEL    6733 5523    ; 5522
LD  0   1            ; 5523
LDC 31               ; 5524
CEQ                  ; 5525
TSEL    6743 5527    ; 5526
LD  0   1            ; 5527
LDC 32               ; 5528
CEQ                  ; 5529
TSEL    6753 5531    ; 5530
LD  0   1            ; 5531
LDC 33               ; 5532
CEQ                  ; 5533
TSEL    6763 5535    ; 5534
LD  0   1            ; 5535
LDC 34               ; 5536
CEQ                  ; 5537
TSEL    6773 5539    ; 5538
LD  0   1            ; 5539
LDC 35               ; 5540
CEQ                  ; 5541
TSEL    6783 5543    ; 5542
LD  0   1            ; 5543
LDC 36               ; 5544
CEQ                  ; 5545
TSEL    6793 5547    ; 5546
LD  0   1            ; 5547
LDC 37               ; 5548
CEQ                  ; 5549
TSEL    6803 5551    ; 5550
LD  0   1            ; 5551
LDC 38               ; 5552
CEQ                  ; 5553
TSEL    6813 5555    ; 5554
LD  0   1            ; 5555
LDC 39               ; 5556
CEQ                  ; 5557
TSEL    6823 5559    ; 5558
LD  0   1            ; 5559
LDC 40               ; 5560
CEQ                  ; 5561
TSEL    6833 5563    ; 5562
LD  0   1            ; 5563
LDC 41               ; 5564
CEQ                  ; 5565
TSEL    6843 5567    ; 5566
LD  0   1            ; 5567
LDC 42               ; 5568
CEQ                  ; 5569
TSEL    6853 5571    ; 5570
LD  0   1            ; 5571
LDC 43               ; 5572
CEQ                  ; 5573
TSEL    6863 5575    ; 5574
LD  0   1            ; 5575
LDC 44               ; 5576
CEQ                  ; 5577
TSEL    6873 5579    ; 5578
LD  0   1            ; 5579
LDC 45               ; 5580
CEQ                  ; 5581
TSEL    6883 5583    ; 5582
LD  0   1            ; 5583
LDC 46               ; 5584
CEQ                  ; 5585
TSEL    6893 5587    ; 5586
LD  0   1            ; 5587
LDC 47               ; 5588
CEQ                  ; 5589
TSEL    6903 5591    ; 5590
LD  0   1            ; 5591
LDC 48               ; 5592
CEQ                  ; 5593
TSEL    6913 5595    ; 5594
LD  0   1            ; 5595
LDC 49               ; 5596
CEQ                  ; 5597
TSEL    6923 5599    ; 5598
LD  0   1            ; 5599
LDC 50               ; 5600
CEQ                  ; 5601
TSEL    6933 5603    ; 5602
LD  0   1            ; 5603
LDC 51               ; 5604
CEQ                  ; 5605
TSEL    6943 5607    ; 5606
LD  0   1            ; 5607
LDC 52               ; 5608
CEQ                  ; 5609
TSEL    6953 5611    ; 5610
LD  0   1            ; 5611
LDC 53               ; 5612
CEQ                  ; 5613
TSEL    6963 5615    ; 5614
LD  0   1            ; 5615
LDC 54               ; 5616
CEQ                  ; 5617
TSEL    6973 5619    ; 5618
LD  0   1            ; 5619
LDC 55               ; 5620
CEQ                  ; 5621
TSEL    6983 5623    ; 5622
LD  0   1            ; 5623
LDC 56               ; 5624
CEQ                  ; 5625
TSEL    6993 5627    ; 5626
LD  0   1            ; 5627
LDC 57               ; 5628
CEQ                  ; 5629
TSEL    7003 5631    ; 5630
LD  0   1            ; 5631
LDC 58               ; 5632
CEQ                  ; 5633
TSEL    7013 5635    ; 5634
LD  0   1            ; 5635
LDC 59               ; 5636
CEQ                  ; 5637
TSEL    7023 5639    ; 5638
LD  0   1            ; 5639
LDC 60               ; 5640
CEQ                  ; 5641
TSEL    7033 5643    ; 5642
LD  0   1            ; 5643
LDC 61               ; 5644
CEQ                  ; 5645
TSEL    7043 5647    ; 5646
LD  0   1            ; 5647
LDC 62               ; 5648
CEQ                  ; 5649
TSEL    7053 5651    ; 5650
LD  0   1            ; 5651
LDC 63               ; 5652
CEQ                  ; 5653
TSEL    7063 5655    ; 5654
LD  0   1            ; 5655
LDC 64               ; 5656
CEQ                  ; 5657
TSEL    7073 5659    ; 5658
LD  0   1            ; 5659
LDC 65               ; 5660
CEQ                  ; 5661
TSEL    7083 5663    ; 5662
LD  0   1            ; 5663
LDC 66               ; 5664
CEQ                  ; 5665
TSEL    7093 5667    ; 5666
LD  0   1            ; 5667
LDC 67               ; 5668
CEQ                  ; 5669
TSEL    7103 5671    ; 5670
LD  0   1            ; 5671
LDC 68               ; 5672
CEQ                  ; 5673
TSEL    7113 5675    ; 5674
LD  0   1            ; 5675
LDC 69               ; 5676
CEQ                  ; 5677
TSEL    7123 5679    ; 5678
LD  0   1            ; 5679
LDC 70               ; 5680
CEQ                  ; 5681
TSEL    7133 5683    ; 5682
LD  0   1            ; 5683
LDC 71               ; 5684
CEQ                  ; 5685
TSEL    7143 5687    ; 5686
LD  0   1            ; 5687
LDC 72               ; 5688
CEQ                  ; 5689
TSEL    7153 5691    ; 5690
LD  0   1            ; 5691
LDC 73               ; 5692
CEQ                  ; 5693
TSEL    7163 5695    ; 5694
LD  0   1            ; 5695
LDC 74               ; 5696
CEQ                  ; 5697
TSEL    7173 5699    ; 5698
LD  0   1            ; 5699
LDC 75               ; 5700
CEQ                  ; 5701
TSEL    7183 5703    ; 5702
LD  0   1            ; 5703
LDC 76               ; 5704
CEQ                  ; 5705
TSEL    7193 5707    ; 5706
LD  0   1            ; 5707
LDC 77               ; 5708
CEQ                  ; 5709
TSEL    7203 5711    ; 5710
LD  0   1            ; 5711
LDC 78               ; 5712
CEQ                  ; 5713
TSEL    7213 5715    ; 5714
LD  0   1            ; 5715
LDC 79               ; 5716
CEQ                  ; 5717
TSEL    7223 5719    ; 5718
LD  0   1            ; 5719
LDC 80               ; 5720
CEQ                  ; 5721
TSEL    7233 5723    ; 5722
LD  0   1            ; 5723
LDC 81               ; 5724
CEQ                  ; 5725
TSEL    7243 5727    ; 5726
LD  0   1            ; 5727
LDC 82               ; 5728
CEQ                  ; 5729
TSEL    7253 5731    ; 5730
LD  0   1            ; 5731
LDC 83               ; 5732
CEQ                  ; 5733
TSEL    7263 5735    ; 5734
LD  0   1            ; 5735
LDC 84               ; 5736
CEQ                  ; 5737
TSEL    7273 5739    ; 5738
LD  0   1            ; 5739
LDC 85               ; 5740
CEQ                  ; 5741
TSEL    7283 5743    ; 5742
LD  0   1            ; 5743
LDC 86               ; 5744
CEQ                  ; 5745
TSEL    7293 5747    ; 5746
LD  0   1            ; 5747
LDC 87               ; 5748
CEQ                  ; 5749
TSEL    7303 5751    ; 5750
LD  0   1            ; 5751
LDC 88               ; 5752
CEQ                  ; 5753
TSEL    7313 5755    ; 5754
LD  0   1            ; 5755
LDC 89               ; 5756
CEQ                  ; 5757
TSEL    7323 5759    ; 5758
LD  0   1            ; 5759
LDC 90               ; 5760
CEQ                  ; 5761
TSEL    7333 5763    ; 5762
LD  0   1            ; 5763
LDC 91               ; 5764
CEQ                  ; 5765
TSEL    7343 5767    ; 5766
LD  0   1            ; 5767
LDC 92               ; 5768
CEQ                  ; 5769
TSEL    7353 5771    ; 5770
LD  0   1            ; 5771
LDC 93               ; 5772
CEQ                  ; 5773
TSEL    7363 5775    ; 5774
LD  0   1            ; 5775
LDC 94               ; 5776
CEQ                  ; 5777
TSEL    7373 5779    ; 5778
LD  0   1            ; 5779
LDC 95               ; 5780
CEQ                  ; 5781
TSEL    7383 5783    ; 5782
LD  0   1            ; 5783
LDC 96               ; 5784
CEQ                  ; 5785
TSEL    7393 5787    ; 5786
LD  0   1            ; 5787
LDC 97               ; 5788
CEQ                  ; 5789
TSEL    7403 5791    ; 5790
LD  0   1            ; 5791
LDC 98               ; 5792
CEQ                  ; 5793
TSEL    7413 5795    ; 5794
LD  0   1            ; 5795
LDC 99               ; 5796
CEQ                  ; 5797
TSEL    7423 5799    ; 5798
LD  0   1            ; 5799
LDC 100              ; 5800
CEQ                  ; 5801
TSEL    7433 5803    ; 5802
LD  0   1            ; 5803
LDC 101              ; 5804
CEQ                  ; 5805
TSEL    7443 5807    ; 5806
LD  0   1            ; 5807
LDC 102              ; 5808
CEQ                  ; 5809
TSEL    7453 5811    ; 5810
LD  0   1            ; 5811
LDC 103              ; 5812
CEQ                  ; 5813
TSEL    7463 5815    ; 5814
LD  0   1            ; 5815
LDC 104              ; 5816
CEQ                  ; 5817
TSEL    7473 5819    ; 5818
LD  0   1            ; 5819
LDC 105              ; 5820
CEQ                  ; 5821
TSEL    7483 5823    ; 5822
LD  0   1            ; 5823
LDC 106              ; 5824
CEQ                  ; 5825
TSEL    7493 5827    ; 5826
LD  0   1            ; 5827
LDC 107              ; 5828
CEQ                  ; 5829
TSEL    7503 5831    ; 5830
LD  0   1            ; 5831
LDC 108              ; 5832
CEQ                  ; 5833
TSEL    7513 5835    ; 5834
LD  0   1            ; 5835
LDC 109              ; 5836
CEQ                  ; 5837
TSEL    7523 5839    ; 5838
LD  0   1            ; 5839
LDC 110              ; 5840
CEQ                  ; 5841
TSEL    7533 5843    ; 5842
LD  0   1            ; 5843
LDC 111              ; 5844
CEQ                  ; 5845
TSEL    7543 5847    ; 5846
LD  0   1            ; 5847
LDC 112              ; 5848
CEQ                  ; 5849
TSEL    7553 5851    ; 5850
LD  0   1            ; 5851
LDC 113              ; 5852
CEQ                  ; 5853
TSEL    7563 5855    ; 5854
LD  0   1            ; 5855
LDC 114              ; 5856
CEQ                  ; 5857
TSEL    7573 5859    ; 5858
LD  0   1            ; 5859
LDC 115              ; 5860
CEQ                  ; 5861
TSEL    7583 5863    ; 5862
LD  0   1            ; 5863
LDC 116              ; 5864
CEQ                  ; 5865
TSEL    7593 5867    ; 5866
LD  0   1            ; 5867
LDC 117              ; 5868
CEQ                  ; 5869
TSEL    7603 5871    ; 5870
LD  0   1            ; 5871
LDC 118              ; 5872
CEQ                  ; 5873
TSEL    7613 5875    ; 5874
LD  0   1            ; 5875
LDC 119              ; 5876
CEQ                  ; 5877
TSEL    7623 5879    ; 5878
LD  0   1            ; 5879
LDC 120              ; 5880
CEQ                  ; 5881
TSEL    7633 5883    ; 5882
LD  0   1            ; 5883
LDC 121              ; 5884
CEQ                  ; 5885
TSEL    7643 5887    ; 5886
LD  0   1            ; 5887
LDC 122              ; 5888
CEQ                  ; 5889
TSEL    7653 5891    ; 5890
LD  0   1            ; 5891
LDC 123              ; 5892
CEQ                  ; 5893
TSEL    7663 5895    ; 5894
LD  0   1            ; 5895
LDC 124              ; 5896
CEQ                  ; 5897
TSEL    7673 5899    ; 5898
LD  0   1            ; 5899
LDC 125              ; 5900
CEQ                  ; 5901
TSEL    7683 5903    ; 5902
LD  0   1            ; 5903
LDC 126              ; 5904
CEQ                  ; 5905
TSEL    7693 5907    ; 5906
LD  0   1            ; 5907
LDC 127              ; 5908
CEQ                  ; 5909
TSEL    7703 5911    ; 5910
LD  0   1            ; 5911
LDC 128              ; 5912
CEQ                  ; 5913
TSEL    7713 5915    ; 5914
LD  0   1            ; 5915
LDC 129              ; 5916
CEQ                  ; 5917
TSEL    7723 5919    ; 5918
LD  0   1            ; 5919
LDC 130              ; 5920
CEQ                  ; 5921
TSEL    7733 5923    ; 5922
LD  0   1            ; 5923
LDC 131              ; 5924
CEQ                  ; 5925
TSEL    7743 5927    ; 5926
LD  0   1            ; 5927
LDC 132              ; 5928
CEQ                  ; 5929
TSEL    7753 5931    ; 5930
LD  0   1            ; 5931
LDC 133              ; 5932
CEQ                  ; 5933
TSEL    7763 5935    ; 5934
LD  0   1            ; 5935
LDC 134              ; 5936
CEQ                  ; 5937
TSEL    7773 5939    ; 5938
LD  0   1            ; 5939
LDC 135              ; 5940
CEQ                  ; 5941
TSEL    7783 5943    ; 5942
LD  0   1            ; 5943
LDC 136              ; 5944
CEQ                  ; 5945
TSEL    7793 5947    ; 5946
LD  0   1            ; 5947
LDC 137              ; 5948
CEQ                  ; 5949
TSEL    7803 5951    ; 5950
LD  0   1            ; 5951
LDC 138              ; 5952
CEQ                  ; 5953
TSEL    7813 5955    ; 5954
LD  0   1            ; 5955
LDC 139              ; 5956
CEQ                  ; 5957
TSEL    7823 5959    ; 5958
LD  0   1            ; 5959
LDC 140              ; 5960
CEQ                  ; 5961
TSEL    7833 5963    ; 5962
LD  0   1            ; 5963
LDC 141              ; 5964
CEQ                  ; 5965
TSEL    7843 5967    ; 5966
LD  0   1            ; 5967
LDC 142              ; 5968
CEQ                  ; 5969
TSEL    7853 5971    ; 5970
LD  0   1            ; 5971
LDC 143              ; 5972
CEQ                  ; 5973
TSEL    7863 5975    ; 5974
LD  0   1            ; 5975
LDC 144              ; 5976
CEQ                  ; 5977
TSEL    7873 5979    ; 5978
LD  0   1            ; 5979
LDC 145              ; 5980
CEQ                  ; 5981
TSEL    7883 5983    ; 5982
LD  0   1            ; 5983
LDC 146              ; 5984
CEQ                  ; 5985
TSEL    7893 5987    ; 5986
LD  0   1            ; 5987
LDC 147              ; 5988
CEQ                  ; 5989
TSEL    7903 5991    ; 5990
LD  0   1            ; 5991
LDC 148              ; 5992
CEQ                  ; 5993
TSEL    7913 5995    ; 5994
LD  0   1            ; 5995
LDC 149              ; 5996
CEQ                  ; 5997
TSEL    7923 5999    ; 5998
LD  0   1            ; 5999
LDC 150              ; 6000
CEQ                  ; 6001
TSEL    7933 6003    ; 6002
LD  0   1            ; 6003
LDC 151              ; 6004
CEQ                  ; 6005
TSEL    7943 6007    ; 6006
LD  0   1            ; 6007
LDC 152              ; 6008
CEQ                  ; 6009
TSEL    7953 6011    ; 6010
LD  0   1            ; 6011
LDC 153              ; 6012
CEQ                  ; 6013
TSEL    7963 6015    ; 6014
LD  0   1            ; 6015
LDC 154              ; 6016
CEQ                  ; 6017
TSEL    7973 6019    ; 6018
LD  0   1            ; 6019
LDC 155              ; 6020
CEQ                  ; 6021
TSEL    7983 6023    ; 6022
LD  0   1            ; 6023
LDC 156              ; 6024
CEQ                  ; 6025
TSEL    7993 6027    ; 6026
LD  0   1            ; 6027
LDC 157              ; 6028
CEQ                  ; 6029
TSEL    8003 6031    ; 6030
LD  0   1            ; 6031
LDC 158              ; 6032
CEQ                  ; 6033
TSEL    8013 6035    ; 6034
LD  0   1            ; 6035
LDC 159              ; 6036
CEQ                  ; 6037
TSEL    8023 6039    ; 6038
LD  0   1            ; 6039
LDC 160              ; 6040
CEQ                  ; 6041
TSEL    8033 6043    ; 6042
LD  0   1            ; 6043
LDC 161              ; 6044
CEQ                  ; 6045
TSEL    8043 6047    ; 6046
LD  0   1            ; 6047
LDC 162              ; 6048
CEQ                  ; 6049
TSEL    8053 6051    ; 6050
LD  0   1            ; 6051
LDC 163              ; 6052
CEQ                  ; 6053
TSEL    8063 6055    ; 6054
LD  0   1            ; 6055
LDC 164              ; 6056
CEQ                  ; 6057
TSEL    8073 6059    ; 6058
LD  0   1            ; 6059
LDC 165              ; 6060
CEQ                  ; 6061
TSEL    8083 6063    ; 6062
LD  0   1            ; 6063
LDC 166              ; 6064
CEQ                  ; 6065
TSEL    8093 6067    ; 6066
LD  0   1            ; 6067
LDC 167              ; 6068
CEQ                  ; 6069
TSEL    8103 6071    ; 6070
LD  0   1            ; 6071
LDC 168              ; 6072
CEQ                  ; 6073
TSEL    8113 6075    ; 6074
LD  0   1            ; 6075
LDC 169              ; 6076
CEQ                  ; 6077
TSEL    8123 6079    ; 6078
LD  0   1            ; 6079
LDC 170              ; 6080
CEQ                  ; 6081
TSEL    8133 6083    ; 6082
LD  0   1            ; 6083
LDC 171              ; 6084
CEQ                  ; 6085
TSEL    8143 6087    ; 6086
LD  0   1            ; 6087
LDC 172              ; 6088
CEQ                  ; 6089
TSEL    8153 6091    ; 6090
LD  0   1            ; 6091
LDC 173              ; 6092
CEQ                  ; 6093
TSEL    8163 6095    ; 6094
LD  0   1            ; 6095
LDC 174              ; 6096
CEQ                  ; 6097
TSEL    8173 6099    ; 6098
LD  0   1            ; 6099
LDC 175              ; 6100
CEQ                  ; 6101
TSEL    8183 6103    ; 6102
LD  0   1            ; 6103
LDC 176              ; 6104
CEQ                  ; 6105
TSEL    8193 6107    ; 6106
LD  0   1            ; 6107
LDC 177              ; 6108
CEQ                  ; 6109
TSEL    8203 6111    ; 6110
LD  0   1            ; 6111
LDC 178              ; 6112
CEQ                  ; 6113
TSEL    8213 6115    ; 6114
LD  0   1            ; 6115
LDC 179              ; 6116
CEQ                  ; 6117
TSEL    8223 6119    ; 6118
LD  0   1            ; 6119
LDC 180              ; 6120
CEQ                  ; 6121
TSEL    8233 6123    ; 6122
LD  0   1            ; 6123
LDC 181              ; 6124
CEQ                  ; 6125
TSEL    8243 6127    ; 6126
LD  0   1            ; 6127
LDC 182              ; 6128
CEQ                  ; 6129
TSEL    8253 6131    ; 6130
LD  0   1            ; 6131
LDC 183              ; 6132
CEQ                  ; 6133
TSEL    8263 6135    ; 6134
LD  0   1            ; 6135
LDC 184              ; 6136
CEQ                  ; 6137
TSEL    8273 6139    ; 6138
LD  0   1            ; 6139
LDC 185              ; 6140
CEQ                  ; 6141
TSEL    8283 6143    ; 6142
LD  0   1            ; 6143
LDC 186              ; 6144
CEQ                  ; 6145
TSEL    8293 6147    ; 6146
LD  0   1            ; 6147
LDC 187              ; 6148
CEQ                  ; 6149
TSEL    8303 6151    ; 6150
LD  0   1            ; 6151
LDC 188              ; 6152
CEQ                  ; 6153
TSEL    8313 6155    ; 6154
LD  0   1            ; 6155
LDC 189              ; 6156
CEQ                  ; 6157
TSEL    8323 6159    ; 6158
LD  0   1            ; 6159
LDC 190              ; 6160
CEQ                  ; 6161
TSEL    8333 6163    ; 6162
LD  0   1            ; 6163
LDC 191              ; 6164
CEQ                  ; 6165
TSEL    8343 6167    ; 6166
LD  0   1            ; 6167
LDC 192              ; 6168
CEQ                  ; 6169
TSEL    8353 6171    ; 6170
LD  0   1            ; 6171
LDC 193              ; 6172
CEQ                  ; 6173
TSEL    8363 6175    ; 6174
LD  0   1            ; 6175
LDC 194              ; 6176
CEQ                  ; 6177
TSEL    8373 6179    ; 6178
LD  0   1            ; 6179
LDC 195              ; 6180
CEQ                  ; 6181
TSEL    8383 6183    ; 6182
LD  0   1            ; 6183
LDC 196              ; 6184
CEQ                  ; 6185
TSEL    8393 6187    ; 6186
LD  0   1            ; 6187
LDC 197              ; 6188
CEQ                  ; 6189
TSEL    8403 6191    ; 6190
LD  0   1            ; 6191
LDC 198              ; 6192
CEQ                  ; 6193
TSEL    8413 6195    ; 6194
LD  0   1            ; 6195
LDC 199              ; 6196
CEQ                  ; 6197
TSEL    8423 6199    ; 6198
LD  0   1            ; 6199
LDC 200              ; 6200
CEQ                  ; 6201
TSEL    8433 6203    ; 6202
LD  0   1            ; 6203
LDC 201              ; 6204
CEQ                  ; 6205
TSEL    8443 6207    ; 6206
LD  0   1            ; 6207
LDC 202              ; 6208
CEQ                  ; 6209
TSEL    8453 6211    ; 6210
LD  0   1            ; 6211
LDC 203              ; 6212
CEQ                  ; 6213
TSEL    8463 6215    ; 6214
LD  0   1            ; 6215
LDC 204              ; 6216
CEQ                  ; 6217
TSEL    8473 6219    ; 6218
LD  0   1            ; 6219
LDC 205              ; 6220
CEQ                  ; 6221
TSEL    8483 6223    ; 6222
LD  0   1            ; 6223
LDC 206              ; 6224
CEQ                  ; 6225
TSEL    8493 6227    ; 6226
LD  0   1            ; 6227
LDC 207              ; 6228
CEQ                  ; 6229
TSEL    8503 6231    ; 6230
LD  0   1            ; 6231
LDC 208              ; 6232
CEQ                  ; 6233
TSEL    8513 6235    ; 6234
LD  0   1            ; 6235
LDC 209              ; 6236
CEQ                  ; 6237
TSEL    8523 6239    ; 6238
LD  0   1            ; 6239
LDC 210              ; 6240
CEQ                  ; 6241
TSEL    8533 6243    ; 6242
LD  0   1            ; 6243
LDC 211              ; 6244
CEQ                  ; 6245
TSEL    8543 6247    ; 6246
LD  0   1            ; 6247
LDC 212              ; 6248
CEQ                  ; 6249
TSEL    8553 6251    ; 6250
LD  0   1            ; 6251
LDC 213              ; 6252
CEQ                  ; 6253
TSEL    8563 6255    ; 6254
LD  0   1            ; 6255
LDC 214              ; 6256
CEQ                  ; 6257
TSEL    8573 6259    ; 6258
LD  0   1            ; 6259
LDC 215              ; 6260
CEQ                  ; 6261
TSEL    8583 6263    ; 6262
LD  0   1            ; 6263
LDC 216              ; 6264
CEQ                  ; 6265
TSEL    8593 6267    ; 6266
LD  0   1            ; 6267
LDC 217              ; 6268
CEQ                  ; 6269
TSEL    8603 6271    ; 6270
LD  0   1            ; 6271
LDC 218              ; 6272
CEQ                  ; 6273
TSEL    8613 6275    ; 6274
LD  0   1            ; 6275
LDC 219              ; 6276
CEQ                  ; 6277
TSEL    8623 6279    ; 6278
LD  0   1            ; 6279
LDC 220              ; 6280
CEQ                  ; 6281
TSEL    8633 6283    ; 6282
LD  0   1            ; 6283
LDC 221              ; 6284
CEQ                  ; 6285
TSEL    8643 6287    ; 6286
LD  0   1            ; 6287
LDC 222              ; 6288
CEQ                  ; 6289
TSEL    8653 6291    ; 6290
LD  0   1            ; 6291
LDC 223              ; 6292
CEQ                  ; 6293
TSEL    8663 6295    ; 6294
LD  0   1            ; 6295
LDC 224              ; 6296
CEQ                  ; 6297
TSEL    8673 6299    ; 6298
LD  0   1            ; 6299
LDC 225              ; 6300
CEQ                  ; 6301
TSEL    8683 6303    ; 6302
LD  0   1            ; 6303
LDC 226              ; 6304
CEQ                  ; 6305
TSEL    8693 6307    ; 6306
LD  0   1            ; 6307
LDC 227              ; 6308
CEQ                  ; 6309
TSEL    8703 6311    ; 6310
LD  0   1            ; 6311
LDC 228              ; 6312
CEQ                  ; 6313
TSEL    8713 6315    ; 6314
LD  0   1            ; 6315
LDC 229              ; 6316
CEQ                  ; 6317
TSEL    8723 6319    ; 6318
LD  0   1            ; 6319
LDC 230              ; 6320
CEQ                  ; 6321
TSEL    8733 6323    ; 6322
LD  0   1            ; 6323
LDC 231              ; 6324
CEQ                  ; 6325
TSEL    8743 6327    ; 6326
LD  0   1            ; 6327
LDC 232              ; 6328
CEQ                  ; 6329
TSEL    8753 6331    ; 6330
LD  0   1            ; 6331
LDC 233              ; 6332
CEQ                  ; 6333
TSEL    8763 6335    ; 6334
LD  0   1            ; 6335
LDC 234              ; 6336
CEQ                  ; 6337
TSEL    8773 6339    ; 6338
LD  0   1            ; 6339
LDC 235              ; 6340
CEQ                  ; 6341
TSEL    8783 6343    ; 6342
LD  0   1            ; 6343
LDC 236              ; 6344
CEQ                  ; 6345
TSEL    8793 6347    ; 6346
LD  0   1            ; 6347
LDC 237              ; 6348
CEQ                  ; 6349
TSEL    8803 6351    ; 6350
LD  0   1            ; 6351
LDC 238              ; 6352
CEQ                  ; 6353
TSEL    8813 6355    ; 6354
LD  0   1            ; 6355
LDC 239              ; 6356
CEQ                  ; 6357
TSEL    8823 6359    ; 6358
LD  0   1            ; 6359
LDC 240              ; 6360
CEQ                  ; 6361
TSEL    8833 6363    ; 6362
LD  0   1            ; 6363
LDC 241              ; 6364
CEQ                  ; 6365
TSEL    8843 6367    ; 6366
LD  0   1            ; 6367
LDC 242              ; 6368
CEQ                  ; 6369
TSEL    8853 6371    ; 6370
LD  0   1            ; 6371
LDC 243              ; 6372
CEQ                  ; 6373
TSEL    8863 6375    ; 6374
LD  0   1            ; 6375
LDC 244              ; 6376
CEQ                  ; 6377
TSEL    8873 6379    ; 6378
LD  0   1            ; 6379
LDC 245              ; 6380
CEQ                  ; 6381
TSEL    8883 6383    ; 6382
LD  0   1            ; 6383
LDC 246              ; 6384
CEQ                  ; 6385
TSEL    8893 6387    ; 6386
LD  0   1            ; 6387
LDC 247              ; 6388
CEQ                  ; 6389
TSEL    8903 6391    ; 6390
LD  0   1            ; 6391
LDC 248              ; 6392
CEQ                  ; 6393
TSEL    8913 6395    ; 6394
LD  0   1            ; 6395
LDC 249              ; 6396
CEQ                  ; 6397
TSEL    8923 6399    ; 6398
LD  0   1            ; 6399
LDC 250              ; 6400
CEQ                  ; 6401
TSEL    8933 6403    ; 6402
LD  0   1            ; 6403
LDC 251              ; 6404
CEQ                  ; 6405
TSEL    8943 6407    ; 6406
LD  0   1            ; 6407
LDC 252              ; 6408
CEQ                  ; 6409
TSEL    8953 6411    ; 6410
LD  0   1            ; 6411
LDC 253              ; 6412
CEQ                  ; 6413
TSEL    8963 6415    ; 6414
LD  0   1            ; 6415
LDC 254              ; 6416
CEQ                  ; 6417
TSEL    8973 6419    ; 6418
LD  0   1            ; 6419
LDC 255              ; 6420
CEQ                  ; 6421
TSEL    8983 6423    ; 6422
LDC  0               ; 6423
RTN                  ; 6424
LD  2   0            ; 6425
RTN                  ; 6426
LDF 6425             ; 6427
RTN                  ; 6428
LD  2   0            ; 6429
LD  0   0            ; 6430
ST  2   0            ; 6431
RTN                  ; 6432
LDF 6429             ; 6433
RTN                  ; 6434
LD  2   1            ; 6435
RTN                  ; 6436
LDF 6435             ; 6437
RTN                  ; 6438
LD  2   1            ; 6439
LD  0   0            ; 6440
ST  2   1            ; 6441
RTN                  ; 6442
LDF 6439             ; 6443
RTN                  ; 6444
LD  2   2            ; 6445
RTN                  ; 6446
LDF 6445             ; 6447
RTN                  ; 6448
LD  2   2            ; 6449
LD  0   0            ; 6450
ST  2   2            ; 6451
RTN                  ; 6452
LDF 6449             ; 6453
RTN                  ; 6454
LD  2   3            ; 6455
RTN                  ; 6456
LDF 6455             ; 6457
RTN                  ; 6458
LD  2   3            ; 6459
LD  0   0            ; 6460
ST  2   3            ; 6461
RTN                  ; 6462
LDF 6459             ; 6463
RTN                  ; 6464
LD  2   4            ; 6465
RTN                  ; 6466
LDF 6465             ; 6467
RTN                  ; 6468
LD  2   4            ; 6469
LD  0   0            ; 6470
ST  2   4            ; 6471
RTN                  ; 6472
LDF 6469             ; 6473
RTN                  ; 6474
LD  2   5            ; 6475
RTN                  ; 6476
LDF 6475             ; 6477
RTN                  ; 6478
LD  2   5            ; 6479
LD  0   0            ; 6480
ST  2   5            ; 6481
RTN                  ; 6482
LDF 6479             ; 6483
RTN                  ; 6484
LD  2   6            ; 6485
RTN                  ; 6486
LDF 6485             ; 6487
RTN                  ; 6488
LD  2   6            ; 6489
LD  0   0            ; 6490
ST  2   6            ; 6491
RTN                  ; 6492
LDF 6489             ; 6493
RTN                  ; 6494
LD  2   7            ; 6495
RTN                  ; 6496
LDF 6495             ; 6497
RTN                  ; 6498
LD  2   7            ; 6499
LD  0   0            ; 6500
ST  2   7            ; 6501
RTN                  ; 6502
LDF 6499             ; 6503
RTN                  ; 6504
LD  2   8            ; 6505
RTN                  ; 6506
LDF 6505             ; 6507
RTN                  ; 6508
LD  2   8            ; 6509
LD  0   0            ; 6510
ST  2   8            ; 6511
RTN                  ; 6512
LDF 6509             ; 6513
RTN                  ; 6514
LD  2   9            ; 6515
RTN                  ; 6516
LDF 6515             ; 6517
RTN                  ; 6518
LD  2   9            ; 6519
LD  0   0            ; 6520
ST  2   9            ; 6521
RTN                  ; 6522
LDF 6519             ; 6523
RTN                  ; 6524
LD  2   10           ; 6525
RTN                  ; 6526
LDF 6525             ; 6527
RTN                  ; 6528
LD  2   10           ; 6529
LD  0   0            ; 6530
ST  2   10           ; 6531
RTN                  ; 6532
LDF 6529             ; 6533
RTN                  ; 6534
LD  2   11           ; 6535
RTN                  ; 6536
LDF 6535             ; 6537
RTN                  ; 6538
LD  2   11           ; 6539
LD  0   0            ; 6540
ST  2   11           ; 6541
RTN                  ; 6542
LDF 6539             ; 6543
RTN                  ; 6544
LD  2   12           ; 6545
RTN                  ; 6546
LDF 6545             ; 6547
RTN                  ; 6548
LD  2   12           ; 6549
LD  0   0            ; 6550
ST  2   12           ; 6551
RTN                  ; 6552
LDF 6549             ; 6553
RTN                  ; 6554
LD  2   13           ; 6555
RTN                  ; 6556
LDF 6555             ; 6557
RTN                  ; 6558
LD  2   13           ; 6559
LD  0   0            ; 6560
ST  2   13           ; 6561
RTN                  ; 6562
LDF 6559             ; 6563
RTN                  ; 6564
LD  2   14           ; 6565
RTN                  ; 6566
LDF 6565             ; 6567
RTN                  ; 6568
LD  2   14           ; 6569
LD  0   0            ; 6570
ST  2   14           ; 6571
RTN                  ; 6572
LDF 6569             ; 6573
RTN                  ; 6574
LD  2   15           ; 6575
RTN                  ; 6576
LDF 6575             ; 6577
RTN                  ; 6578
LD  2   15           ; 6579
LD  0   0            ; 6580
ST  2   15           ; 6581
RTN                  ; 6582
LDF 6579             ; 6583
RTN                  ; 6584
LD  2   16           ; 6585
RTN                  ; 6586
LDF 6585             ; 6587
RTN                  ; 6588
LD  2   16           ; 6589
LD  0   0            ; 6590
ST  2   16           ; 6591
RTN                  ; 6592
LDF 6589             ; 6593
RTN                  ; 6594
LD  2   17           ; 6595
RTN                  ; 6596
LDF 6595             ; 6597
RTN                  ; 6598
LD  2   17           ; 6599
LD  0   0            ; 6600
ST  2   17           ; 6601
RTN                  ; 6602
LDF 6599             ; 6603
RTN                  ; 6604
LD  2   18           ; 6605
RTN                  ; 6606
LDF 6605             ; 6607
RTN                  ; 6608
LD  2   18           ; 6609
LD  0   0            ; 6610
ST  2   18           ; 6611
RTN                  ; 6612
LDF 6609             ; 6613
RTN                  ; 6614
LD  2   19           ; 6615
RTN                  ; 6616
LDF 6615             ; 6617
RTN                  ; 6618
LD  2   19           ; 6619
LD  0   0            ; 6620
ST  2   19           ; 6621
RTN                  ; 6622
LDF 6619             ; 6623
RTN                  ; 6624
LD  2   20           ; 6625
RTN                  ; 6626
LDF 6625             ; 6627
RTN                  ; 6628
LD  2   20           ; 6629
LD  0   0            ; 6630
ST  2   20           ; 6631
RTN                  ; 6632
LDF 6629             ; 6633
RTN                  ; 6634
LD  2   21           ; 6635
RTN                  ; 6636
LDF 6635             ; 6637
RTN                  ; 6638
LD  2   21           ; 6639
LD  0   0            ; 6640
ST  2   21           ; 6641
RTN                  ; 6642
LDF 6639             ; 6643
RTN                  ; 6644
LD  2   22           ; 6645
RTN                  ; 6646
LDF 6645             ; 6647
RTN                  ; 6648
LD  2   22           ; 6649
LD  0   0            ; 6650
ST  2   22           ; 6651
RTN                  ; 6652
LDF 6649             ; 6653
RTN                  ; 6654
LD  2   23           ; 6655
RTN                  ; 6656
LDF 6655             ; 6657
RTN                  ; 6658
LD  2   23           ; 6659
LD  0   0            ; 6660
ST  2   23           ; 6661
RTN                  ; 6662
LDF 6659             ; 6663
RTN                  ; 6664
LD  2   24           ; 6665
RTN                  ; 6666
LDF 6665             ; 6667
RTN                  ; 6668
LD  2   24           ; 6669
LD  0   0            ; 6670
ST  2   24           ; 6671
RTN                  ; 6672
LDF 6669             ; 6673
RTN                  ; 6674
LD  2   25           ; 6675
RTN                  ; 6676
LDF 6675             ; 6677
RTN                  ; 6678
LD  2   25           ; 6679
LD  0   0            ; 6680
ST  2   25           ; 6681
RTN                  ; 6682
LDF 6679             ; 6683
RTN                  ; 6684
LD  2   26           ; 6685
RTN                  ; 6686
LDF 6685             ; 6687
RTN                  ; 6688
LD  2   26           ; 6689
LD  0   0            ; 6690
ST  2   26           ; 6691
RTN                  ; 6692
LDF 6689             ; 6693
RTN                  ; 6694
LD  2   27           ; 6695
RTN                  ; 6696
LDF 6695             ; 6697
RTN                  ; 6698
LD  2   27           ; 6699
LD  0   0            ; 6700
ST  2   27           ; 6701
RTN                  ; 6702
LDF 6699             ; 6703
RTN                  ; 6704
LD  2   28           ; 6705
RTN                  ; 6706
LDF 6705             ; 6707
RTN                  ; 6708
LD  2   28           ; 6709
LD  0   0            ; 6710
ST  2   28           ; 6711
RTN                  ; 6712
LDF 6709             ; 6713
RTN                  ; 6714
LD  2   29           ; 6715
RTN                  ; 6716
LDF 6715             ; 6717
RTN                  ; 6718
LD  2   29           ; 6719
LD  0   0            ; 6720
ST  2   29           ; 6721
RTN                  ; 6722
LDF 6719             ; 6723
RTN                  ; 6724
LD  2   30           ; 6725
RTN                  ; 6726
LDF 6725             ; 6727
RTN                  ; 6728
LD  2   30           ; 6729
LD  0   0            ; 6730
ST  2   30           ; 6731
RTN                  ; 6732
LDF 6729             ; 6733
RTN                  ; 6734
LD  2   31           ; 6735
RTN                  ; 6736
LDF 6735             ; 6737
RTN                  ; 6738
LD  2   31           ; 6739
LD  0   0            ; 6740
ST  2   31           ; 6741
RTN                  ; 6742
LDF 6739             ; 6743
RTN                  ; 6744
LD  2   32           ; 6745
RTN                  ; 6746
LDF 6745             ; 6747
RTN                  ; 6748
LD  2   32           ; 6749
LD  0   0            ; 6750
ST  2   32           ; 6751
RTN                  ; 6752
LDF 6749             ; 6753
RTN                  ; 6754
LD  2   33           ; 6755
RTN                  ; 6756
LDF 6755             ; 6757
RTN                  ; 6758
LD  2   33           ; 6759
LD  0   0            ; 6760
ST  2   33           ; 6761
RTN                  ; 6762
LDF 6759             ; 6763
RTN                  ; 6764
LD  2   34           ; 6765
RTN                  ; 6766
LDF 6765             ; 6767
RTN                  ; 6768
LD  2   34           ; 6769
LD  0   0            ; 6770
ST  2   34           ; 6771
RTN                  ; 6772
LDF 6769             ; 6773
RTN                  ; 6774
LD  2   35           ; 6775
RTN                  ; 6776
LDF 6775             ; 6777
RTN                  ; 6778
LD  2   35           ; 6779
LD  0   0            ; 6780
ST  2   35           ; 6781
RTN                  ; 6782
LDF 6779             ; 6783
RTN                  ; 6784
LD  2   36           ; 6785
RTN                  ; 6786
LDF 6785             ; 6787
RTN                  ; 6788
LD  2   36           ; 6789
LD  0   0            ; 6790
ST  2   36           ; 6791
RTN                  ; 6792
LDF 6789             ; 6793
RTN                  ; 6794
LD  2   37           ; 6795
RTN                  ; 6796
LDF 6795             ; 6797
RTN                  ; 6798
LD  2   37           ; 6799
LD  0   0            ; 6800
ST  2   37           ; 6801
RTN                  ; 6802
LDF 6799             ; 6803
RTN                  ; 6804
LD  2   38           ; 6805
RTN                  ; 6806
LDF 6805             ; 6807
RTN                  ; 6808
LD  2   38           ; 6809
LD  0   0            ; 6810
ST  2   38           ; 6811
RTN                  ; 6812
LDF 6809             ; 6813
RTN                  ; 6814
LD  2   39           ; 6815
RTN                  ; 6816
LDF 6815             ; 6817
RTN                  ; 6818
LD  2   39           ; 6819
LD  0   0            ; 6820
ST  2   39           ; 6821
RTN                  ; 6822
LDF 6819             ; 6823
RTN                  ; 6824
LD  2   40           ; 6825
RTN                  ; 6826
LDF 6825             ; 6827
RTN                  ; 6828
LD  2   40           ; 6829
LD  0   0            ; 6830
ST  2   40           ; 6831
RTN                  ; 6832
LDF 6829             ; 6833
RTN                  ; 6834
LD  2   41           ; 6835
RTN                  ; 6836
LDF 6835             ; 6837
RTN                  ; 6838
LD  2   41           ; 6839
LD  0   0            ; 6840
ST  2   41           ; 6841
RTN                  ; 6842
LDF 6839             ; 6843
RTN                  ; 6844
LD  2   42           ; 6845
RTN                  ; 6846
LDF 6845             ; 6847
RTN                  ; 6848
LD  2   42           ; 6849
LD  0   0            ; 6850
ST  2   42           ; 6851
RTN                  ; 6852
LDF 6849             ; 6853
RTN                  ; 6854
LD  2   43           ; 6855
RTN                  ; 6856
LDF 6855             ; 6857
RTN                  ; 6858
LD  2   43           ; 6859
LD  0   0            ; 6860
ST  2   43           ; 6861
RTN                  ; 6862
LDF 6859             ; 6863
RTN                  ; 6864
LD  2   44           ; 6865
RTN                  ; 6866
LDF 6865             ; 6867
RTN                  ; 6868
LD  2   44           ; 6869
LD  0   0            ; 6870
ST  2   44           ; 6871
RTN                  ; 6872
LDF 6869             ; 6873
RTN                  ; 6874
LD  2   45           ; 6875
RTN                  ; 6876
LDF 6875             ; 6877
RTN                  ; 6878
LD  2   45           ; 6879
LD  0   0            ; 6880
ST  2   45           ; 6881
RTN                  ; 6882
LDF 6879             ; 6883
RTN                  ; 6884
LD  2   46           ; 6885
RTN                  ; 6886
LDF 6885             ; 6887
RTN                  ; 6888
LD  2   46           ; 6889
LD  0   0            ; 6890
ST  2   46           ; 6891
RTN                  ; 6892
LDF 6889             ; 6893
RTN                  ; 6894
LD  2   47           ; 6895
RTN                  ; 6896
LDF 6895             ; 6897
RTN                  ; 6898
LD  2   47           ; 6899
LD  0   0            ; 6900
ST  2   47           ; 6901
RTN                  ; 6902
LDF 6899             ; 6903
RTN                  ; 6904
LD  2   48           ; 6905
RTN                  ; 6906
LDF 6905             ; 6907
RTN                  ; 6908
LD  2   48           ; 6909
LD  0   0            ; 6910
ST  2   48           ; 6911
RTN                  ; 6912
LDF 6909             ; 6913
RTN                  ; 6914
LD  2   49           ; 6915
RTN                  ; 6916
LDF 6915             ; 6917
RTN                  ; 6918
LD  2   49           ; 6919
LD  0   0            ; 6920
ST  2   49           ; 6921
RTN                  ; 6922
LDF 6919             ; 6923
RTN                  ; 6924
LD  2   50           ; 6925
RTN                  ; 6926
LDF 6925             ; 6927
RTN                  ; 6928
LD  2   50           ; 6929
LD  0   0            ; 6930
ST  2   50           ; 6931
RTN                  ; 6932
LDF 6929             ; 6933
RTN                  ; 6934
LD  2   51           ; 6935
RTN                  ; 6936
LDF 6935             ; 6937
RTN                  ; 6938
LD  2   51           ; 6939
LD  0   0            ; 6940
ST  2   51           ; 6941
RTN                  ; 6942
LDF 6939             ; 6943
RTN                  ; 6944
LD  2   52           ; 6945
RTN                  ; 6946
LDF 6945             ; 6947
RTN                  ; 6948
LD  2   52           ; 6949
LD  0   0            ; 6950
ST  2   52           ; 6951
RTN                  ; 6952
LDF 6949             ; 6953
RTN                  ; 6954
LD  2   53           ; 6955
RTN                  ; 6956
LDF 6955             ; 6957
RTN                  ; 6958
LD  2   53           ; 6959
LD  0   0            ; 6960
ST  2   53           ; 6961
RTN                  ; 6962
LDF 6959             ; 6963
RTN                  ; 6964
LD  2   54           ; 6965
RTN                  ; 6966
LDF 6965             ; 6967
RTN                  ; 6968
LD  2   54           ; 6969
LD  0   0            ; 6970
ST  2   54           ; 6971
RTN                  ; 6972
LDF 6969             ; 6973
RTN                  ; 6974
LD  2   55           ; 6975
RTN                  ; 6976
LDF 6975             ; 6977
RTN                  ; 6978
LD  2   55           ; 6979
LD  0   0            ; 6980
ST  2   55           ; 6981
RTN                  ; 6982
LDF 6979             ; 6983
RTN                  ; 6984
LD  2   56           ; 6985
RTN                  ; 6986
LDF 6985             ; 6987
RTN                  ; 6988
LD  2   56           ; 6989
LD  0   0            ; 6990
ST  2   56           ; 6991
RTN                  ; 6992
LDF 6989             ; 6993
RTN                  ; 6994
LD  2   57           ; 6995
RTN                  ; 6996
LDF 6995             ; 6997
RTN                  ; 6998
LD  2   57           ; 6999
LD  0   0            ; 7000
ST  2   57           ; 7001
RTN                  ; 7002
LDF 6999             ; 7003
RTN                  ; 7004
LD  2   58           ; 7005
RTN                  ; 7006
LDF 7005             ; 7007
RTN                  ; 7008
LD  2   58           ; 7009
LD  0   0            ; 7010
ST  2   58           ; 7011
RTN                  ; 7012
LDF 7009             ; 7013
RTN                  ; 7014
LD  2   59           ; 7015
RTN                  ; 7016
LDF 7015             ; 7017
RTN                  ; 7018
LD  2   59           ; 7019
LD  0   0            ; 7020
ST  2   59           ; 7021
RTN                  ; 7022
LDF 7019             ; 7023
RTN                  ; 7024
LD  2   60           ; 7025
RTN                  ; 7026
LDF 7025             ; 7027
RTN                  ; 7028
LD  2   60           ; 7029
LD  0   0            ; 7030
ST  2   60           ; 7031
RTN                  ; 7032
LDF 7029             ; 7033
RTN                  ; 7034
LD  2   61           ; 7035
RTN                  ; 7036
LDF 7035             ; 7037
RTN                  ; 7038
LD  2   61           ; 7039
LD  0   0            ; 7040
ST  2   61           ; 7041
RTN                  ; 7042
LDF 7039             ; 7043
RTN                  ; 7044
LD  2   62           ; 7045
RTN                  ; 7046
LDF 7045             ; 7047
RTN                  ; 7048
LD  2   62           ; 7049
LD  0   0            ; 7050
ST  2   62           ; 7051
RTN                  ; 7052
LDF 7049             ; 7053
RTN                  ; 7054
LD  2   63           ; 7055
RTN                  ; 7056
LDF 7055             ; 7057
RTN                  ; 7058
LD  2   63           ; 7059
LD  0   0            ; 7060
ST  2   63           ; 7061
RTN                  ; 7062
LDF 7059             ; 7063
RTN                  ; 7064
LD  2   64           ; 7065
RTN                  ; 7066
LDF 7065             ; 7067
RTN                  ; 7068
LD  2   64           ; 7069
LD  0   0            ; 7070
ST  2   64           ; 7071
RTN                  ; 7072
LDF 7069             ; 7073
RTN                  ; 7074
LD  2   65           ; 7075
RTN                  ; 7076
LDF 7075             ; 7077
RTN                  ; 7078
LD  2   65           ; 7079
LD  0   0            ; 7080
ST  2   65           ; 7081
RTN                  ; 7082
LDF 7079             ; 7083
RTN                  ; 7084
LD  2   66           ; 7085
RTN                  ; 7086
LDF 7085             ; 7087
RTN                  ; 7088
LD  2   66           ; 7089
LD  0   0            ; 7090
ST  2   66           ; 7091
RTN                  ; 7092
LDF 7089             ; 7093
RTN                  ; 7094
LD  2   67           ; 7095
RTN                  ; 7096
LDF 7095             ; 7097
RTN                  ; 7098
LD  2   67           ; 7099
LD  0   0            ; 7100
ST  2   67           ; 7101
RTN                  ; 7102
LDF 7099             ; 7103
RTN                  ; 7104
LD  2   68           ; 7105
RTN                  ; 7106
LDF 7105             ; 7107
RTN                  ; 7108
LD  2   68           ; 7109
LD  0   0            ; 7110
ST  2   68           ; 7111
RTN                  ; 7112
LDF 7109             ; 7113
RTN                  ; 7114
LD  2   69           ; 7115
RTN                  ; 7116
LDF 7115             ; 7117
RTN                  ; 7118
LD  2   69           ; 7119
LD  0   0            ; 7120
ST  2   69           ; 7121
RTN                  ; 7122
LDF 7119             ; 7123
RTN                  ; 7124
LD  2   70           ; 7125
RTN                  ; 7126
LDF 7125             ; 7127
RTN                  ; 7128
LD  2   70           ; 7129
LD  0   0            ; 7130
ST  2   70           ; 7131
RTN                  ; 7132
LDF 7129             ; 7133
RTN                  ; 7134
LD  2   71           ; 7135
RTN                  ; 7136
LDF 7135             ; 7137
RTN                  ; 7138
LD  2   71           ; 7139
LD  0   0            ; 7140
ST  2   71           ; 7141
RTN                  ; 7142
LDF 7139             ; 7143
RTN                  ; 7144
LD  2   72           ; 7145
RTN                  ; 7146
LDF 7145             ; 7147
RTN                  ; 7148
LD  2   72           ; 7149
LD  0   0            ; 7150
ST  2   72           ; 7151
RTN                  ; 7152
LDF 7149             ; 7153
RTN                  ; 7154
LD  2   73           ; 7155
RTN                  ; 7156
LDF 7155             ; 7157
RTN                  ; 7158
LD  2   73           ; 7159
LD  0   0            ; 7160
ST  2   73           ; 7161
RTN                  ; 7162
LDF 7159             ; 7163
RTN                  ; 7164
LD  2   74           ; 7165
RTN                  ; 7166
LDF 7165             ; 7167
RTN                  ; 7168
LD  2   74           ; 7169
LD  0   0            ; 7170
ST  2   74           ; 7171
RTN                  ; 7172
LDF 7169             ; 7173
RTN                  ; 7174
LD  2   75           ; 7175
RTN                  ; 7176
LDF 7175             ; 7177
RTN                  ; 7178
LD  2   75           ; 7179
LD  0   0            ; 7180
ST  2   75           ; 7181
RTN                  ; 7182
LDF 7179             ; 7183
RTN                  ; 7184
LD  2   76           ; 7185
RTN                  ; 7186
LDF 7185             ; 7187
RTN                  ; 7188
LD  2   76           ; 7189
LD  0   0            ; 7190
ST  2   76           ; 7191
RTN                  ; 7192
LDF 7189             ; 7193
RTN                  ; 7194
LD  2   77           ; 7195
RTN                  ; 7196
LDF 7195             ; 7197
RTN                  ; 7198
LD  2   77           ; 7199
LD  0   0            ; 7200
ST  2   77           ; 7201
RTN                  ; 7202
LDF 7199             ; 7203
RTN                  ; 7204
LD  2   78           ; 7205
RTN                  ; 7206
LDF 7205             ; 7207
RTN                  ; 7208
LD  2   78           ; 7209
LD  0   0            ; 7210
ST  2   78           ; 7211
RTN                  ; 7212
LDF 7209             ; 7213
RTN                  ; 7214
LD  2   79           ; 7215
RTN                  ; 7216
LDF 7215             ; 7217
RTN                  ; 7218
LD  2   79           ; 7219
LD  0   0            ; 7220
ST  2   79           ; 7221
RTN                  ; 7222
LDF 7219             ; 7223
RTN                  ; 7224
LD  2   80           ; 7225
RTN                  ; 7226
LDF 7225             ; 7227
RTN                  ; 7228
LD  2   80           ; 7229
LD  0   0            ; 7230
ST  2   80           ; 7231
RTN                  ; 7232
LDF 7229             ; 7233
RTN                  ; 7234
LD  2   81           ; 7235
RTN                  ; 7236
LDF 7235             ; 7237
RTN                  ; 7238
LD  2   81           ; 7239
LD  0   0            ; 7240
ST  2   81           ; 7241
RTN                  ; 7242
LDF 7239             ; 7243
RTN                  ; 7244
LD  2   82           ; 7245
RTN                  ; 7246
LDF 7245             ; 7247
RTN                  ; 7248
LD  2   82           ; 7249
LD  0   0            ; 7250
ST  2   82           ; 7251
RTN                  ; 7252
LDF 7249             ; 7253
RTN                  ; 7254
LD  2   83           ; 7255
RTN                  ; 7256
LDF 7255             ; 7257
RTN                  ; 7258
LD  2   83           ; 7259
LD  0   0            ; 7260
ST  2   83           ; 7261
RTN                  ; 7262
LDF 7259             ; 7263
RTN                  ; 7264
LD  2   84           ; 7265
RTN                  ; 7266
LDF 7265             ; 7267
RTN                  ; 7268
LD  2   84           ; 7269
LD  0   0            ; 7270
ST  2   84           ; 7271
RTN                  ; 7272
LDF 7269             ; 7273
RTN                  ; 7274
LD  2   85           ; 7275
RTN                  ; 7276
LDF 7275             ; 7277
RTN                  ; 7278
LD  2   85           ; 7279
LD  0   0            ; 7280
ST  2   85           ; 7281
RTN                  ; 7282
LDF 7279             ; 7283
RTN                  ; 7284
LD  2   86           ; 7285
RTN                  ; 7286
LDF 7285             ; 7287
RTN                  ; 7288
LD  2   86           ; 7289
LD  0   0            ; 7290
ST  2   86           ; 7291
RTN                  ; 7292
LDF 7289             ; 7293
RTN                  ; 7294
LD  2   87           ; 7295
RTN                  ; 7296
LDF 7295             ; 7297
RTN                  ; 7298
LD  2   87           ; 7299
LD  0   0            ; 7300
ST  2   87           ; 7301
RTN                  ; 7302
LDF 7299             ; 7303
RTN                  ; 7304
LD  2   88           ; 7305
RTN                  ; 7306
LDF 7305             ; 7307
RTN                  ; 7308
LD  2   88           ; 7309
LD  0   0            ; 7310
ST  2   88           ; 7311
RTN                  ; 7312
LDF 7309             ; 7313
RTN                  ; 7314
LD  2   89           ; 7315
RTN                  ; 7316
LDF 7315             ; 7317
RTN                  ; 7318
LD  2   89           ; 7319
LD  0   0            ; 7320
ST  2   89           ; 7321
RTN                  ; 7322
LDF 7319             ; 7323
RTN                  ; 7324
LD  2   90           ; 7325
RTN                  ; 7326
LDF 7325             ; 7327
RTN                  ; 7328
LD  2   90           ; 7329
LD  0   0            ; 7330
ST  2   90           ; 7331
RTN                  ; 7332
LDF 7329             ; 7333
RTN                  ; 7334
LD  2   91           ; 7335
RTN                  ; 7336
LDF 7335             ; 7337
RTN                  ; 7338
LD  2   91           ; 7339
LD  0   0            ; 7340
ST  2   91           ; 7341
RTN                  ; 7342
LDF 7339             ; 7343
RTN                  ; 7344
LD  2   92           ; 7345
RTN                  ; 7346
LDF 7345             ; 7347
RTN                  ; 7348
LD  2   92           ; 7349
LD  0   0            ; 7350
ST  2   92           ; 7351
RTN                  ; 7352
LDF 7349             ; 7353
RTN                  ; 7354
LD  2   93           ; 7355
RTN                  ; 7356
LDF 7355             ; 7357
RTN                  ; 7358
LD  2   93           ; 7359
LD  0   0            ; 7360
ST  2   93           ; 7361
RTN                  ; 7362
LDF 7359             ; 7363
RTN                  ; 7364
LD  2   94           ; 7365
RTN                  ; 7366
LDF 7365             ; 7367
RTN                  ; 7368
LD  2   94           ; 7369
LD  0   0            ; 7370
ST  2   94           ; 7371
RTN                  ; 7372
LDF 7369             ; 7373
RTN                  ; 7374
LD  2   95           ; 7375
RTN                  ; 7376
LDF 7375             ; 7377
RTN                  ; 7378
LD  2   95           ; 7379
LD  0   0            ; 7380
ST  2   95           ; 7381
RTN                  ; 7382
LDF 7379             ; 7383
RTN                  ; 7384
LD  2   96           ; 7385
RTN                  ; 7386
LDF 7385             ; 7387
RTN                  ; 7388
LD  2   96           ; 7389
LD  0   0            ; 7390
ST  2   96           ; 7391
RTN                  ; 7392
LDF 7389             ; 7393
RTN                  ; 7394
LD  2   97           ; 7395
RTN                  ; 7396
LDF 7395             ; 7397
RTN                  ; 7398
LD  2   97           ; 7399
LD  0   0            ; 7400
ST  2   97           ; 7401
RTN                  ; 7402
LDF 7399             ; 7403
RTN                  ; 7404
LD  2   98           ; 7405
RTN                  ; 7406
LDF 7405             ; 7407
RTN                  ; 7408
LD  2   98           ; 7409
LD  0   0            ; 7410
ST  2   98           ; 7411
RTN                  ; 7412
LDF 7409             ; 7413
RTN                  ; 7414
LD  2   99           ; 7415
RTN                  ; 7416
LDF 7415             ; 7417
RTN                  ; 7418
LD  2   99           ; 7419
LD  0   0            ; 7420
ST  2   99           ; 7421
RTN                  ; 7422
LDF 7419             ; 7423
RTN                  ; 7424
LD  2   100          ; 7425
RTN                  ; 7426
LDF 7425             ; 7427
RTN                  ; 7428
LD  2   100          ; 7429
LD  0   0            ; 7430
ST  2   100          ; 7431
RTN                  ; 7432
LDF 7429             ; 7433
RTN                  ; 7434
LD  2   101          ; 7435
RTN                  ; 7436
LDF 7435             ; 7437
RTN                  ; 7438
LD  2   101          ; 7439
LD  0   0            ; 7440
ST  2   101          ; 7441
RTN                  ; 7442
LDF 7439             ; 7443
RTN                  ; 7444
LD  2   102          ; 7445
RTN                  ; 7446
LDF 7445             ; 7447
RTN                  ; 7448
LD  2   102          ; 7449
LD  0   0            ; 7450
ST  2   102          ; 7451
RTN                  ; 7452
LDF 7449             ; 7453
RTN                  ; 7454
LD  2   103          ; 7455
RTN                  ; 7456
LDF 7455             ; 7457
RTN                  ; 7458
LD  2   103          ; 7459
LD  0   0            ; 7460
ST  2   103          ; 7461
RTN                  ; 7462
LDF 7459             ; 7463
RTN                  ; 7464
LD  2   104          ; 7465
RTN                  ; 7466
LDF 7465             ; 7467
RTN                  ; 7468
LD  2   104          ; 7469
LD  0   0            ; 7470
ST  2   104          ; 7471
RTN                  ; 7472
LDF 7469             ; 7473
RTN                  ; 7474
LD  2   105          ; 7475
RTN                  ; 7476
LDF 7475             ; 7477
RTN                  ; 7478
LD  2   105          ; 7479
LD  0   0            ; 7480
ST  2   105          ; 7481
RTN                  ; 7482
LDF 7479             ; 7483
RTN                  ; 7484
LD  2   106          ; 7485
RTN                  ; 7486
LDF 7485             ; 7487
RTN                  ; 7488
LD  2   106          ; 7489
LD  0   0            ; 7490
ST  2   106          ; 7491
RTN                  ; 7492
LDF 7489             ; 7493
RTN                  ; 7494
LD  2   107          ; 7495
RTN                  ; 7496
LDF 7495             ; 7497
RTN                  ; 7498
LD  2   107          ; 7499
LD  0   0            ; 7500
ST  2   107          ; 7501
RTN                  ; 7502
LDF 7499             ; 7503
RTN                  ; 7504
LD  2   108          ; 7505
RTN                  ; 7506
LDF 7505             ; 7507
RTN                  ; 7508
LD  2   108          ; 7509
LD  0   0            ; 7510
ST  2   108          ; 7511
RTN                  ; 7512
LDF 7509             ; 7513
RTN                  ; 7514
LD  2   109          ; 7515
RTN                  ; 7516
LDF 7515             ; 7517
RTN                  ; 7518
LD  2   109          ; 7519
LD  0   0            ; 7520
ST  2   109          ; 7521
RTN                  ; 7522
LDF 7519             ; 7523
RTN                  ; 7524
LD  2   110          ; 7525
RTN                  ; 7526
LDF 7525             ; 7527
RTN                  ; 7528
LD  2   110          ; 7529
LD  0   0            ; 7530
ST  2   110          ; 7531
RTN                  ; 7532
LDF 7529             ; 7533
RTN                  ; 7534
LD  2   111          ; 7535
RTN                  ; 7536
LDF 7535             ; 7537
RTN                  ; 7538
LD  2   111          ; 7539
LD  0   0            ; 7540
ST  2   111          ; 7541
RTN                  ; 7542
LDF 7539             ; 7543
RTN                  ; 7544
LD  2   112          ; 7545
RTN                  ; 7546
LDF 7545             ; 7547
RTN                  ; 7548
LD  2   112          ; 7549
LD  0   0            ; 7550
ST  2   112          ; 7551
RTN                  ; 7552
LDF 7549             ; 7553
RTN                  ; 7554
LD  2   113          ; 7555
RTN                  ; 7556
LDF 7555             ; 7557
RTN                  ; 7558
LD  2   113          ; 7559
LD  0   0            ; 7560
ST  2   113          ; 7561
RTN                  ; 7562
LDF 7559             ; 7563
RTN                  ; 7564
LD  2   114          ; 7565
RTN                  ; 7566
LDF 7565             ; 7567
RTN                  ; 7568
LD  2   114          ; 7569
LD  0   0            ; 7570
ST  2   114          ; 7571
RTN                  ; 7572
LDF 7569             ; 7573
RTN                  ; 7574
LD  2   115          ; 7575
RTN                  ; 7576
LDF 7575             ; 7577
RTN                  ; 7578
LD  2   115          ; 7579
LD  0   0            ; 7580
ST  2   115          ; 7581
RTN                  ; 7582
LDF 7579             ; 7583
RTN                  ; 7584
LD  2   116          ; 7585
RTN                  ; 7586
LDF 7585             ; 7587
RTN                  ; 7588
LD  2   116          ; 7589
LD  0   0            ; 7590
ST  2   116          ; 7591
RTN                  ; 7592
LDF 7589             ; 7593
RTN                  ; 7594
LD  2   117          ; 7595
RTN                  ; 7596
LDF 7595             ; 7597
RTN                  ; 7598
LD  2   117          ; 7599
LD  0   0            ; 7600
ST  2   117          ; 7601
RTN                  ; 7602
LDF 7599             ; 7603
RTN                  ; 7604
LD  2   118          ; 7605
RTN                  ; 7606
LDF 7605             ; 7607
RTN                  ; 7608
LD  2   118          ; 7609
LD  0   0            ; 7610
ST  2   118          ; 7611
RTN                  ; 7612
LDF 7609             ; 7613
RTN                  ; 7614
LD  2   119          ; 7615
RTN                  ; 7616
LDF 7615             ; 7617
RTN                  ; 7618
LD  2   119          ; 7619
LD  0   0            ; 7620
ST  2   119          ; 7621
RTN                  ; 7622
LDF 7619             ; 7623
RTN                  ; 7624
LD  2   120          ; 7625
RTN                  ; 7626
LDF 7625             ; 7627
RTN                  ; 7628
LD  2   120          ; 7629
LD  0   0            ; 7630
ST  2   120          ; 7631
RTN                  ; 7632
LDF 7629             ; 7633
RTN                  ; 7634
LD  2   121          ; 7635
RTN                  ; 7636
LDF 7635             ; 7637
RTN                  ; 7638
LD  2   121          ; 7639
LD  0   0            ; 7640
ST  2   121          ; 7641
RTN                  ; 7642
LDF 7639             ; 7643
RTN                  ; 7644
LD  2   122          ; 7645
RTN                  ; 7646
LDF 7645             ; 7647
RTN                  ; 7648
LD  2   122          ; 7649
LD  0   0            ; 7650
ST  2   122          ; 7651
RTN                  ; 7652
LDF 7649             ; 7653
RTN                  ; 7654
LD  2   123          ; 7655
RTN                  ; 7656
LDF 7655             ; 7657
RTN                  ; 7658
LD  2   123          ; 7659
LD  0   0            ; 7660
ST  2   123          ; 7661
RTN                  ; 7662
LDF 7659             ; 7663
RTN                  ; 7664
LD  2   124          ; 7665
RTN                  ; 7666
LDF 7665             ; 7667
RTN                  ; 7668
LD  2   124          ; 7669
LD  0   0            ; 7670
ST  2   124          ; 7671
RTN                  ; 7672
LDF 7669             ; 7673
RTN                  ; 7674
LD  2   125          ; 7675
RTN                  ; 7676
LDF 7675             ; 7677
RTN                  ; 7678
LD  2   125          ; 7679
LD  0   0            ; 7680
ST  2   125          ; 7681
RTN                  ; 7682
LDF 7679             ; 7683
RTN                  ; 7684
LD  2   126          ; 7685
RTN                  ; 7686
LDF 7685             ; 7687
RTN                  ; 7688
LD  2   126          ; 7689
LD  0   0            ; 7690
ST  2   126          ; 7691
RTN                  ; 7692
LDF 7689             ; 7693
RTN                  ; 7694
LD  2   127          ; 7695
RTN                  ; 7696
LDF 7695             ; 7697
RTN                  ; 7698
LD  2   127          ; 7699
LD  0   0            ; 7700
ST  2   127          ; 7701
RTN                  ; 7702
LDF 7699             ; 7703
RTN                  ; 7704
LD  2   128          ; 7705
RTN                  ; 7706
LDF 7705             ; 7707
RTN                  ; 7708
LD  2   128          ; 7709
LD  0   0            ; 7710
ST  2   128          ; 7711
RTN                  ; 7712
LDF 7709             ; 7713
RTN                  ; 7714
LD  2   129          ; 7715
RTN                  ; 7716
LDF 7715             ; 7717
RTN                  ; 7718
LD  2   129          ; 7719
LD  0   0            ; 7720
ST  2   129          ; 7721
RTN                  ; 7722
LDF 7719             ; 7723
RTN                  ; 7724
LD  2   130          ; 7725
RTN                  ; 7726
LDF 7725             ; 7727
RTN                  ; 7728
LD  2   130          ; 7729
LD  0   0            ; 7730
ST  2   130          ; 7731
RTN                  ; 7732
LDF 7729             ; 7733
RTN                  ; 7734
LD  2   131          ; 7735
RTN                  ; 7736
LDF 7735             ; 7737
RTN                  ; 7738
LD  2   131          ; 7739
LD  0   0            ; 7740
ST  2   131          ; 7741
RTN                  ; 7742
LDF 7739             ; 7743
RTN                  ; 7744
LD  2   132          ; 7745
RTN                  ; 7746
LDF 7745             ; 7747
RTN                  ; 7748
LD  2   132          ; 7749
LD  0   0            ; 7750
ST  2   132          ; 7751
RTN                  ; 7752
LDF 7749             ; 7753
RTN                  ; 7754
LD  2   133          ; 7755
RTN                  ; 7756
LDF 7755             ; 7757
RTN                  ; 7758
LD  2   133          ; 7759
LD  0   0            ; 7760
ST  2   133          ; 7761
RTN                  ; 7762
LDF 7759             ; 7763
RTN                  ; 7764
LD  2   134          ; 7765
RTN                  ; 7766
LDF 7765             ; 7767
RTN                  ; 7768
LD  2   134          ; 7769
LD  0   0            ; 7770
ST  2   134          ; 7771
RTN                  ; 7772
LDF 7769             ; 7773
RTN                  ; 7774
LD  2   135          ; 7775
RTN                  ; 7776
LDF 7775             ; 7777
RTN                  ; 7778
LD  2   135          ; 7779
LD  0   0            ; 7780
ST  2   135          ; 7781
RTN                  ; 7782
LDF 7779             ; 7783
RTN                  ; 7784
LD  2   136          ; 7785
RTN                  ; 7786
LDF 7785             ; 7787
RTN                  ; 7788
LD  2   136          ; 7789
LD  0   0            ; 7790
ST  2   136          ; 7791
RTN                  ; 7792
LDF 7789             ; 7793
RTN                  ; 7794
LD  2   137          ; 7795
RTN                  ; 7796
LDF 7795             ; 7797
RTN                  ; 7798
LD  2   137          ; 7799
LD  0   0            ; 7800
ST  2   137          ; 7801
RTN                  ; 7802
LDF 7799             ; 7803
RTN                  ; 7804
LD  2   138          ; 7805
RTN                  ; 7806
LDF 7805             ; 7807
RTN                  ; 7808
LD  2   138          ; 7809
LD  0   0            ; 7810
ST  2   138          ; 7811
RTN                  ; 7812
LDF 7809             ; 7813
RTN                  ; 7814
LD  2   139          ; 7815
RTN                  ; 7816
LDF 7815             ; 7817
RTN                  ; 7818
LD  2   139          ; 7819
LD  0   0            ; 7820
ST  2   139          ; 7821
RTN                  ; 7822
LDF 7819             ; 7823
RTN                  ; 7824
LD  2   140          ; 7825
RTN                  ; 7826
LDF 7825             ; 7827
RTN                  ; 7828
LD  2   140          ; 7829
LD  0   0            ; 7830
ST  2   140          ; 7831
RTN                  ; 7832
LDF 7829             ; 7833
RTN                  ; 7834
LD  2   141          ; 7835
RTN                  ; 7836
LDF 7835             ; 7837
RTN                  ; 7838
LD  2   141          ; 7839
LD  0   0            ; 7840
ST  2   141          ; 7841
RTN                  ; 7842
LDF 7839             ; 7843
RTN                  ; 7844
LD  2   142          ; 7845
RTN                  ; 7846
LDF 7845             ; 7847
RTN                  ; 7848
LD  2   142          ; 7849
LD  0   0            ; 7850
ST  2   142          ; 7851
RTN                  ; 7852
LDF 7849             ; 7853
RTN                  ; 7854
LD  2   143          ; 7855
RTN                  ; 7856
LDF 7855             ; 7857
RTN                  ; 7858
LD  2   143          ; 7859
LD  0   0            ; 7860
ST  2   143          ; 7861
RTN                  ; 7862
LDF 7859             ; 7863
RTN                  ; 7864
LD  2   144          ; 7865
RTN                  ; 7866
LDF 7865             ; 7867
RTN                  ; 7868
LD  2   144          ; 7869
LD  0   0            ; 7870
ST  2   144          ; 7871
RTN                  ; 7872
LDF 7869             ; 7873
RTN                  ; 7874
LD  2   145          ; 7875
RTN                  ; 7876
LDF 7875             ; 7877
RTN                  ; 7878
LD  2   145          ; 7879
LD  0   0            ; 7880
ST  2   145          ; 7881
RTN                  ; 7882
LDF 7879             ; 7883
RTN                  ; 7884
LD  2   146          ; 7885
RTN                  ; 7886
LDF 7885             ; 7887
RTN                  ; 7888
LD  2   146          ; 7889
LD  0   0            ; 7890
ST  2   146          ; 7891
RTN                  ; 7892
LDF 7889             ; 7893
RTN                  ; 7894
LD  2   147          ; 7895
RTN                  ; 7896
LDF 7895             ; 7897
RTN                  ; 7898
LD  2   147          ; 7899
LD  0   0            ; 7900
ST  2   147          ; 7901
RTN                  ; 7902
LDF 7899             ; 7903
RTN                  ; 7904
LD  2   148          ; 7905
RTN                  ; 7906
LDF 7905             ; 7907
RTN                  ; 7908
LD  2   148          ; 7909
LD  0   0            ; 7910
ST  2   148          ; 7911
RTN                  ; 7912
LDF 7909             ; 7913
RTN                  ; 7914
LD  2   149          ; 7915
RTN                  ; 7916
LDF 7915             ; 7917
RTN                  ; 7918
LD  2   149          ; 7919
LD  0   0            ; 7920
ST  2   149          ; 7921
RTN                  ; 7922
LDF 7919             ; 7923
RTN                  ; 7924
LD  2   150          ; 7925
RTN                  ; 7926
LDF 7925             ; 7927
RTN                  ; 7928
LD  2   150          ; 7929
LD  0   0            ; 7930
ST  2   150          ; 7931
RTN                  ; 7932
LDF 7929             ; 7933
RTN                  ; 7934
LD  2   151          ; 7935
RTN                  ; 7936
LDF 7935             ; 7937
RTN                  ; 7938
LD  2   151          ; 7939
LD  0   0            ; 7940
ST  2   151          ; 7941
RTN                  ; 7942
LDF 7939             ; 7943
RTN                  ; 7944
LD  2   152          ; 7945
RTN                  ; 7946
LDF 7945             ; 7947
RTN                  ; 7948
LD  2   152          ; 7949
LD  0   0            ; 7950
ST  2   152          ; 7951
RTN                  ; 7952
LDF 7949             ; 7953
RTN                  ; 7954
LD  2   153          ; 7955
RTN                  ; 7956
LDF 7955             ; 7957
RTN                  ; 7958
LD  2   153          ; 7959
LD  0   0            ; 7960
ST  2   153          ; 7961
RTN                  ; 7962
LDF 7959             ; 7963
RTN                  ; 7964
LD  2   154          ; 7965
RTN                  ; 7966
LDF 7965             ; 7967
RTN                  ; 7968
LD  2   154          ; 7969
LD  0   0            ; 7970
ST  2   154          ; 7971
RTN                  ; 7972
LDF 7969             ; 7973
RTN                  ; 7974
LD  2   155          ; 7975
RTN                  ; 7976
LDF 7975             ; 7977
RTN                  ; 7978
LD  2   155          ; 7979
LD  0   0            ; 7980
ST  2   155          ; 7981
RTN                  ; 7982
LDF 7979             ; 7983
RTN                  ; 7984
LD  2   156          ; 7985
RTN                  ; 7986
LDF 7985             ; 7987
RTN                  ; 7988
LD  2   156          ; 7989
LD  0   0            ; 7990
ST  2   156          ; 7991
RTN                  ; 7992
LDF 7989             ; 7993
RTN                  ; 7994
LD  2   157          ; 7995
RTN                  ; 7996
LDF 7995             ; 7997
RTN                  ; 7998
LD  2   157          ; 7999
LD  0   0            ; 8000
ST  2   157          ; 8001
RTN                  ; 8002
LDF 7999             ; 8003
RTN                  ; 8004
LD  2   158          ; 8005
RTN                  ; 8006
LDF 8005             ; 8007
RTN                  ; 8008
LD  2   158          ; 8009
LD  0   0            ; 8010
ST  2   158          ; 8011
RTN                  ; 8012
LDF 8009             ; 8013
RTN                  ; 8014
LD  2   159          ; 8015
RTN                  ; 8016
LDF 8015             ; 8017
RTN                  ; 8018
LD  2   159          ; 8019
LD  0   0            ; 8020
ST  2   159          ; 8021
RTN                  ; 8022
LDF 8019             ; 8023
RTN                  ; 8024
LD  2   160          ; 8025
RTN                  ; 8026
LDF 8025             ; 8027
RTN                  ; 8028
LD  2   160          ; 8029
LD  0   0            ; 8030
ST  2   160          ; 8031
RTN                  ; 8032
LDF 8029             ; 8033
RTN                  ; 8034
LD  2   161          ; 8035
RTN                  ; 8036
LDF 8035             ; 8037
RTN                  ; 8038
LD  2   161          ; 8039
LD  0   0            ; 8040
ST  2   161          ; 8041
RTN                  ; 8042
LDF 8039             ; 8043
RTN                  ; 8044
LD  2   162          ; 8045
RTN                  ; 8046
LDF 8045             ; 8047
RTN                  ; 8048
LD  2   162          ; 8049
LD  0   0            ; 8050
ST  2   162          ; 8051
RTN                  ; 8052
LDF 8049             ; 8053
RTN                  ; 8054
LD  2   163          ; 8055
RTN                  ; 8056
LDF 8055             ; 8057
RTN                  ; 8058
LD  2   163          ; 8059
LD  0   0            ; 8060
ST  2   163          ; 8061
RTN                  ; 8062
LDF 8059             ; 8063
RTN                  ; 8064
LD  2   164          ; 8065
RTN                  ; 8066
LDF 8065             ; 8067
RTN                  ; 8068
LD  2   164          ; 8069
LD  0   0            ; 8070
ST  2   164          ; 8071
RTN                  ; 8072
LDF 8069             ; 8073
RTN                  ; 8074
LD  2   165          ; 8075
RTN                  ; 8076
LDF 8075             ; 8077
RTN                  ; 8078
LD  2   165          ; 8079
LD  0   0            ; 8080
ST  2   165          ; 8081
RTN                  ; 8082
LDF 8079             ; 8083
RTN                  ; 8084
LD  2   166          ; 8085
RTN                  ; 8086
LDF 8085             ; 8087
RTN                  ; 8088
LD  2   166          ; 8089
LD  0   0            ; 8090
ST  2   166          ; 8091
RTN                  ; 8092
LDF 8089             ; 8093
RTN                  ; 8094
LD  2   167          ; 8095
RTN                  ; 8096
LDF 8095             ; 8097
RTN                  ; 8098
LD  2   167          ; 8099
LD  0   0            ; 8100
ST  2   167          ; 8101
RTN                  ; 8102
LDF 8099             ; 8103
RTN                  ; 8104
LD  2   168          ; 8105
RTN                  ; 8106
LDF 8105             ; 8107
RTN                  ; 8108
LD  2   168          ; 8109
LD  0   0            ; 8110
ST  2   168          ; 8111
RTN                  ; 8112
LDF 8109             ; 8113
RTN                  ; 8114
LD  2   169          ; 8115
RTN                  ; 8116
LDF 8115             ; 8117
RTN                  ; 8118
LD  2   169          ; 8119
LD  0   0            ; 8120
ST  2   169          ; 8121
RTN                  ; 8122
LDF 8119             ; 8123
RTN                  ; 8124
LD  2   170          ; 8125
RTN                  ; 8126
LDF 8125             ; 8127
RTN                  ; 8128
LD  2   170          ; 8129
LD  0   0            ; 8130
ST  2   170          ; 8131
RTN                  ; 8132
LDF 8129             ; 8133
RTN                  ; 8134
LD  2   171          ; 8135
RTN                  ; 8136
LDF 8135             ; 8137
RTN                  ; 8138
LD  2   171          ; 8139
LD  0   0            ; 8140
ST  2   171          ; 8141
RTN                  ; 8142
LDF 8139             ; 8143
RTN                  ; 8144
LD  2   172          ; 8145
RTN                  ; 8146
LDF 8145             ; 8147
RTN                  ; 8148
LD  2   172          ; 8149
LD  0   0            ; 8150
ST  2   172          ; 8151
RTN                  ; 8152
LDF 8149             ; 8153
RTN                  ; 8154
LD  2   173          ; 8155
RTN                  ; 8156
LDF 8155             ; 8157
RTN                  ; 8158
LD  2   173          ; 8159
LD  0   0            ; 8160
ST  2   173          ; 8161
RTN                  ; 8162
LDF 8159             ; 8163
RTN                  ; 8164
LD  2   174          ; 8165
RTN                  ; 8166
LDF 8165             ; 8167
RTN                  ; 8168
LD  2   174          ; 8169
LD  0   0            ; 8170
ST  2   174          ; 8171
RTN                  ; 8172
LDF 8169             ; 8173
RTN                  ; 8174
LD  2   175          ; 8175
RTN                  ; 8176
LDF 8175             ; 8177
RTN                  ; 8178
LD  2   175          ; 8179
LD  0   0            ; 8180
ST  2   175          ; 8181
RTN                  ; 8182
LDF 8179             ; 8183
RTN                  ; 8184
LD  2   176          ; 8185
RTN                  ; 8186
LDF 8185             ; 8187
RTN                  ; 8188
LD  2   176          ; 8189
LD  0   0            ; 8190
ST  2   176          ; 8191
RTN                  ; 8192
LDF 8189             ; 8193
RTN                  ; 8194
LD  2   177          ; 8195
RTN                  ; 8196
LDF 8195             ; 8197
RTN                  ; 8198
LD  2   177          ; 8199
LD  0   0            ; 8200
ST  2   177          ; 8201
RTN                  ; 8202
LDF 8199             ; 8203
RTN                  ; 8204
LD  2   178          ; 8205
RTN                  ; 8206
LDF 8205             ; 8207
RTN                  ; 8208
LD  2   178          ; 8209
LD  0   0            ; 8210
ST  2   178          ; 8211
RTN                  ; 8212
LDF 8209             ; 8213
RTN                  ; 8214
LD  2   179          ; 8215
RTN                  ; 8216
LDF 8215             ; 8217
RTN                  ; 8218
LD  2   179          ; 8219
LD  0   0            ; 8220
ST  2   179          ; 8221
RTN                  ; 8222
LDF 8219             ; 8223
RTN                  ; 8224
LD  2   180          ; 8225
RTN                  ; 8226
LDF 8225             ; 8227
RTN                  ; 8228
LD  2   180          ; 8229
LD  0   0            ; 8230
ST  2   180          ; 8231
RTN                  ; 8232
LDF 8229             ; 8233
RTN                  ; 8234
LD  2   181          ; 8235
RTN                  ; 8236
LDF 8235             ; 8237
RTN                  ; 8238
LD  2   181          ; 8239
LD  0   0            ; 8240
ST  2   181          ; 8241
RTN                  ; 8242
LDF 8239             ; 8243
RTN                  ; 8244
LD  2   182          ; 8245
RTN                  ; 8246
LDF 8245             ; 8247
RTN                  ; 8248
LD  2   182          ; 8249
LD  0   0            ; 8250
ST  2   182          ; 8251
RTN                  ; 8252
LDF 8249             ; 8253
RTN                  ; 8254
LD  2   183          ; 8255
RTN                  ; 8256
LDF 8255             ; 8257
RTN                  ; 8258
LD  2   183          ; 8259
LD  0   0            ; 8260
ST  2   183          ; 8261
RTN                  ; 8262
LDF 8259             ; 8263
RTN                  ; 8264
LD  2   184          ; 8265
RTN                  ; 8266
LDF 8265             ; 8267
RTN                  ; 8268
LD  2   184          ; 8269
LD  0   0            ; 8270
ST  2   184          ; 8271
RTN                  ; 8272
LDF 8269             ; 8273
RTN                  ; 8274
LD  2   185          ; 8275
RTN                  ; 8276
LDF 8275             ; 8277
RTN                  ; 8278
LD  2   185          ; 8279
LD  0   0            ; 8280
ST  2   185          ; 8281
RTN                  ; 8282
LDF 8279             ; 8283
RTN                  ; 8284
LD  2   186          ; 8285
RTN                  ; 8286
LDF 8285             ; 8287
RTN                  ; 8288
LD  2   186          ; 8289
LD  0   0            ; 8290
ST  2   186          ; 8291
RTN                  ; 8292
LDF 8289             ; 8293
RTN                  ; 8294
LD  2   187          ; 8295
RTN                  ; 8296
LDF 8295             ; 8297
RTN                  ; 8298
LD  2   187          ; 8299
LD  0   0            ; 8300
ST  2   187          ; 8301
RTN                  ; 8302
LDF 8299             ; 8303
RTN                  ; 8304
LD  2   188          ; 8305
RTN                  ; 8306
LDF 8305             ; 8307
RTN                  ; 8308
LD  2   188          ; 8309
LD  0   0            ; 8310
ST  2   188          ; 8311
RTN                  ; 8312
LDF 8309             ; 8313
RTN                  ; 8314
LD  2   189          ; 8315
RTN                  ; 8316
LDF 8315             ; 8317
RTN                  ; 8318
LD  2   189          ; 8319
LD  0   0            ; 8320
ST  2   189          ; 8321
RTN                  ; 8322
LDF 8319             ; 8323
RTN                  ; 8324
LD  2   190          ; 8325
RTN                  ; 8326
LDF 8325             ; 8327
RTN                  ; 8328
LD  2   190          ; 8329
LD  0   0            ; 8330
ST  2   190          ; 8331
RTN                  ; 8332
LDF 8329             ; 8333
RTN                  ; 8334
LD  2   191          ; 8335
RTN                  ; 8336
LDF 8335             ; 8337
RTN                  ; 8338
LD  2   191          ; 8339
LD  0   0            ; 8340
ST  2   191          ; 8341
RTN                  ; 8342
LDF 8339             ; 8343
RTN                  ; 8344
LD  2   192          ; 8345
RTN                  ; 8346
LDF 8345             ; 8347
RTN                  ; 8348
LD  2   192          ; 8349
LD  0   0            ; 8350
ST  2   192          ; 8351
RTN                  ; 8352
LDF 8349             ; 8353
RTN                  ; 8354
LD  2   193          ; 8355
RTN                  ; 8356
LDF 8355             ; 8357
RTN                  ; 8358
LD  2   193          ; 8359
LD  0   0            ; 8360
ST  2   193          ; 8361
RTN                  ; 8362
LDF 8359             ; 8363
RTN                  ; 8364
LD  2   194          ; 8365
RTN                  ; 8366
LDF 8365             ; 8367
RTN                  ; 8368
LD  2   194          ; 8369
LD  0   0            ; 8370
ST  2   194          ; 8371
RTN                  ; 8372
LDF 8369             ; 8373
RTN                  ; 8374
LD  2   195          ; 8375
RTN                  ; 8376
LDF 8375             ; 8377
RTN                  ; 8378
LD  2   195          ; 8379
LD  0   0            ; 8380
ST  2   195          ; 8381
RTN                  ; 8382
LDF 8379             ; 8383
RTN                  ; 8384
LD  2   196          ; 8385
RTN                  ; 8386
LDF 8385             ; 8387
RTN                  ; 8388
LD  2   196          ; 8389
LD  0   0            ; 8390
ST  2   196          ; 8391
RTN                  ; 8392
LDF 8389             ; 8393
RTN                  ; 8394
LD  2   197          ; 8395
RTN                  ; 8396
LDF 8395             ; 8397
RTN                  ; 8398
LD  2   197          ; 8399
LD  0   0            ; 8400
ST  2   197          ; 8401
RTN                  ; 8402
LDF 8399             ; 8403
RTN                  ; 8404
LD  2   198          ; 8405
RTN                  ; 8406
LDF 8405             ; 8407
RTN                  ; 8408
LD  2   198          ; 8409
LD  0   0            ; 8410
ST  2   198          ; 8411
RTN                  ; 8412
LDF 8409             ; 8413
RTN                  ; 8414
LD  2   199          ; 8415
RTN                  ; 8416
LDF 8415             ; 8417
RTN                  ; 8418
LD  2   199          ; 8419
LD  0   0            ; 8420
ST  2   199          ; 8421
RTN                  ; 8422
LDF 8419             ; 8423
RTN                  ; 8424
LD  2   200          ; 8425
RTN                  ; 8426
LDF 8425             ; 8427
RTN                  ; 8428
LD  2   200          ; 8429
LD  0   0            ; 8430
ST  2   200          ; 8431
RTN                  ; 8432
LDF 8429             ; 8433
RTN                  ; 8434
LD  2   201          ; 8435
RTN                  ; 8436
LDF 8435             ; 8437
RTN                  ; 8438
LD  2   201          ; 8439
LD  0   0            ; 8440
ST  2   201          ; 8441
RTN                  ; 8442
LDF 8439             ; 8443
RTN                  ; 8444
LD  2   202          ; 8445
RTN                  ; 8446
LDF 8445             ; 8447
RTN                  ; 8448
LD  2   202          ; 8449
LD  0   0            ; 8450
ST  2   202          ; 8451
RTN                  ; 8452
LDF 8449             ; 8453
RTN                  ; 8454
LD  2   203          ; 8455
RTN                  ; 8456
LDF 8455             ; 8457
RTN                  ; 8458
LD  2   203          ; 8459
LD  0   0            ; 8460
ST  2   203          ; 8461
RTN                  ; 8462
LDF 8459             ; 8463
RTN                  ; 8464
LD  2   204          ; 8465
RTN                  ; 8466
LDF 8465             ; 8467
RTN                  ; 8468
LD  2   204          ; 8469
LD  0   0            ; 8470
ST  2   204          ; 8471
RTN                  ; 8472
LDF 8469             ; 8473
RTN                  ; 8474
LD  2   205          ; 8475
RTN                  ; 8476
LDF 8475             ; 8477
RTN                  ; 8478
LD  2   205          ; 8479
LD  0   0            ; 8480
ST  2   205          ; 8481
RTN                  ; 8482
LDF 8479             ; 8483
RTN                  ; 8484
LD  2   206          ; 8485
RTN                  ; 8486
LDF 8485             ; 8487
RTN                  ; 8488
LD  2   206          ; 8489
LD  0   0            ; 8490
ST  2   206          ; 8491
RTN                  ; 8492
LDF 8489             ; 8493
RTN                  ; 8494
LD  2   207          ; 8495
RTN                  ; 8496
LDF 8495             ; 8497
RTN                  ; 8498
LD  2   207          ; 8499
LD  0   0            ; 8500
ST  2   207          ; 8501
RTN                  ; 8502
LDF 8499             ; 8503
RTN                  ; 8504
LD  2   208          ; 8505
RTN                  ; 8506
LDF 8505             ; 8507
RTN                  ; 8508
LD  2   208          ; 8509
LD  0   0            ; 8510
ST  2   208          ; 8511
RTN                  ; 8512
LDF 8509             ; 8513
RTN                  ; 8514
LD  2   209          ; 8515
RTN                  ; 8516
LDF 8515             ; 8517
RTN                  ; 8518
LD  2   209          ; 8519
LD  0   0            ; 8520
ST  2   209          ; 8521
RTN                  ; 8522
LDF 8519             ; 8523
RTN                  ; 8524
LD  2   210          ; 8525
RTN                  ; 8526
LDF 8525             ; 8527
RTN                  ; 8528
LD  2   210          ; 8529
LD  0   0            ; 8530
ST  2   210          ; 8531
RTN                  ; 8532
LDF 8529             ; 8533
RTN                  ; 8534
LD  2   211          ; 8535
RTN                  ; 8536
LDF 8535             ; 8537
RTN                  ; 8538
LD  2   211          ; 8539
LD  0   0            ; 8540
ST  2   211          ; 8541
RTN                  ; 8542
LDF 8539             ; 8543
RTN                  ; 8544
LD  2   212          ; 8545
RTN                  ; 8546
LDF 8545             ; 8547
RTN                  ; 8548
LD  2   212          ; 8549
LD  0   0            ; 8550
ST  2   212          ; 8551
RTN                  ; 8552
LDF 8549             ; 8553
RTN                  ; 8554
LD  2   213          ; 8555
RTN                  ; 8556
LDF 8555             ; 8557
RTN                  ; 8558
LD  2   213          ; 8559
LD  0   0            ; 8560
ST  2   213          ; 8561
RTN                  ; 8562
LDF 8559             ; 8563
RTN                  ; 8564
LD  2   214          ; 8565
RTN                  ; 8566
LDF 8565             ; 8567
RTN                  ; 8568
LD  2   214          ; 8569
LD  0   0            ; 8570
ST  2   214          ; 8571
RTN                  ; 8572
LDF 8569             ; 8573
RTN                  ; 8574
LD  2   215          ; 8575
RTN                  ; 8576
LDF 8575             ; 8577
RTN                  ; 8578
LD  2   215          ; 8579
LD  0   0            ; 8580
ST  2   215          ; 8581
RTN                  ; 8582
LDF 8579             ; 8583
RTN                  ; 8584
LD  2   216          ; 8585
RTN                  ; 8586
LDF 8585             ; 8587
RTN                  ; 8588
LD  2   216          ; 8589
LD  0   0            ; 8590
ST  2   216          ; 8591
RTN                  ; 8592
LDF 8589             ; 8593
RTN                  ; 8594
LD  2   217          ; 8595
RTN                  ; 8596
LDF 8595             ; 8597
RTN                  ; 8598
LD  2   217          ; 8599
LD  0   0            ; 8600
ST  2   217          ; 8601
RTN                  ; 8602
LDF 8599             ; 8603
RTN                  ; 8604
LD  2   218          ; 8605
RTN                  ; 8606
LDF 8605             ; 8607
RTN                  ; 8608
LD  2   218          ; 8609
LD  0   0            ; 8610
ST  2   218          ; 8611
RTN                  ; 8612
LDF 8609             ; 8613
RTN                  ; 8614
LD  2   219          ; 8615
RTN                  ; 8616
LDF 8615             ; 8617
RTN                  ; 8618
LD  2   219          ; 8619
LD  0   0            ; 8620
ST  2   219          ; 8621
RTN                  ; 8622
LDF 8619             ; 8623
RTN                  ; 8624
LD  2   220          ; 8625
RTN                  ; 8626
LDF 8625             ; 8627
RTN                  ; 8628
LD  2   220          ; 8629
LD  0   0            ; 8630
ST  2   220          ; 8631
RTN                  ; 8632
LDF 8629             ; 8633
RTN                  ; 8634
LD  2   221          ; 8635
RTN                  ; 8636
LDF 8635             ; 8637
RTN                  ; 8638
LD  2   221          ; 8639
LD  0   0            ; 8640
ST  2   221          ; 8641
RTN                  ; 8642
LDF 8639             ; 8643
RTN                  ; 8644
LD  2   222          ; 8645
RTN                  ; 8646
LDF 8645             ; 8647
RTN                  ; 8648
LD  2   222          ; 8649
LD  0   0            ; 8650
ST  2   222          ; 8651
RTN                  ; 8652
LDF 8649             ; 8653
RTN                  ; 8654
LD  2   223          ; 8655
RTN                  ; 8656
LDF 8655             ; 8657
RTN                  ; 8658
LD  2   223          ; 8659
LD  0   0            ; 8660
ST  2   223          ; 8661
RTN                  ; 8662
LDF 8659             ; 8663
RTN                  ; 8664
LD  2   224          ; 8665
RTN                  ; 8666
LDF 8665             ; 8667
RTN                  ; 8668
LD  2   224          ; 8669
LD  0   0            ; 8670
ST  2   224          ; 8671
RTN                  ; 8672
LDF 8669             ; 8673
RTN                  ; 8674
LD  2   225          ; 8675
RTN                  ; 8676
LDF 8675             ; 8677
RTN                  ; 8678
LD  2   225          ; 8679
LD  0   0            ; 8680
ST  2   225          ; 8681
RTN                  ; 8682
LDF 8679             ; 8683
RTN                  ; 8684
LD  2   226          ; 8685
RTN                  ; 8686
LDF 8685             ; 8687
RTN                  ; 8688
LD  2   226          ; 8689
LD  0   0            ; 8690
ST  2   226          ; 8691
RTN                  ; 8692
LDF 8689             ; 8693
RTN                  ; 8694
LD  2   227          ; 8695
RTN                  ; 8696
LDF 8695             ; 8697
RTN                  ; 8698
LD  2   227          ; 8699
LD  0   0            ; 8700
ST  2   227          ; 8701
RTN                  ; 8702
LDF 8699             ; 8703
RTN                  ; 8704
LD  2   228          ; 8705
RTN                  ; 8706
LDF 8705             ; 8707
RTN                  ; 8708
LD  2   228          ; 8709
LD  0   0            ; 8710
ST  2   228          ; 8711
RTN                  ; 8712
LDF 8709             ; 8713
RTN                  ; 8714
LD  2   229          ; 8715
RTN                  ; 8716
LDF 8715             ; 8717
RTN                  ; 8718
LD  2   229          ; 8719
LD  0   0            ; 8720
ST  2   229          ; 8721
RTN                  ; 8722
LDF 8719             ; 8723
RTN                  ; 8724
LD  2   230          ; 8725
RTN                  ; 8726
LDF 8725             ; 8727
RTN                  ; 8728
LD  2   230          ; 8729
LD  0   0            ; 8730
ST  2   230          ; 8731
RTN                  ; 8732
LDF 8729             ; 8733
RTN                  ; 8734
LD  2   231          ; 8735
RTN                  ; 8736
LDF 8735             ; 8737
RTN                  ; 8738
LD  2   231          ; 8739
LD  0   0            ; 8740
ST  2   231          ; 8741
RTN                  ; 8742
LDF 8739             ; 8743
RTN                  ; 8744
LD  2   232          ; 8745
RTN                  ; 8746
LDF 8745             ; 8747
RTN                  ; 8748
LD  2   232          ; 8749
LD  0   0            ; 8750
ST  2   232          ; 8751
RTN                  ; 8752
LDF 8749             ; 8753
RTN                  ; 8754
LD  2   233          ; 8755
RTN                  ; 8756
LDF 8755             ; 8757
RTN                  ; 8758
LD  2   233          ; 8759
LD  0   0            ; 8760
ST  2   233          ; 8761
RTN                  ; 8762
LDF 8759             ; 8763
RTN                  ; 8764
LD  2   234          ; 8765
RTN                  ; 8766
LDF 8765             ; 8767
RTN                  ; 8768
LD  2   234          ; 8769
LD  0   0            ; 8770
ST  2   234          ; 8771
RTN                  ; 8772
LDF 8769             ; 8773
RTN                  ; 8774
LD  2   235          ; 8775
RTN                  ; 8776
LDF 8775             ; 8777
RTN                  ; 8778
LD  2   235          ; 8779
LD  0   0            ; 8780
ST  2   235          ; 8781
RTN                  ; 8782
LDF 8779             ; 8783
RTN                  ; 8784
LD  2   236          ; 8785
RTN                  ; 8786
LDF 8785             ; 8787
RTN                  ; 8788
LD  2   236          ; 8789
LD  0   0            ; 8790
ST  2   236          ; 8791
RTN                  ; 8792
LDF 8789             ; 8793
RTN                  ; 8794
LD  2   237          ; 8795
RTN                  ; 8796
LDF 8795             ; 8797
RTN                  ; 8798
LD  2   237          ; 8799
LD  0   0            ; 8800
ST  2   237          ; 8801
RTN                  ; 8802
LDF 8799             ; 8803
RTN                  ; 8804
LD  2   238          ; 8805
RTN                  ; 8806
LDF 8805             ; 8807
RTN                  ; 8808
LD  2   238          ; 8809
LD  0   0            ; 8810
ST  2   238          ; 8811
RTN                  ; 8812
LDF 8809             ; 8813
RTN                  ; 8814
LD  2   239          ; 8815
RTN                  ; 8816
LDF 8815             ; 8817
RTN                  ; 8818
LD  2   239          ; 8819
LD  0   0            ; 8820
ST  2   239          ; 8821
RTN                  ; 8822
LDF 8819             ; 8823
RTN                  ; 8824
LD  2   240          ; 8825
RTN                  ; 8826
LDF 8825             ; 8827
RTN                  ; 8828
LD  2   240          ; 8829
LD  0   0            ; 8830
ST  2   240          ; 8831
RTN                  ; 8832
LDF 8829             ; 8833
RTN                  ; 8834
LD  2   241          ; 8835
RTN                  ; 8836
LDF 8835             ; 8837
RTN                  ; 8838
LD  2   241          ; 8839
LD  0   0            ; 8840
ST  2   241          ; 8841
RTN                  ; 8842
LDF 8839             ; 8843
RTN                  ; 8844
LD  2   242          ; 8845
RTN                  ; 8846
LDF 8845             ; 8847
RTN                  ; 8848
LD  2   242          ; 8849
LD  0   0            ; 8850
ST  2   242          ; 8851
RTN                  ; 8852
LDF 8849             ; 8853
RTN                  ; 8854
LD  2   243          ; 8855
RTN                  ; 8856
LDF 8855             ; 8857
RTN                  ; 8858
LD  2   243          ; 8859
LD  0   0            ; 8860
ST  2   243          ; 8861
RTN                  ; 8862
LDF 8859             ; 8863
RTN                  ; 8864
LD  2   244          ; 8865
RTN                  ; 8866
LDF 8865             ; 8867
RTN                  ; 8868
LD  2   244          ; 8869
LD  0   0            ; 8870
ST  2   244          ; 8871
RTN                  ; 8872
LDF 8869             ; 8873
RTN                  ; 8874
LD  2   245          ; 8875
RTN                  ; 8876
LDF 8875             ; 8877
RTN                  ; 8878
LD  2   245          ; 8879
LD  0   0            ; 8880
ST  2   245          ; 8881
RTN                  ; 8882
LDF 8879             ; 8883
RTN                  ; 8884
LD  2   246          ; 8885
RTN                  ; 8886
LDF 8885             ; 8887
RTN                  ; 8888
LD  2   246          ; 8889
LD  0   0            ; 8890
ST  2   246          ; 8891
RTN                  ; 8892
LDF 8889             ; 8893
RTN                  ; 8894
LD  2   247          ; 8895
RTN                  ; 8896
LDF 8895             ; 8897
RTN                  ; 8898
LD  2   247          ; 8899
LD  0   0            ; 8900
ST  2   247          ; 8901
RTN                  ; 8902
LDF 8899             ; 8903
RTN                  ; 8904
LD  2   248          ; 8905
RTN                  ; 8906
LDF 8905             ; 8907
RTN                  ; 8908
LD  2   248          ; 8909
LD  0   0            ; 8910
ST  2   248          ; 8911
RTN                  ; 8912
LDF 8909             ; 8913
RTN                  ; 8914
LD  2   249          ; 8915
RTN                  ; 8916
LDF 8915             ; 8917
RTN                  ; 8918
LD  2   249          ; 8919
LD  0   0            ; 8920
ST  2   249          ; 8921
RTN                  ; 8922
LDF 8919             ; 8923
RTN                  ; 8924
LD  2   250          ; 8925
RTN                  ; 8926
LDF 8925             ; 8927
RTN                  ; 8928
LD  2   250          ; 8929
LD  0   0            ; 8930
ST  2   250          ; 8931
RTN                  ; 8932
LDF 8929             ; 8933
RTN                  ; 8934
LD  2   251          ; 8935
RTN                  ; 8936
LDF 8935             ; 8937
RTN                  ; 8938
LD  2   251          ; 8939
LD  0   0            ; 8940
ST  2   251          ; 8941
RTN                  ; 8942
LDF 8939             ; 8943
RTN                  ; 8944
LD  2   252          ; 8945
RTN                  ; 8946
LDF 8945             ; 8947
RTN                  ; 8948
LD  2   252          ; 8949
LD  0   0            ; 8950
ST  2   252          ; 8951
RTN                  ; 8952
LDF 8949             ; 8953
RTN                  ; 8954
LD  2   253          ; 8955
RTN                  ; 8956
LDF 8955             ; 8957
RTN                  ; 8958
LD  2   253          ; 8959
LD  0   0            ; 8960
ST  2   253          ; 8961
RTN                  ; 8962
LDF 8959             ; 8963
RTN                  ; 8964
LD  2   254          ; 8965
RTN                  ; 8966
LDF 8965             ; 8967
RTN                  ; 8968
LD  2   254          ; 8969
LD  0   0            ; 8970
ST  2   254          ; 8971
RTN                  ; 8972
LDF 8969             ; 8973
RTN                  ; 8974
LD  2   255          ; 8975
RTN                  ; 8976
LDF 8975             ; 8977
RTN                  ; 8978
LD  2   255          ; 8979
LD  0   0            ; 8980
ST  2   255          ; 8981
RTN                  ; 8982
LDF 8979             ; 8983
RTN                  ; 8984
LDC 0               ; generated from native: array_1 ; 8985
LDF 8989             ; 8986
AP 1                 ; 8987
RTN                  ; 8988
LDF  8991            ; 8989
RTN                  ; 8990
LD  0   0            ; 8991
LDC 100              ; 8992
CEQ                  ; 8993
TSEL    8995 9001    ; 8994
LD  0   1            ; 8995
LDC 0                ; 8996
CEQ                  ; 8997
TSEL    9009 8999    ; 8998
LDC  0               ; 8999
RTN                  ; 9000
LD  0   1            ; 9001
LDC 0                ; 9002
CEQ                  ; 9003
TSEL    9015 9005    ; 9004
LDC  0               ; 9005
RTN                  ; 9006
LD  2   0            ; 9007
RTN                  ; 9008
LDF 9007             ; 9009
RTN                  ; 9010
LD  2   0            ; 9011
LD  0   0            ; 9012
ST  2   0            ; 9013
RTN                  ; 9014
LDF 9011             ; 9015
RTN                  ; 9016
LDC 0               ; generated from native: sample_map ; 9017
LDC 0                ; 9018
LDC 0                ; 9019
LDC 0                ; 9020
LDC 0                ; 9021
LDC 0                ; 9022
LDC 0                ; 9023
LDC 0                ; 9024
LDC 0                ; 9025
LDC 0                ; 9026
LDC 0                ; 9027
LDC 0                ; 9028
LDC 0                ; 9029
LDC 0                ; 9030
LDC 0                ; 9031
LDC 0                ; 9032
LDC 0                ; 9033
LDC 0                ; 9034
LDC 0                ; 9035
LDC 0                ; 9036
LDC 0                ; 9037
LDC 0                ; 9038
LDC 0                ; 9039
LDC 0                ; 9040
CONS                 ; 9041
CONS                 ; 9042
CONS                 ; 9043
CONS                 ; 9044
CONS                 ; 9045
CONS                 ; 9046
CONS                 ; 9047
CONS                 ; 9048
CONS                 ; 9049
CONS                 ; 9050
CONS                 ; 9051
CONS                 ; 9052
CONS                 ; 9053
CONS                 ; 9054
CONS                 ; 9055
CONS                 ; 9056
CONS                 ; 9057
CONS                 ; 9058
CONS                 ; 9059
CONS                 ; 9060
CONS                 ; 9061
CONS                 ; 9062
CONS                 ; 9063
LDC 0                ; 9064
LDC 2                ; 9065
LDC 2                ; 9066
LDC 2                ; 9067
LDC 2                ; 9068
LDC 2                ; 9069
LDC 2                ; 9070
LDC 2                ; 9071
LDC 2                ; 9072
LDC 2                ; 9073
LDC 2                ; 9074
LDC 0                ; 9075
LDC 2                ; 9076
LDC 2                ; 9077
LDC 2                ; 9078
LDC 2                ; 9079
LDC 2                ; 9080
LDC 2                ; 9081
LDC 2                ; 9082
LDC 2                ; 9083
LDC 2                ; 9084
LDC 2                ; 9085
LDC 0                ; 9086
LDC 0                ; 9087
CONS                 ; 9088
CONS                 ; 9089
CONS                 ; 9090
CONS                 ; 9091
CONS                 ; 9092
CONS                 ; 9093
CONS                 ; 9094
CONS                 ; 9095
CONS                 ; 9096
CONS                 ; 9097
CONS                 ; 9098
CONS                 ; 9099
CONS                 ; 9100
CONS                 ; 9101
CONS                 ; 9102
CONS                 ; 9103
CONS                 ; 9104
CONS                 ; 9105
CONS                 ; 9106
CONS                 ; 9107
CONS                 ; 9108
CONS                 ; 9109
CONS                 ; 9110
LDC 0                ; 9111
LDC 2                ; 9112
LDC 0                ; 9113
LDC 0                ; 9114
LDC 0                ; 9115
LDC 2                ; 9116
LDC 0                ; 9117
LDC 0                ; 9118
LDC 0                ; 9119
LDC 0                ; 9120
LDC 2                ; 9121
LDC 0                ; 9122
LDC 2                ; 9123
LDC 0                ; 9124
LDC 0                ; 9125
LDC 0                ; 9126
LDC 0                ; 9127
LDC 2                ; 9128
LDC 0                ; 9129
LDC 0                ; 9130
LDC 0                ; 9131
LDC 2                ; 9132
LDC 0                ; 9133
LDC 0                ; 9134
CONS                 ; 9135
CONS                 ; 9136
CONS                 ; 9137
CONS                 ; 9138
CONS                 ; 9139
CONS                 ; 9140
CONS                 ; 9141
CONS                 ; 9142
CONS                 ; 9143
CONS                 ; 9144
CONS                 ; 9145
CONS                 ; 9146
CONS                 ; 9147
CONS                 ; 9148
CONS                 ; 9149
CONS                 ; 9150
CONS                 ; 9151
CONS                 ; 9152
CONS                 ; 9153
CONS                 ; 9154
CONS                 ; 9155
CONS                 ; 9156
CONS                 ; 9157
LDC 0                ; 9158
LDC 3                ; 9159
LDC 0                ; 9160
LDC 0                ; 9161
LDC 0                ; 9162
LDC 2                ; 9163
LDC 0                ; 9164
LDC 0                ; 9165
LDC 0                ; 9166
LDC 0                ; 9167
LDC 2                ; 9168
LDC 0                ; 9169
LDC 2                ; 9170
LDC 0                ; 9171
LDC 0                ; 9172
LDC 0                ; 9173
LDC 0                ; 9174
LDC 2                ; 9175
LDC 0                ; 9176
LDC 0                ; 9177
LDC 0                ; 9178
LDC 3                ; 9179
LDC 0                ; 9180
LDC 0                ; 9181
CONS                 ; 9182
CONS                 ; 9183
CONS                 ; 9184
CONS                 ; 9185
CONS                 ; 9186
CONS                 ; 9187
CONS                 ; 9188
CONS                 ; 9189
CONS                 ; 9190
CONS                 ; 9191
CONS                 ; 9192
CONS                 ; 9193
CONS                 ; 9194
CONS                 ; 9195
CONS                 ; 9196
CONS                 ; 9197
CONS                 ; 9198
CONS                 ; 9199
CONS                 ; 9200
CONS                 ; 9201
CONS                 ; 9202
CONS                 ; 9203
CONS                 ; 9204
LDC 0                ; 9205
LDC 2                ; 9206
LDC 2                ; 9207
LDC 2                ; 9208
LDC 2                ; 9209
LDC 2                ; 9210
LDC 2                ; 9211
LDC 2                ; 9212
LDC 2                ; 9213
LDC 2                ; 9214
LDC 2                ; 9215
LDC 2                ; 9216
LDC 2                ; 9217
LDC 2                ; 9218
LDC 2                ; 9219
LDC 2                ; 9220
LDC 2                ; 9221
LDC 2                ; 9222
LDC 2                ; 9223
LDC 2                ; 9224
LDC 2                ; 9225
LDC 2                ; 9226
LDC 0                ; 9227
LDC 0                ; 9228
CONS                 ; 9229
CONS                 ; 9230
CONS                 ; 9231
CONS                 ; 9232
CONS                 ; 9233
CONS                 ; 9234
CONS                 ; 9235
CONS                 ; 9236
CONS                 ; 9237
CONS                 ; 9238
CONS                 ; 9239
CONS                 ; 9240
CONS                 ; 9241
CONS                 ; 9242
CONS                 ; 9243
CONS                 ; 9244
CONS                 ; 9245
CONS                 ; 9246
CONS                 ; 9247
CONS                 ; 9248
CONS                 ; 9249
CONS                 ; 9250
CONS                 ; 9251
LDC 0                ; 9252
LDC 2                ; 9253
LDC 0                ; 9254
LDC 0                ; 9255
LDC 0                ; 9256
LDC 2                ; 9257
LDC 0                ; 9258
LDC 2                ; 9259
LDC 0                ; 9260
LDC 0                ; 9261
LDC 0                ; 9262
LDC 0                ; 9263
LDC 0                ; 9264
LDC 0                ; 9265
LDC 0                ; 9266
LDC 2                ; 9267
LDC 0                ; 9268
LDC 2                ; 9269
LDC 0                ; 9270
LDC 0                ; 9271
LDC 0                ; 9272
LDC 2                ; 9273
LDC 0                ; 9274
LDC 0                ; 9275
CONS                 ; 9276
CONS                 ; 9277
CONS                 ; 9278
CONS                 ; 9279
CONS                 ; 9280
CONS                 ; 9281
CONS                 ; 9282
CONS                 ; 9283
CONS                 ; 9284
CONS                 ; 9285
CONS                 ; 9286
CONS                 ; 9287
CONS                 ; 9288
CONS                 ; 9289
CONS                 ; 9290
CONS                 ; 9291
CONS                 ; 9292
CONS                 ; 9293
CONS                 ; 9294
CONS                 ; 9295
CONS                 ; 9296
CONS                 ; 9297
CONS                 ; 9298
LDC 0                ; 9299
LDC 2                ; 9300
LDC 2                ; 9301
LDC 2                ; 9302
LDC 2                ; 9303
LDC 2                ; 9304
LDC 0                ; 9305
LDC 2                ; 9306
LDC 2                ; 9307
LDC 2                ; 9308
LDC 2                ; 9309
LDC 0                ; 9310
LDC 2                ; 9311
LDC 2                ; 9312
LDC 2                ; 9313
LDC 2                ; 9314
LDC 0                ; 9315
LDC 2                ; 9316
LDC 2                ; 9317
LDC 2                ; 9318
LDC 2                ; 9319
LDC 2                ; 9320
LDC 0                ; 9321
LDC 0                ; 9322
CONS                 ; 9323
CONS                 ; 9324
CONS                 ; 9325
CONS                 ; 9326
CONS                 ; 9327
CONS                 ; 9328
CONS                 ; 9329
CONS                 ; 9330
CONS                 ; 9331
CONS                 ; 9332
CONS                 ; 9333
CONS                 ; 9334
CONS                 ; 9335
CONS                 ; 9336
CONS                 ; 9337
CONS                 ; 9338
CONS                 ; 9339
CONS                 ; 9340
CONS                 ; 9341
CONS                 ; 9342
CONS                 ; 9343
CONS                 ; 9344
CONS                 ; 9345
LDC 0                ; 9346
LDC 0                ; 9347
LDC 0                ; 9348
LDC 0                ; 9349
LDC 0                ; 9350
LDC 2                ; 9351
LDC 0                ; 9352
LDC 0                ; 9353
LDC 0                ; 9354
LDC 0                ; 9355
LDC 1                ; 9356
LDC 0                ; 9357
LDC 1                ; 9358
LDC 0                ; 9359
LDC 0                ; 9360
LDC 0                ; 9361
LDC 0                ; 9362
LDC 2                ; 9363
LDC 0                ; 9364
LDC 0                ; 9365
LDC 0                ; 9366
LDC 0                ; 9367
LDC 0                ; 9368
LDC 0                ; 9369
CONS                 ; 9370
CONS                 ; 9371
CONS                 ; 9372
CONS                 ; 9373
CONS                 ; 9374
CONS                 ; 9375
CONS                 ; 9376
CONS                 ; 9377
CONS                 ; 9378
CONS                 ; 9379
CONS                 ; 9380
CONS                 ; 9381
CONS                 ; 9382
CONS                 ; 9383
CONS                 ; 9384
CONS                 ; 9385
CONS                 ; 9386
CONS                 ; 9387
CONS                 ; 9388
CONS                 ; 9389
CONS                 ; 9390
CONS                 ; 9391
CONS                 ; 9392
LDC 0                ; 9393
LDC 1                ; 9394
LDC 1                ; 9395
LDC 1                ; 9396
LDC 0                ; 9397
LDC 2                ; 9398
LDC 0                ; 9399
LDC 1                ; 9400
LDC 1                ; 9401
LDC 1                ; 9402
LDC 1                ; 9403
LDC 6                ; 9404
LDC 1                ; 9405
LDC 1                ; 9406
LDC 1                ; 9407
LDC 1                ; 9408
LDC 0                ; 9409
LDC 2                ; 9410
LDC 0                ; 9411
LDC 1                ; 9412
LDC 1                ; 9413
LDC 1                ; 9414
LDC 0                ; 9415
LDC 0                ; 9416
CONS                 ; 9417
CONS                 ; 9418
CONS                 ; 9419
CONS                 ; 9420
CONS                 ; 9421
CONS                 ; 9422
CONS                 ; 9423
CONS                 ; 9424
CONS                 ; 9425
CONS                 ; 9426
CONS                 ; 9427
CONS                 ; 9428
CONS                 ; 9429
CONS                 ; 9430
CONS                 ; 9431
CONS                 ; 9432
CONS                 ; 9433
CONS                 ; 9434
CONS                 ; 9435
CONS                 ; 9436
CONS                 ; 9437
CONS                 ; 9438
CONS                 ; 9439
LDC 0                ; 9440
LDC 0                ; 9441
LDC 0                ; 9442
LDC 0                ; 9443
LDC 0                ; 9444
LDC 2                ; 9445
LDC 0                ; 9446
LDC 1                ; 9447
LDC 0                ; 9448
LDC 0                ; 9449
LDC 0                ; 9450
LDC 1                ; 9451
LDC 0                ; 9452
LDC 0                ; 9453
LDC 0                ; 9454
LDC 1                ; 9455
LDC 0                ; 9456
LDC 2                ; 9457
LDC 0                ; 9458
LDC 0                ; 9459
LDC 0                ; 9460
LDC 0                ; 9461
LDC 0                ; 9462
LDC 0                ; 9463
CONS                 ; 9464
CONS                 ; 9465
CONS                 ; 9466
CONS                 ; 9467
CONS                 ; 9468
CONS                 ; 9469
CONS                 ; 9470
CONS                 ; 9471
CONS                 ; 9472
CONS                 ; 9473
CONS                 ; 9474
CONS                 ; 9475
CONS                 ; 9476
CONS                 ; 9477
CONS                 ; 9478
CONS                 ; 9479
CONS                 ; 9480
CONS                 ; 9481
CONS                 ; 9482
CONS                 ; 9483
CONS                 ; 9484
CONS                 ; 9485
CONS                 ; 9486
LDC 0                ; 9487
LDC 1                ; 9488
LDC 1                ; 9489
LDC 1                ; 9490
LDC 1                ; 9491
LDC 2                ; 9492
LDC 1                ; 9493
LDC 1                ; 9494
LDC 0                ; 9495
LDC 1                ; 9496
LDC 6                ; 9497
LDC 6                ; 9498
LDC 6                ; 9499
LDC 1                ; 9500
LDC 0                ; 9501
LDC 1                ; 9502
LDC 1                ; 9503
LDC 2                ; 9504
LDC 1                ; 9505
LDC 1                ; 9506
LDC 1                ; 9507
LDC 1                ; 9508
LDC 0                ; 9509
LDC 0                ; 9510
CONS                 ; 9511
CONS                 ; 9512
CONS                 ; 9513
CONS                 ; 9514
CONS                 ; 9515
CONS                 ; 9516
CONS                 ; 9517
CONS                 ; 9518
CONS                 ; 9519
CONS                 ; 9520
CONS                 ; 9521
CONS                 ; 9522
CONS                 ; 9523
CONS                 ; 9524
CONS                 ; 9525
CONS                 ; 9526
CONS                 ; 9527
CONS                 ; 9528
CONS                 ; 9529
CONS                 ; 9530
CONS                 ; 9531
CONS                 ; 9532
CONS                 ; 9533
LDC 0                ; 9534
LDC 0                ; 9535
LDC 0                ; 9536
LDC 0                ; 9537
LDC 0                ; 9538
LDC 2                ; 9539
LDC 0                ; 9540
LDC 1                ; 9541
LDC 0                ; 9542
LDC 0                ; 9543
LDC 0                ; 9544
LDC 0                ; 9545
LDC 0                ; 9546
LDC 0                ; 9547
LDC 0                ; 9548
LDC 1                ; 9549
LDC 0                ; 9550
LDC 2                ; 9551
LDC 0                ; 9552
LDC 0                ; 9553
LDC 0                ; 9554
LDC 0                ; 9555
LDC 0                ; 9556
LDC 0                ; 9557
CONS                 ; 9558
CONS                 ; 9559
CONS                 ; 9560
CONS                 ; 9561
CONS                 ; 9562
CONS                 ; 9563
CONS                 ; 9564
CONS                 ; 9565
CONS                 ; 9566
CONS                 ; 9567
CONS                 ; 9568
CONS                 ; 9569
CONS                 ; 9570
CONS                 ; 9571
CONS                 ; 9572
CONS                 ; 9573
CONS                 ; 9574
CONS                 ; 9575
CONS                 ; 9576
CONS                 ; 9577
CONS                 ; 9578
CONS                 ; 9579
CONS                 ; 9580
LDC 0                ; 9581
LDC 1                ; 9582
LDC 1                ; 9583
LDC 1                ; 9584
LDC 0                ; 9585
LDC 2                ; 9586
LDC 0                ; 9587
LDC 1                ; 9588
LDC 1                ; 9589
LDC 1                ; 9590
LDC 1                ; 9591
LDC 4                ; 9592
LDC 1                ; 9593
LDC 1                ; 9594
LDC 1                ; 9595
LDC 1                ; 9596
LDC 0                ; 9597
LDC 2                ; 9598
LDC 0                ; 9599
LDC 1                ; 9600
LDC 1                ; 9601
LDC 1                ; 9602
LDC 0                ; 9603
LDC 0                ; 9604
CONS                 ; 9605
CONS                 ; 9606
CONS                 ; 9607
CONS                 ; 9608
CONS                 ; 9609
CONS                 ; 9610
CONS                 ; 9611
CONS                 ; 9612
CONS                 ; 9613
CONS                 ; 9614
CONS                 ; 9615
CONS                 ; 9616
CONS                 ; 9617
CONS                 ; 9618
CONS                 ; 9619
CONS                 ; 9620
CONS                 ; 9621
CONS                 ; 9622
CONS                 ; 9623
CONS                 ; 9624
CONS                 ; 9625
CONS                 ; 9626
CONS                 ; 9627
LDC 0                ; 9628
LDC 0                ; 9629
LDC 0                ; 9630
LDC 0                ; 9631
LDC 0                ; 9632
LDC 2                ; 9633
LDC 0                ; 9634
LDC 1                ; 9635
LDC 0                ; 9636
LDC 0                ; 9637
LDC 0                ; 9638
LDC 0                ; 9639
LDC 0                ; 9640
LDC 0                ; 9641
LDC 0                ; 9642
LDC 1                ; 9643
LDC 0                ; 9644
LDC 2                ; 9645
LDC 0                ; 9646
LDC 0                ; 9647
LDC 0                ; 9648
LDC 0                ; 9649
LDC 0                ; 9650
LDC 0                ; 9651
CONS                 ; 9652
CONS                 ; 9653
CONS                 ; 9654
CONS                 ; 9655
CONS                 ; 9656
CONS                 ; 9657
CONS                 ; 9658
CONS                 ; 9659
CONS                 ; 9660
CONS                 ; 9661
CONS                 ; 9662
CONS                 ; 9663
CONS                 ; 9664
CONS                 ; 9665
CONS                 ; 9666
CONS                 ; 9667
CONS                 ; 9668
CONS                 ; 9669
CONS                 ; 9670
CONS                 ; 9671
CONS                 ; 9672
CONS                 ; 9673
CONS                 ; 9674
LDC 0                ; 9675
LDC 2                ; 9676
LDC 2                ; 9677
LDC 2                ; 9678
LDC 2                ; 9679
LDC 2                ; 9680
LDC 2                ; 9681
LDC 2                ; 9682
LDC 2                ; 9683
LDC 2                ; 9684
LDC 2                ; 9685
LDC 0                ; 9686
LDC 2                ; 9687
LDC 2                ; 9688
LDC 2                ; 9689
LDC 2                ; 9690
LDC 2                ; 9691
LDC 2                ; 9692
LDC 2                ; 9693
LDC 2                ; 9694
LDC 2                ; 9695
LDC 2                ; 9696
LDC 0                ; 9697
LDC 0                ; 9698
CONS                 ; 9699
CONS                 ; 9700
CONS                 ; 9701
CONS                 ; 9702
CONS                 ; 9703
CONS                 ; 9704
CONS                 ; 9705
CONS                 ; 9706
CONS                 ; 9707
CONS                 ; 9708
CONS                 ; 9709
CONS                 ; 9710
CONS                 ; 9711
CONS                 ; 9712
CONS                 ; 9713
CONS                 ; 9714
CONS                 ; 9715
CONS                 ; 9716
CONS                 ; 9717
CONS                 ; 9718
CONS                 ; 9719
CONS                 ; 9720
CONS                 ; 9721
LDC 0                ; 9722
LDC 2                ; 9723
LDC 0                ; 9724
LDC 0                ; 9725
LDC 0                ; 9726
LDC 2                ; 9727
LDC 0                ; 9728
LDC 0                ; 9729
LDC 0                ; 9730
LDC 0                ; 9731
LDC 2                ; 9732
LDC 0                ; 9733
LDC 2                ; 9734
LDC 0                ; 9735
LDC 0                ; 9736
LDC 0                ; 9737
LDC 0                ; 9738
LDC 2                ; 9739
LDC 0                ; 9740
LDC 0                ; 9741
LDC 0                ; 9742
LDC 2                ; 9743
LDC 0                ; 9744
LDC 0                ; 9745
CONS                 ; 9746
CONS                 ; 9747
CONS                 ; 9748
CONS                 ; 9749
CONS                 ; 9750
CONS                 ; 9751
CONS                 ; 9752
CONS                 ; 9753
CONS                 ; 9754
CONS                 ; 9755
CONS                 ; 9756
CONS                 ; 9757
CONS                 ; 9758
CONS                 ; 9759
CONS                 ; 9760
CONS                 ; 9761
CONS                 ; 9762
CONS                 ; 9763
CONS                 ; 9764
CONS                 ; 9765
CONS                 ; 9766
CONS                 ; 9767
CONS                 ; 9768
LDC 0                ; 9769
LDC 3                ; 9770
LDC 2                ; 9771
LDC 2                ; 9772
LDC 0                ; 9773
LDC 2                ; 9774
LDC 2                ; 9775
LDC 2                ; 9776
LDC 2                ; 9777
LDC 2                ; 9778
LDC 2                ; 9779
LDC 5                ; 9780
LDC 2                ; 9781
LDC 2                ; 9782
LDC 2                ; 9783
LDC 2                ; 9784
LDC 2                ; 9785
LDC 2                ; 9786
LDC 0                ; 9787
LDC 2                ; 9788
LDC 2                ; 9789
LDC 3                ; 9790
LDC 0                ; 9791
LDC 0                ; 9792
CONS                 ; 9793
CONS                 ; 9794
CONS                 ; 9795
CONS                 ; 9796
CONS                 ; 9797
CONS                 ; 9798
CONS                 ; 9799
CONS                 ; 9800
CONS                 ; 9801
CONS                 ; 9802
CONS                 ; 9803
CONS                 ; 9804
CONS                 ; 9805
CONS                 ; 9806
CONS                 ; 9807
CONS                 ; 9808
CONS                 ; 9809
CONS                 ; 9810
CONS                 ; 9811
CONS                 ; 9812
CONS                 ; 9813
CONS                 ; 9814
CONS                 ; 9815
LDC 0                ; 9816
LDC 0                ; 9817
LDC 0                ; 9818
LDC 2                ; 9819
LDC 0                ; 9820
LDC 2                ; 9821
LDC 0                ; 9822
LDC 2                ; 9823
LDC 0                ; 9824
LDC 0                ; 9825
LDC 0                ; 9826
LDC 0                ; 9827
LDC 0                ; 9828
LDC 0                ; 9829
LDC 0                ; 9830
LDC 2                ; 9831
LDC 0                ; 9832
LDC 2                ; 9833
LDC 0                ; 9834
LDC 2                ; 9835
LDC 0                ; 9836
LDC 0                ; 9837
LDC 0                ; 9838
LDC 0                ; 9839
CONS                 ; 9840
CONS                 ; 9841
CONS                 ; 9842
CONS                 ; 9843
CONS                 ; 9844
CONS                 ; 9845
CONS                 ; 9846
CONS                 ; 9847
CONS                 ; 9848
CONS                 ; 9849
CONS                 ; 9850
CONS                 ; 9851
CONS                 ; 9852
CONS                 ; 9853
CONS                 ; 9854
CONS                 ; 9855
CONS                 ; 9856
CONS                 ; 9857
CONS                 ; 9858
CONS                 ; 9859
CONS                 ; 9860
CONS                 ; 9861
CONS                 ; 9862
LDC 0                ; 9863
LDC 2                ; 9864
LDC 2                ; 9865
LDC 2                ; 9866
LDC 2                ; 9867
LDC 2                ; 9868
LDC 0                ; 9869
LDC 2                ; 9870
LDC 2                ; 9871
LDC 2                ; 9872
LDC 2                ; 9873
LDC 0                ; 9874
LDC 2                ; 9875
LDC 2                ; 9876
LDC 2                ; 9877
LDC 2                ; 9878
LDC 0                ; 9879
LDC 2                ; 9880
LDC 2                ; 9881
LDC 2                ; 9882
LDC 2                ; 9883
LDC 2                ; 9884
LDC 0                ; 9885
LDC 0                ; 9886
CONS                 ; 9887
CONS                 ; 9888
CONS                 ; 9889
CONS                 ; 9890
CONS                 ; 9891
CONS                 ; 9892
CONS                 ; 9893
CONS                 ; 9894
CONS                 ; 9895
CONS                 ; 9896
CONS                 ; 9897
CONS                 ; 9898
CONS                 ; 9899
CONS                 ; 9900
CONS                 ; 9901
CONS                 ; 9902
CONS                 ; 9903
CONS                 ; 9904
CONS                 ; 9905
CONS                 ; 9906
CONS                 ; 9907
CONS                 ; 9908
CONS                 ; 9909
LDC 0                ; 9910
LDC 2                ; 9911
LDC 0                ; 9912
LDC 0                ; 9913
LDC 0                ; 9914
LDC 0                ; 9915
LDC 0                ; 9916
LDC 0                ; 9917
LDC 0                ; 9918
LDC 0                ; 9919
LDC 2                ; 9920
LDC 0                ; 9921
LDC 2                ; 9922
LDC 0                ; 9923
LDC 0                ; 9924
LDC 0                ; 9925
LDC 0                ; 9926
LDC 0                ; 9927
LDC 0                ; 9928
LDC 0                ; 9929
LDC 0                ; 9930
LDC 2                ; 9931
LDC 0                ; 9932
LDC 0                ; 9933
CONS                 ; 9934
CONS                 ; 9935
CONS                 ; 9936
CONS                 ; 9937
CONS                 ; 9938
CONS                 ; 9939
CONS                 ; 9940
CONS                 ; 9941
CONS                 ; 9942
CONS                 ; 9943
CONS                 ; 9944
CONS                 ; 9945
CONS                 ; 9946
CONS                 ; 9947
CONS                 ; 9948
CONS                 ; 9949
CONS                 ; 9950
CONS                 ; 9951
CONS                 ; 9952
CONS                 ; 9953
CONS                 ; 9954
CONS                 ; 9955
CONS                 ; 9956
LDC 0                ; 9957
LDC 2                ; 9958
LDC 2                ; 9959
LDC 2                ; 9960
LDC 2                ; 9961
LDC 2                ; 9962
LDC 2                ; 9963
LDC 2                ; 9964
LDC 2                ; 9965
LDC 2                ; 9966
LDC 2                ; 9967
LDC 2                ; 9968
LDC 2                ; 9969
LDC 2                ; 9970
LDC 2                ; 9971
LDC 2                ; 9972
LDC 2                ; 9973
LDC 2                ; 9974
LDC 2                ; 9975
LDC 2                ; 9976
LDC 2                ; 9977
LDC 2                ; 9978
LDC 0                ; 9979
LDC 0                ; 9980
CONS                 ; 9981
CONS                 ; 9982
CONS                 ; 9983
CONS                 ; 9984
CONS                 ; 9985
CONS                 ; 9986
CONS                 ; 9987
CONS                 ; 9988
CONS                 ; 9989
CONS                 ; 9990
CONS                 ; 9991
CONS                 ; 9992
CONS                 ; 9993
CONS                 ; 9994
CONS                 ; 9995
CONS                 ; 9996
CONS                 ; 9997
CONS                 ; 9998
CONS                 ; 9999
CONS                 ; 10000
CONS                 ; 10001
CONS                 ; 10002
CONS                 ; 10003
LDC 0                ; 10004
LDC 0                ; 10005
LDC 0                ; 10006
LDC 0                ; 10007
LDC 0                ; 10008
LDC 0                ; 10009
LDC 0                ; 10010
LDC 0                ; 10011
LDC 0                ; 10012
LDC 0                ; 10013
LDC 0                ; 10014
LDC 0                ; 10015
LDC 0                ; 10016
LDC 0                ; 10017
LDC 0                ; 10018
LDC 0                ; 10019
LDC 0                ; 10020
LDC 0                ; 10021
LDC 0                ; 10022
LDC 0                ; 10023
LDC 0                ; 10024
LDC 0                ; 10025
LDC 0                ; 10026
LDC 0                ; 10027
CONS                 ; 10028
CONS                 ; 10029
CONS                 ; 10030
CONS                 ; 10031
CONS                 ; 10032
CONS                 ; 10033
CONS                 ; 10034
CONS                 ; 10035
CONS                 ; 10036
CONS                 ; 10037
CONS                 ; 10038
CONS                 ; 10039
CONS                 ; 10040
CONS                 ; 10041
CONS                 ; 10042
CONS                 ; 10043
CONS                 ; 10044
CONS                 ; 10045
CONS                 ; 10046
CONS                 ; 10047
CONS                 ; 10048
CONS                 ; 10049
CONS                 ; 10050
LDC 0                ; 10051
CONS                 ; 10052
CONS                 ; 10053
CONS                 ; 10054
CONS                 ; 10055
CONS                 ; 10056
CONS                 ; 10057
CONS                 ; 10058
CONS                 ; 10059
CONS                 ; 10060
CONS                 ; 10061
CONS                 ; 10062
CONS                 ; 10063
CONS                 ; 10064
CONS                 ; 10065
CONS                 ; 10066
CONS                 ; 10067
CONS                 ; 10068
CONS                 ; 10069
CONS                 ; 10070
CONS                 ; 10071
CONS                 ; 10072
CONS                 ; 10073
LDC 0                ; 10074
LDC 11               ; 10075
LDC 16               ; 10076
CONS                 ; 10077
LDC 2                ; 10078
LDC 3                ; 10079
LDC 0                ; 10080
CONS                 ; 10081
CONS                 ; 10082
CONS                 ; 10083
CONS                 ; 10084
LDC 0                ; 10085
LDC 11               ; 10086
LDC 8                ; 10087
CONS                 ; 10088
LDC 2                ; 10089
CONS                 ; 10090
CONS                 ; 10091
LDC 0                ; 10092
LDC 10               ; 10093
LDC 10               ; 10094
CONS                 ; 10095
LDC 2                ; 10096
CONS                 ; 10097
CONS                 ; 10098
LDC 0                ; 10099
LDC 11               ; 10100
LDC 10               ; 10101
CONS                 ; 10102
LDC 2                ; 10103
CONS                 ; 10104
CONS                 ; 10105
LDC 0                ; 10106
LDC 12               ; 10107
LDC 10               ; 10108
CONS                 ; 10109
LDC 2                ; 10110
CONS                 ; 10111
CONS                 ; 10112
LDC 0                ; 10113
CONS                 ; 10114
CONS                 ; 10115
CONS                 ; 10116
CONS                 ; 10117
LDC 0                ; 10118
CONS                 ; 10119
CONS                 ; 10120
CONS                 ; 10121
RTN                  ; 10122
LD     0 0          ;  <== lambda_1000  [x] (as expr) ; 10123
LD     1 1          ; var g ; 10124
AP     1             ; 10125
LD     1 0          ; var f ; 10126
AP     1             ; 10127
RTN                  ; 10128
LD     0 1          ;  <== lambda_1001  [b, a] (as expr) ; 10129
LD     0 0          ; var b ; 10130
LD     1 0          ; var f ; 10131
AP     2             ; 10132
RTN                  ; 10133
LD     0 0          ;  <== lambda_1002  [d] (as expr) ; 10134
LDF    226          ;  @maybeToList ; 10135
AP     1             ; 10136
RTN                  ; 10137
LD     0 0          ;  <== lambda_1003  [SortedMap<T> acc, Tuple<Integer,T> elem] (as expr) ; 10138
LD     0 1          ; var elem ; 10139
CAR                 ; generateTupleAccess total=2 pos=0 ; 10140
LD     0 1          ; var elem ; 10141
CDR                 ; generateTupleAccess total=2 pos=1 ; 10142
LDF    1308         ;  @sorted_map_assoc ; 10143
AP     3             ; 10144
RTN                  ; 10145
LD     0 0          ;  <== lambda_1004  [Integer a] (as expr) ; 10146
LD     0 0          ; var a ; 10147
LDC    2            ; just constant from code ; 10148
DIV                  ; 10149
LDC    2            ; just constant from code ; 10150
MUL                  ; 10151
CEQ                  ; 10152
SEL    10159 10161  ; IF? 68 ; 10153
LD     0 0          ; var a ; 10154
LDC    2            ; just constant from code ; 10155
DIV                  ; 10156
CONS                 ; 10157
RTN                  ; 10158
LDC    0            ; THEN: 68 ; 10159
JOIN                 ; 10160
LDC    1            ; ELSE: 68 ; 10161
JOIN                 ; 10162
LD     0 1          ;  <== lambda_1005  [Integer elem, Integer acc] (as expr) ; 10163
LDC    2            ; just constant from code ; 10164
MUL                  ; 10165
LD     0 0          ; var elem ; 10166
ADD                  ; 10167
RTN                  ; 10168
LD     0 0          ;  <== lambda_1006  [Tuple<Integer,SortedMap<Cons>> init, Cons step] (as expr) ; 10169
CAR                 ; generateTupleAccess total=2 pos=0 ; 10170
LDC    1            ; just constant from code ; 10171
ADD                  ; 10172
LD     0 0          ; var init ; 10173
CDR                 ; generateTupleAccess total=2 pos=1 ; 10174
LD     0 0          ; var init ; 10175
CAR                 ; generateTupleAccess total=2 pos=0 ; 10176
LD     0 1          ; var step ; 10177
LDF    1308         ;  @sorted_map_assoc ; 10178
AP     3             ; 10179
CONS                 ; 10180
RTN                  ; 10181
LDF    4108         ;  <== lambda_1007  [x] (as expr), ALSO: @array_256 ; 10182
AP     0             ; 10183
RTN                  ; 10184
LD     0 0          ;  <== lambda_1008  [a, b] (as expr) ; 10185
LD     0 1          ; var b ; 10186
CONS                 ; 10187
RTN                  ; 10188
LD     0 0          ;  <== lambda_1009  [Tuple<ListCons<Integer>,Function2<Integer,Integer,Function1<Integer,Integer>>> t] (as expr) ; 10189
CAR                 ; generateTupleAccess total=2 pos=0 ; 10190
LDC    0            ; just constant from code ; 10191
LDF    10990        ;  @lambda_1067 ; 10192
LDF    86           ;  @mapi ; 10193
AP     3             ; 10194
RTN                  ; 10195
LD     0 0          ;  <== lambda_1010  [row, rowy] (as expr) ; 10196
LD     0 1          ; var rowy ; 10197
LDF    4007         ;  @collectWalkableXY ; 10198
AP     2             ; 10199
LDC 0               ; local var space ; 10200
LDF    3999         ;  @my_cat_maybes ; 10201
AP     2             ; 10202
RTN                  ; 10203
LD     1 0          ;  <== lambda_1011  [Point w] (as expr) ; 10204
LD     0 0          ; var w ; 10205
CAR                 ; generateTupleAccess total=2 pos=0 ; 10206
LD     0 0          ; var w ; 10207
CDR                 ; generateTupleAccess total=2 pos=1 ; 10208
LDC 0               ; local var space ; 10209
LDC 0               ; local var space ; 10210
LDC 0               ; local var space ; 10211
LDC 0               ; local var space ; 10212
LDF    3527         ;  @isJunction ; 10213
AP     7             ; 10214
RTN                  ; 10215
LD     0 0          ;  <== lambda_1012  [Point pt] (as expr) ; 10216
LDF    3714         ;  @getPointKey ; 10217
AP     1             ; 10218
LD     0 0          ; var pt ; 10219
CONS                 ; 10220
RTN                  ; 10221
LD     1 0          ;  <== lambda_1013  [j] (as expr) ; 10222
LD     0 0          ; var j ; 10223
LD     1 8          ; var junctions ; 10224
LD     1 6          ; var junctionsList ; 10225
LD     1 1          ; var accessors ; 10226
LDC 0               ; local var space ; 10227
LDF    3645         ;  @findNeighbourJunctions ; 10228
AP     6             ; 10229
RTN                  ; 10230
LD     0 0          ;  <== lambda_1014  [ParsedEdge pe, Integer ix] (as expr) ; 10231
CAR                 ; generateTupleAccess total=8 pos=0 ; 10232
LD     0 0          ; var pe ; 10233
CDR                 ; generateTupleAccess total=8 pos=1 ; 10234
CAR                  ; 10235
LD     0 0          ; var pe ; 10236
CDR                 ; generateTupleAccess total=8 pos=2 ; 10237
CDR                  ; 10238
CAR                  ; 10239
LD     0 0          ; var pe ; 10240
CDR                 ; generateTupleAccess total=8 pos=3 ; 10241
CDR                  ; 10242
CDR                  ; 10243
CAR                  ; 10244
LD     0 0          ; var pe ; 10245
CDR                 ; generateTupleAccess total=8 pos=4 ; 10246
CDR                  ; 10247
CDR                  ; 10248
CDR                  ; 10249
CAR                  ; 10250
LD     0 1          ; var ix ; 10251
LDC    -1           ; just negative constant from code ; 10252
LD     0 0          ; var pe ; 10253
CDR                 ; generateTupleAccess total=8 pos=7 ; 10254
CDR                  ; 10255
CDR                  ; 10256
CDR                  ; 10257
CDR                  ; 10258
CDR                  ; 10259
CDR                  ; 10260
CONS                 ; 10261
CONS                 ; 10262
CONS                 ; 10263
CONS                 ; 10264
CONS                 ; 10265
CONS                 ; 10266
CONS                 ; 10267
RTN                  ; 10268
LD     0 0          ;  <== lambda_1015  [ParsedEdge pe, Integer ix] (as expr) ; 10269
CAR                 ; generateTupleAccess total=8 pos=0 ; 10270
LD     0 0          ; var pe ; 10271
CDR                 ; generateTupleAccess total=8 pos=1 ; 10272
CAR                  ; 10273
LD     0 0          ; var pe ; 10274
CDR                 ; generateTupleAccess total=8 pos=2 ; 10275
CDR                  ; 10276
CAR                  ; 10277
LD     0 0          ; var pe ; 10278
CDR                 ; generateTupleAccess total=8 pos=3 ; 10279
CDR                  ; 10280
CDR                  ; 10281
CAR                  ; 10282
LD     0 0          ; var pe ; 10283
CDR                 ; generateTupleAccess total=8 pos=4 ; 10284
CDR                  ; 10285
CDR                  ; 10286
CDR                  ; 10287
CAR                  ; 10288
LD     0 0          ; var pe ; 10289
CDR                 ; generateTupleAccess total=8 pos=5 ; 10290
CDR                  ; 10291
CDR                  ; 10292
CDR                  ; 10293
CDR                  ; 10294
CAR                  ; 10295
LD     0 0          ; var pe ; 10296
CDR                 ; generateTupleAccess total=8 pos=1 ; 10297
CAR                  ; 10298
LD     0 0          ; var pe ; 10299
CAR                 ; generateTupleAccess total=8 pos=0 ; 10300
LD     1 10         ; var allParsedEdges2 ; 10301
LDF    3985         ;  @findEdge ; 10302
AP     3             ; 10303
LDF    3991         ;  @edgeNumber ; 10304
AP     1             ; 10305
LD     0 0          ; var pe ; 10306
CDR                 ; generateTupleAccess total=8 pos=7 ; 10307
CDR                  ; 10308
CDR                  ; 10309
CDR                  ; 10310
CDR                  ; 10311
CDR                  ; 10312
CDR                  ; 10313
CONS                 ; 10314
CONS                 ; 10315
CONS                 ; 10316
CONS                 ; 10317
CONS                 ; 10318
CONS                 ; 10319
CONS                 ; 10320
RTN                  ; 10321
LD     0 0          ;  <== lambda_1016  [GhostState g, ListCons s, Integer ind] (as expr) ; 10322
CDR                 ; generateTupleAccess total=3 pos=1 ; 10323
CAR                  ; 10324
LD     0 1          ; var s ; 10325
LD     0 2          ; var ind ; 10326
CONS                 ; 10327
CONS                 ; 10328
RTN                  ; 10329
LD     0 0          ;  <== lambda_1017  [nextaistate, worldState] (as expr) ; 10330
LD     0 1          ; var worldState ; 10331
LDC 0               ; local var space ; 10332
LDC 0               ; local var space ; 10333
LDC 0               ; local var space ; 10334
LDC 0               ; local var space ; 10335
LDC 0               ; local var space ; 10336
LDC 0               ; local var space ; 10337
LDC 0               ; local var space ; 10338
LDC 0               ; local var space ; 10339
LDC 0               ; local var space ; 10340
LDC 0               ; local var space ; 10341
LDC 0               ; local var space ; 10342
LDC 0               ; local var space ; 10343
LDC 0               ; local var space ; 10344
LDF    2658         ;  @performMove ; 10345
AP     15            ; 10346
RTN                  ; 10347
LD     0 0          ;  <== lambda_1018  [Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10348
CDR                 ; generateTupleAccess total=2 pos=1 ; 10349
CAR                 ; generateTupleAccess total=2 pos=0 ; 10350
LD     1 1          ; var start ; 10351
CAR                 ; generateTupleAccess total=2 pos=0 ; 10352
CEQ                  ; 10353
LDC    1            ; for negation ; 10354
SUB                  ; 10355
LD     0 0          ; var t ; 10356
CDR                 ; generateTupleAccess total=2 pos=1 ; 10357
CDR                 ; generateTupleAccess total=2 pos=1 ; 10358
LD     1 1          ; var start ; 10359
CDR                 ; generateTupleAccess total=2 pos=1 ; 10360
CEQ                  ; 10361
LDC    1            ; for negation ; 10362
SUB                  ; 10363
ADD                  ; 10364
SEL    10367 10369  ; IF? 69 ; 10365
RTN                  ; 10366
LDC    1            ; THEN: 69 ; 10367
JOIN                 ; 10368
LDC    0            ; ELSE: 69 ; 10369
JOIN                 ; 10370
LDC    0            ;  <== lambda_1019  [Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10371
LD     0 0          ; var t ; 10372
CAR                 ; generateTupleAccess total=2 pos=0 ; 10373
AP     1             ; 10374
LDC    2            ; Named Const = CT.PILL ; 10375
CEQ                  ; 10376
SEL    10379 10381  ; IF? 70 ; 10377
RTN                  ; 10378
LDC    1            ; THEN: 70 ; 10379
JOIN                 ; 10380
LDC    0            ; ELSE: 70 ; 10381
JOIN                 ; 10382
LD     0 0          ;  <== lambda_1020  [Point p] (as expr) ; 10383
CAR                 ; generateTupleAccess total=2 pos=0 ; 10384
LD     1 1          ; var start ; 10385
CAR                 ; generateTupleAccess total=2 pos=0 ; 10386
CEQ                  ; 10387
LDC    1            ; for negation ; 10388
SUB                  ; 10389
LD     0 0          ; var p ; 10390
CDR                 ; generateTupleAccess total=2 pos=1 ; 10391
LD     1 1          ; var start ; 10392
CDR                 ; generateTupleAccess total=2 pos=1 ; 10393
CEQ                  ; 10394
LDC    1            ; for negation ; 10395
SUB                  ; 10396
ADD                  ; 10397
SEL    10400 10402  ; IF? 71 ; 10398
RTN                  ; 10399
LDC    1            ; THEN: 71 ; 10400
JOIN                 ; 10401
LDC    0            ; ELSE: 71 ; 10402
JOIN                 ; 10403
LD     1 2          ;  <== lambda_1021  [Point p] (as expr) ; 10404
LD     0 0          ; var p ; 10405
CDR                 ; generateTupleAccess total=2 pos=1 ; 10406
LD     0 0          ; var p ; 10407
CAR                 ; generateTupleAccess total=2 pos=0 ; 10408
LDF    4087         ;  @getMapItem ; 10409
AP     3             ; 10410
LDC    6            ; Named Const = CT.GHOST ; 10411
CEQ                  ; 10412
SEL    10415 10417  ; IF? 72 ; 10413
RTN                  ; 10414
LDC    1            ; THEN: 72 ; 10415
JOIN                 ; 10416
LDC    0            ; ELSE: 72 ; 10417
JOIN                 ; 10418
LDC    0            ;  <== lambda_1022  [Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10419
LD     0 0          ; var t ; 10420
CAR                 ; generateTupleAccess total=2 pos=0 ; 10421
AP     1             ; 10422
LDC    2            ; Named Const = CT.PILL ; 10423
CEQ                  ; 10424
SEL    10427 10429  ; IF? 73 ; 10425
RTN                  ; 10426
LDC    1            ; THEN: 73 ; 10427
JOIN                 ; 10428
LDC    0            ; ELSE: 73 ; 10429
JOIN                 ; 10430
LD     0 0          ;  <== lambda_1023  [Integer acc, Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10431
LDC    0            ; just constant from code ; 10432
LD     0 1          ; var t ; 10433
CAR                 ; generateTupleAccess total=2 pos=0 ; 10434
AP     1             ; 10435
LDC    2            ; Named Const = CT.PILL ; 10436
CEQ                  ; 10437
SEL    10441 10443  ; IF? 74 ; 10438
ADD                  ; 10439
RTN                  ; 10440
LDC    1            ; THEN: 74 ; 10441
JOIN                 ; 10442
LDC    0            ; ELSE: 74 ; 10443
JOIN                 ; 10444
LD     0 0          ;  <== lambda_1024  [Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10445
CDR                 ; generateTupleAccess total=2 pos=1 ; 10446
CAR                 ; generateTupleAccess total=2 pos=0 ; 10447
LD     1 1          ; var start ; 10448
CAR                 ; generateTupleAccess total=2 pos=0 ; 10449
CEQ                  ; 10450
LDC    1            ; for negation ; 10451
SUB                  ; 10452
LD     0 0          ; var t ; 10453
CDR                 ; generateTupleAccess total=2 pos=1 ; 10454
CDR                 ; generateTupleAccess total=2 pos=1 ; 10455
LD     1 1          ; var start ; 10456
CDR                 ; generateTupleAccess total=2 pos=1 ; 10457
CEQ                  ; 10458
LDC    1            ; for negation ; 10459
SUB                  ; 10460
ADD                  ; 10461
SEL    10464 10466  ; IF? 75 ; 10462
RTN                  ; 10463
LDC    1            ; THEN: 75 ; 10464
JOIN                 ; 10465
LDC    0            ; ELSE: 75 ; 10466
JOIN                 ; 10467
LD     0 0          ;  <== lambda_1025  [Integer acc, Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10468
LDC    0            ; just constant from code ; 10469
LD     0 1          ; var t ; 10470
CAR                 ; generateTupleAccess total=2 pos=0 ; 10471
AP     1             ; 10472
LDC    2            ; Named Const = CT.PILL ; 10473
CEQ                  ; 10474
SEL    10478 10480  ; IF? 76 ; 10475
ADD                  ; 10476
RTN                  ; 10477
LDC    1            ; THEN: 76 ; 10478
JOIN                 ; 10479
LDC    0            ; ELSE: 76 ; 10480
JOIN                 ; 10481
LD     1 1          ;  <== lambda_1026  [e] (as expr) ; 10482
LD     0 0          ; var e ; 10483
LDF    3875         ;  @pointInEdge ; 10484
AP     2             ; 10485
RTN                  ; 10486
LD     0 0          ;  <== lambda_1027  [Queue<ListCons<ParsedEdge>> qq, ParsedEdge e] (as expr) ; 10487
LD     0 1          ; var e ; 10488
LDC    0            ; NULL literal ; 10489
CONS                 ; 10490
LDF    407          ;  @queue_enqueue ; 10491
AP     2             ; 10492
RTN                  ; 10493
LD     0 0          ;  <== lambda_1028  [ParsedEdge e] (as expr) ; 10494
CDR                 ; generateTupleAccess total=8 pos=5 ; 10495
CDR                  ; 10496
CDR                  ; 10497
CDR                  ; 10498
CDR                  ; 10499
CAR                  ; 10500
LDC    0            ; just constant from code ; 10501
CONS                 ; 10502
RTN                  ; 10503
LD     0 0          ;  <== lambda_1029  [d] (as expr) ; 10504
LDF    299          ;  @reverse ; 10505
AP     1             ; 10506
RTN                  ; 10507
LD     0 0          ;  <== lambda_1030  [r] (as expr) ; 10508
LDC    5            ; just constant from code ; 10509
LD     0 0          ; var r ; 10510
CAR                  ; 10511
LD     1 2          ; var worldState ; 10512
CDR                 ; generateTupleAccess total=4 pos=1 ; 10513
CAR                  ; 10514
CDR                 ; generateTupleAccess total=5 pos=1 ; 10515
CAR                  ; 10516
LDC 0               ; local var space ; 10517
LDC 0               ; local var space ; 10518
LDF    2641         ;  @countMyEdgePills ; 10519
AP     4             ; 10520
MUL                  ; 10521
LD     0 0          ; var r ; 10522
CDR                  ; 10523
LDF    3313         ;  @countRoutePills ; 10524
AP     1             ; 10525
ADD                  ; 10526
LD     0 0          ; var r ; 10527
LDC 0               ; local var space ; 10528
LDC 0               ; local var space ; 10529
LDC 0               ; local var space ; 10530
LDF    3319         ;  @safetyPercent ; 10531
AP     4             ; 10532
MUL                  ; 10533
LDC    100          ; just constant from code ; 10534
DIV                  ; 10535
LD     0 0          ; var r ; 10536
CAR                  ; 10537
LD     1 2          ; var worldState ; 10538
CDR                 ; generateTupleAccess total=4 pos=1 ; 10539
CAR                  ; 10540
CDR                 ; generateTupleAccess total=5 pos=1 ; 10541
CAR                  ; 10542
LDC 0               ; local var space ; 10543
LDC 0               ; local var space ; 10544
LDF    2641         ;  @countMyEdgePills ; 10545
AP     4             ; 10546
LD     0 0          ; var r ; 10547
CDR                  ; 10548
LDF    3313         ;  @countRoutePills ; 10549
AP     1             ; 10550
LD     0 0          ; var r ; 10551
LDC 0               ; local var space ; 10552
LDC 0               ; local var space ; 10553
LDC 0               ; local var space ; 10554
LDF    3319         ;  @safetyPercent ; 10555
AP     4             ; 10556
CONS                 ; 10557
CONS                 ; 10558
CONS                 ; 10559
CONS                 ; 10560
RTN                  ; 10561
LD     0 0          ;  <== lambda_1031  [Triple<ListCons<ParsedEdge>,Integer,Triple<Integer,Integer,Integer>> t] (as expr) ; 10562
CDR                 ; generateTupleAccess total=3 pos=1 ; 10563
CAR                  ; 10564
RTN                  ; 10565
LDC    0            ;  <== lambda_1032  [ParsedEdge e] (as expr) ; 10566
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 10567
LDC    0            ; just constant from code ; 10568
LD     0 0          ; var e ; 10569
CDR                 ; generateTupleAccess total=8 pos=7 ; 10570
CDR                  ; 10571
CDR                  ; 10572
CDR                  ; 10573
CDR                  ; 10574
CDR                  ; 10575
CDR                  ; 10576
AP     2             ; 10577
AP     1             ; 10578
RTN                  ; 10579
LD     1 0          ;  <== lambda_1033  [g] (as expr) ; 10580
LD     0 0          ; var g ; 10581
LDC 0               ; local var space ; 10582
LDC 0               ; local var space ; 10583
LDC 0               ; local var space ; 10584
LDC 0               ; local var space ; 10585
LDC 0               ; local var space ; 10586
LDC 0               ; local var space ; 10587
LDF    2968         ;  @placeGhostDanger ; 10588
AP     8             ; 10589
RTN                  ; 10590
LD     0 0          ;  <== lambda_1034  [Point p] (as expr) ; 10591
CAR                 ; generateTupleAccess total=2 pos=0 ; 10592
LD     1 2          ; var location ; 10593
CAR                 ; generateTupleAccess total=2 pos=0 ; 10594
CEQ                  ; 10595
LDC    1            ; for negation ; 10596
SUB                  ; 10597
LD     0 0          ; var p ; 10598
CDR                 ; generateTupleAccess total=2 pos=1 ; 10599
LD     1 2          ; var location ; 10600
CDR                 ; generateTupleAccess total=2 pos=1 ; 10601
CEQ                  ; 10602
LDC    1            ; for negation ; 10603
SUB                  ; 10604
ADD                  ; 10605
SEL    10608 10610  ; IF? 77 ; 10606
RTN                  ; 10607
LDC    1            ; THEN: 77 ; 10608
JOIN                 ; 10609
LDC    0            ; ELSE: 77 ; 10610
JOIN                 ; 10611
LD     0 0          ;  <== lambda_1035  [ParsedEdge pe] (as expr) ; 10612
CDR                 ; generateTupleAccess total=8 pos=1 ; 10613
CAR                  ; 10614
LD     1 1          ; var assEdge ; 10615
CAR                 ; generateTupleAccess total=8 pos=0 ; 10616
LDF    3289         ;  @pointEquals ; 10617
AP     2             ; 10618
RTN                  ; 10619
LD     1 2          ;  <== lambda_1036  [ParsedEdge fe] (as expr) ; 10620
LDF    10998        ;  @lambda_1068 ; 10621
LDF    567          ;  @noneof ; 10622
AP     2             ; 10623
RTN                  ; 10624
LD     0 0          ;  <== lambda_1037  [ParsedEdge fe] (as expr) ; 10625
LD     1 4          ; var a ; 10626
CDR                 ; generateTupleAccess total=3 pos=1 ; 10627
CAR                  ; 10628
LD     1 6          ; var countNewEdges ; 10629
DIV                  ; 10630
LDC 0               ; local var space ; 10631
LDC 0               ; local var space ; 10632
LDF    3086         ;  @addEdgeDanger ; 10633
AP     4             ; 10634
RTN                  ; 10635
LD     0 0          ;  <== lambda_1038  [ParsedEdge fe] (as expr) ; 10636
CDR                 ; generateTupleAccess total=8 pos=5 ; 10637
CDR                  ; 10638
CDR                  ; 10639
CDR                  ; 10640
CDR                  ; 10641
CAR                  ; 10642
RTN                  ; 10643
LD     0 0          ;  <== lambda_1039  [ParsedEdge fe] (as expr) ; 10644
CDR                 ; generateTupleAccess total=8 pos=6 ; 10645
CDR                  ; 10646
CDR                  ; 10647
CDR                  ; 10648
CDR                  ; 10649
CDR                  ; 10650
CAR                  ; 10651
RTN                  ; 10652
LD     0 0          ;  <== lambda_1040  [Queue<EdgeDangerWaveItem> qq, ParsedEdge pe] (as expr) ; 10653
LD     0 1          ; var pe ; 10654
LD     1 4          ; var a ; 10655
CDR                 ; generateTupleAccess total=3 pos=1 ; 10656
CAR                  ; 10657
LD     1 6          ; var countNewEdges ; 10658
DIV                  ; 10659
LD     1 4          ; var a ; 10660
CDR                 ; generateTupleAccess total=3 pos=2 ; 10661
CDR                  ; 10662
LD     0 1          ; var pe ; 10663
CDR                 ; generateTupleAccess total=8 pos=4 ; 10664
CDR                  ; 10665
CDR                  ; 10666
CDR                  ; 10667
CAR                  ; 10668
ADD                  ; 10669
CONS                 ; 10670
CONS                 ; 10671
LDF    407          ;  @queue_enqueue ; 10672
AP     2             ; 10673
RTN                  ; 10674
LD     0 0          ;  <== lambda_1041  [e] (as expr) ; 10675
LD     1 1          ; var gs ; 10676
CDR                 ; generateTupleAccess total=3 pos=1 ; 10677
CAR                  ; 10678
LDC 0               ; local var space ; 10679
LDF    3118         ;  @remainingPath ; 10680
AP     3             ; 10681
CAR                  ; 10682
LD     1 6          ; var nextPoint ; 10683
LDF    3289         ;  @pointEquals ; 10684
AP     2             ; 10685
LDC    1            ; just constant from code ; 10686
CEQ                  ; 10687
SEL    10690 10692  ; IF? 78 ; 10688
RTN                  ; 10689
LDC    0            ; THEN: 78 ; 10690
JOIN                 ; 10691
LDC    1            ; ELSE: 78 ; 10692
JOIN                 ; 10693
LD     0 0          ;  <== lambda_1042  [ParsedEdge e] (as expr) ; 10694
LD     0 0          ; var e ; 10695
CDR                 ; generateTupleAccess total=8 pos=4 ; 10696
CDR                  ; 10697
CDR                  ; 10698
CDR                  ; 10699
CAR                  ; 10700
LD     0 0          ; var e ; 10701
LD     1 1          ; var gs ; 10702
CDR                 ; generateTupleAccess total=3 pos=1 ; 10703
CAR                  ; 10704
LDC 0               ; local var space ; 10705
LDF    3118         ;  @remainingPath ; 10706
AP     3             ; 10707
LDC 0               ; local var space ; 10708
LDF    3058         ;  @initialDangerPercent ; 10709
AP     3             ; 10710
LDC 0               ; local var space ; 10711
LDC 0               ; local var space ; 10712
LDF    3086         ;  @addEdgeDanger ; 10713
AP     4             ; 10714
RTN                  ; 10715
LD     1 0          ;  <== lambda_1043  [e] (as expr) ; 10716
LD     1 0          ; var aistate ; 10717
LD     0 0          ; var e ; 10718
LDF    3076         ;  @findReverseEdge ; 10719
AP     2             ; 10720
LDC    100          ; just constant from code ; 10721
LD     0 0          ; var e ; 10722
LD     1 1          ; var gs ; 10723
CDR                 ; generateTupleAccess total=3 pos=1 ; 10724
CAR                  ; 10725
LDC 0               ; local var space ; 10726
LDF    3118         ;  @remainingPath ; 10727
AP     3             ; 10728
LDF    532          ;  @length ; 10729
AP     1             ; 10730
CONS                 ; 10731
CONS                 ; 10732
LDC 0               ; local var space ; 10733
LDC 0               ; local var space ; 10734
LDF    2935         ;  @waveGhostDanger ; 10735
AP     4             ; 10736
RTN                  ; 10737
LD     0 0          ;  <== lambda_1044  [ParsedEdge pe] (as expr) ; 10738
CDR                 ; generateTupleAccess total=8 pos=5 ; 10739
CDR                  ; 10740
CDR                  ; 10741
CDR                  ; 10742
CDR                  ; 10743
CAR                  ; 10744
LD     1 1          ; var e ; 10745
CDR                 ; generateTupleAccess total=8 pos=6 ; 10746
CDR                  ; 10747
CDR                  ; 10748
CDR                  ; 10749
CDR                  ; 10750
CDR                  ; 10751
CAR                  ; 10752
CEQ                  ; 10753
SEL    10756 10758  ; IF? 79 ; 10754
RTN                  ; 10755
LDC    1            ; THEN: 79 ; 10756
JOIN                 ; 10757
LDC    0            ; ELSE: 79 ; 10758
JOIN                 ; 10759
LD     0 0          ;  <== lambda_1045  [Point t] (as expr) ; 10760
LD     1 1          ; var location ; 10761
LDF    3289         ;  @pointEquals ; 10762
AP     2             ; 10763
LDC    0            ; just constant from code ; 10764
CEQ                  ; 10765
SEL    10768 10770  ; IF? 80 ; 10766
RTN                  ; 10767
LDC    1            ; THEN: 80 ; 10768
JOIN                 ; 10769
LDC    0            ; ELSE: 80 ; 10770
JOIN                 ; 10771
LD     0 0          ;  <== lambda_1046  [ParsedEdge pe] (as expr) ; 10772
CAR                 ; generateTupleAccess total=8 pos=0 ; 10773
LD     1 1          ; var lookingEdge ; 10774
LDC 0               ; local var space ; 10775
LDF    3306         ;  @endingPointOfEdgeRoute ; 10776
AP     2             ; 10777
LDF    3289         ;  @pointEquals ; 10778
AP     2             ; 10779
RTN                  ; 10780
LDC    1            ;  <== lambda_1047  [ParsedEdge f] (as expr) ; 10781
LD     1 3          ; var visited ; 10782
LD     0 0          ; var f ; 10783
CDR                 ; generateTupleAccess total=8 pos=5 ; 10784
CDR                  ; 10785
CDR                  ; 10786
CDR                  ; 10787
CDR                  ; 10788
CAR                  ; 10789
LDF    1277         ;  @sorted_map_contains ; 10790
AP     2             ; 10791
SUB                  ; 10792
RTN                  ; 10793
LD     0 0          ;  <== lambda_1048  [pe] (as expr) ; 10794
LD     1 1          ; var worldState ; 10795
CAR                 ; generateTupleAccess total=4 pos=0 ; 10796
LDC 0               ; local var space ; 10797
LDC 0               ; local var space ; 10798
LDF    2614         ;  @collectAnyEdgePills ; 10799
AP     4             ; 10800
LDF    532          ;  @length ; 10801
AP     1             ; 10802
LDC    0            ; just constant from code ; 10803
CGT                  ; 10804
SEL    10807 10809  ; IF? 81 ; 10805
RTN                  ; 10806
LDC    1            ; THEN: 81 ; 10807
JOIN                 ; 10808
LDC    0            ; ELSE: 81 ; 10809
JOIN                 ; 10810
LD     0 0          ;  <== lambda_1049  [ParsedEdge f] (as expr) ; 10811
CDR                 ; generateTupleAccess total=8 pos=5 ; 10812
CDR                  ; 10813
CDR                  ; 10814
CDR                  ; 10815
CDR                  ; 10816
CAR                  ; 10817
LDC    0            ; just constant from code ; 10818
CONS                 ; 10819
RTN                  ; 10820
LD     0 0          ;  <== lambda_1050  [ParsedEdge f] (as expr) ; 10821
CDR                 ; generateTupleAccess total=8 pos=6 ; 10822
CDR                  ; 10823
CDR                  ; 10824
CDR                  ; 10825
CDR                  ; 10826
CDR                  ; 10827
CAR                  ; 10828
LDC    0            ; just constant from code ; 10829
CONS                 ; 10830
RTN                  ; 10831
LD     0 0          ;  <== lambda_1051  [ParsedEdge next] (as expr) ; 10832
LD     1 8          ; var lookingEdge ; 10833
CONS                 ; 10834
RTN                  ; 10835
LD     0 0          ;  <== lambda_1052  [Queue<ListCons<ParsedEdge>> qq, ListCons<ParsedEdge> nr] (as expr) ; 10836
LD     0 1          ; var nr ; 10837
LDF    407          ;  @queue_enqueue ; 10838
AP     2             ; 10839
RTN                  ; 10840
LD     0 0          ;  <== lambda_1053  [ParsedEdge pe] (as expr) ; 10841
CAR                 ; generateTupleAccess total=8 pos=0 ; 10842
LD     1 1          ; var lookingEdge ; 10843
CDR                 ; generateTupleAccess total=8 pos=1 ; 10844
CAR                  ; 10845
LDF    3289         ;  @pointEquals ; 10846
AP     2             ; 10847
RTN                  ; 10848
LD     0 0          ;  <== lambda_1054  [acc, pe] (as expr) ; 10849
LD     0 1          ; var pe ; 10850
LDC 0               ; local var space ; 10851
LDC 0               ; local var space ; 10852
LDF    2627         ;  @countAnyEdgePills ; 10853
AP     3             ; 10854
ADD                  ; 10855
RTN                  ; 10856
LD     0 0          ;  <== lambda_1055  [p] (as expr) ; 10857
CAR                  ; 10858
LD     0 0          ; var p ; 10859
LDF    125          ;  @last ; 10860
AP     1             ; 10861
LD     0 0          ; var p ; 10862
LD     0 0          ; var p ; 10863
LD     1 4          ; var accessors ; 10864
LDF    3674         ;  @makeEdgeAccess ; 10865
AP     2             ; 10866
LD     0 0          ; var p ; 10867
LDF    532          ;  @length ; 10868
AP     1             ; 10869
LDC    1            ; just constant from code ; 10870
SUB                  ; 10871
LDC    -1           ; just negative constant from code ; 10872
LDC    -1           ; just negative constant from code ; 10873
LDF    8985         ;  @array_1 ; 10874
AP     0             ; 10875
CONS                 ; 10876
CONS                 ; 10877
CONS                 ; 10878
CONS                 ; 10879
CONS                 ; 10880
CONS                 ; 10881
CONS                 ; 10882
RTN                  ; 10883
LDC    100          ;  <== lambda_1056  [Point pt] (as expr) ; 10884
LD     0 0          ; var pt ; 10885
CAR                 ; generateTupleAccess total=2 pos=0 ; 10886
LD     1 1          ; var accessors ; 10887
LD     0 0          ; var pt ; 10888
CDR                 ; generateTupleAccess total=2 pos=1 ; 10889
LDF    423          ;  @list_item ; 10890
AP     2             ; 10891
AP     2             ; 10892
RTN                  ; 10893
LD     1 0          ;  <== lambda_1057  [Tuple<Integer,Point> d] (as expr) ; 10894
LD     0 0          ; var d ; 10895
CDR                 ; generateTupleAccess total=2 pos=1 ; 10896
LDF    3516         ;  @isWalkable2 ; 10897
AP     2             ; 10898
LDC    1            ; just constant from code ; 10899
LD     1 4          ; var visited ; 10900
LD     0 0          ; var d ; 10901
CAR                 ; generateTupleAccess total=2 pos=0 ; 10902
LDF    1277         ;  @sorted_map_contains ; 10903
AP     2             ; 10904
SUB                  ; 10905
MUL                  ; 10906
RTN                  ; 10907
LD     1 2          ;  <== lambda_1058  [Tuple<Integer,Point> e] (as expr) ; 10908
LD     0 0          ; var e ; 10909
CAR                 ; generateTupleAccess total=2 pos=0 ; 10910
LDF    1277         ;  @sorted_map_contains ; 10911
AP     2             ; 10912
RTN                  ; 10913
LD     1 3          ;  <== lambda_1059  [Tuple<Integer,Point> e] (as expr) ; 10914
LDF    11013        ;  @lambda_1069 ; 10915
LDF    545          ;  @any ; 10916
AP     2             ; 10917
RTN                  ; 10918
LDC    1            ;  <== lambda_1060  [Tuple<Integer,Point> e] (as expr) ; 10919
LD     1 14         ; var arriveds ; 10920
LD     0 0          ; var e ; 10921
CAR                 ; generateTupleAccess total=2 pos=0 ; 10922
LDF    1277         ;  @sorted_map_contains ; 10923
AP     2             ; 10924
SUB                  ; 10925
RTN                  ; 10926
LD     0 0          ;  <== lambda_1061  [Tuple<Integer,Point> e] (as expr) ; 10927
CDR                 ; generateTupleAccess total=2 pos=1 ; 10928
LD     1 8          ; var thisRoute ; 10929
CONS                 ; 10930
RTN                  ; 10931
LD     0 0          ;  <== lambda_1062  [r, i] (as expr) ; 10932
LD     0 1          ; var i ; 10933
LDF    407          ;  @queue_enqueue ; 10934
AP     2             ; 10935
RTN                  ; 10936
LD     0 0          ;  <== lambda_1063  [Tuple<Integer,Point> e] (as expr) ; 10937
CDR                 ; generateTupleAccess total=2 pos=1 ; 10938
LD     1 8          ; var thisRoute ; 10939
CONS                 ; 10940
RTN                  ; 10941
LD     1 0          ;  <== lambda_1064  [Point ep] (as expr) ; 10942
CAR                 ; generateTupleAccess total=2 pos=0 ; 10943
LD     0 0          ; var ep ; 10944
CAR                 ; generateTupleAccess total=2 pos=0 ; 10945
CEQ                  ; 10946
LD     1 0          ; var pos ; 10947
CDR                 ; generateTupleAccess total=2 pos=1 ; 10948
LD     0 0          ; var ep ; 10949
CDR                 ; generateTupleAccess total=2 pos=1 ; 10950
CEQ                  ; 10951
MUL                  ; 10952
SEL    10955 10957  ; IF? 82 ; 10953
RTN                  ; 10954
LDC    1            ; THEN: 82 ; 10955
JOIN                 ; 10956
LDC    0            ; ELSE: 82 ; 10957
JOIN                 ; 10958
LD     0 0          ;  <== lambda_1065  [ParsedEdge e] (as expr) ; 10959
CAR                 ; generateTupleAccess total=8 pos=0 ; 10960
LD     1 0          ; var a ; 10961
LDF    3289         ;  @pointEquals ; 10962
AP     2             ; 10963
LD     0 0          ; var e ; 10964
CDR                 ; generateTupleAccess total=8 pos=1 ; 10965
CAR                  ; 10966
LD     1 1          ; var b ; 10967
LDF    3289         ;  @pointEquals ; 10968
AP     2             ; 10969
MUL                  ; 10970
RTN                  ; 10971
LD     0 0          ;  <== lambda_1066  [col, colx] (as expr) ; 10972
LDC 0               ; local var space ; 10973
LDF    3502         ;  @isWalkable ; 10974
AP     2             ; 10975
LDC    0            ; just constant from code ; 10976
CGT                  ; 10977
SEL    10980 10987  ; IF? 83 ; 10978
RTN                  ; 10979
LD     0 1          ; THEN: 83 ; 10980
LD     1 1          ; var rowy ; 10981
CONS                 ; 10982
LDC 0               ; local var space ; 10983
LDF    220          ;  @JUST ; 10984
AP     2             ; 10985
JOIN                 ; 10986
LDF    216          ; ELSE: 83, ALSO: @NOTHING ; 10987
AP     0             ; 10988
JOIN                 ; 10989
LD     0 0          ;  <== lambda_1067  [val, ix] (as expr) ; 10990
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 10991
LD     0 1          ; var ix ; 10992
LD     1 0          ; var t ; 10993
CDR                 ; generateTupleAccess total=2 pos=1 ; 10994
AP     2             ; 10995
AP     1             ; 10996
RTN                  ; 10997
LD     1 0          ;  <== lambda_1068  [ve] (as expr) ; 10998
CDR                 ; generateTupleAccess total=8 pos=5 ; 10999
CDR                  ; 11000
CDR                  ; 11001
CDR                  ; 11002
CDR                  ; 11003
CAR                  ; 11004
LD     0 0          ; var ve ; 11005
CEQ                  ; 11006
SEL    11009 11011  ; IF? 84 ; 11007
RTN                  ; 11008
LDC    1            ; THEN: 84 ; 11009
JOIN                 ; 11010
LDC    0            ; ELSE: 84 ; 11011
JOIN                 ; 11012
LD     1 0          ;  <== lambda_1069  [d] (as expr) ; 11013
CDR                 ; generateTupleAccess total=2 pos=1 ; 11014
LD     0 0          ; var d ; 11015
LDF    3289         ;  @pointEquals ; 11016
AP     2             ; 11017
RTN                  ; 11018
LD     0 0          ;  <== lambda_1070  [x, y] (as expr) ; 11019
LD     0 1          ; var y ; 11020
MUL                  ; 11021
RTN                  ; 11022
LD     0 0          ;  <== lambda_1071  [x, y] (as expr) ; 11023
LD     0 1          ; var y ; 11024
ADD                  ; 11025
LDC    0            ; just constant from code ; 11026
CGT                  ; 11027
SEL    11030 11032  ; IF? 145 ; 11028
RTN                  ; 11029
LDC    1            ; THEN: 145 ; 11030
JOIN                 ; 11031
LDC    0            ; ELSE: 145 ; 11032
JOIN                 ; 11033
LD     0 0          ;  <== lambda_1072  [x, y] (as expr) ; 11034
LD     0 1          ; var y ; 11035
LDF    1850         ;  @intCompare ; 11036
AP     2             ; 11037
LDC    1            ; just constant from code ; 11038
CEQ                  ; 11039
SEL    11042 11044  ; IF? 146 ; 11040
RTN                  ; 11041
LDC    0            ; THEN: 146 ; 11042
JOIN                 ; 11043
LDC    1            ; ELSE: 146 ; 11044
JOIN                 ; 11045
LD     1 2          ;  <== lambda_1073  [Tuple<Integer,Point> e] (as expr) ; 11046
LD     0 0          ; var e ; 11047
CAR                 ; generateTupleAccess total=2 pos=0 ; 11048
LDF    1277         ;  @sorted_map_contains ; 11049
AP     2             ; 11050
RTN                  ; 11051
