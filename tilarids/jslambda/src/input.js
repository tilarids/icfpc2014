function step(state, world, n, m, lm_status) {
  var i;
  var j;
  var it1;
  var it2;
  var row;
  var cell;
  var lm_x;
  var lm_y;

  lm_y = car(car(cdr(lm_status)))
  lm_x = cdr(car(cdr(lm_status)))
  i = 0
  it1 = world
  while (n > i) {
    row = car(it1)
    j = 0
    it2 = row
    // 0 is up; 1 is right; 2 is down; 3 is left.
    while (m > j) {
      cell = car(it2)
      // dbug([666, lm_x, lm_y, i, j, cell, 666]);

      if ((lm_x - 1 == i) * (lm_y == j) * cell) {
        // dbug([606, lm_x, lm_y, i, j, cell, 606]);
        return [state + 1, 0]
      }

      if ((lm_x == i) * (lm_y + 1 == j) * cell) {
        // dbug(1);

        return [state + 1, 1]
      }
      if ((lm_x + 1 == i) * (lm_y == j) * cell) {
                // dbug(2);

        return [state + 1, 2]
      }
      if ((lm_x == i) * (lm_y - 1 == j) * cell) {
                // dbug(3);

        return [state + 1, 3]
      }
      it2 = cdr(it2)
      j++
    } 
    it1 = cdr(it1)
    i++
  }
  return [state + 1, state];
} 
function length(l) {
  if (atom(cdr(l))) {
    return 2;
  } else {
    return 1 + length(cdr(l));
  }
}
function step_impl(state, tuple4) {
  return init_memory(step, // func to call
                     10, // mem size
                     state, 
                     car(tuple4), 
                     length(car(tuple4)) - 1, 
                     length(car(car(tuple4))) - 1,
                     car(cdr(tuple4)))
}
//insert_vtables(); 
function init() {
  //return step_impl(0, [[[0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [0, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [0, [0, [0, [2, [0, [0, [0, [0, [2, [0, [2, [0, [0, [0, [0, [2, [0, [0, [0, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [3, [0, [0, [0, [2, [0, [0, [0, [0, [2, [0, [2, [0, [0, [0, [0, [2, [0, [0, [0, [3, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [0, [0, [0, [2, [0, [2, [0, [0, [0, [0, [0, [0, [0, [2, [0, [2, [0, [0, [0, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [2, [2, [2, [2, [0, [2, [2, [2, [2, [0, [2, [2, [2, [2, [0, [2, [2, [2, [2, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [0, [0, [0, [0, [2, [0, [0, [0, [0, [1, [0, [1, [0, [0, [0, [0, [2, [0, [0, [0, [0, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [1, [1, [1, [0, [2, [0, [1, [1, [1, [1, [6, [1, [1, [1, [1, [0, [2, [0, [1, [1, [1, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [0, [0, [0, [0, [2, [0, [1, [0, [0, [0, [1, [0, [0, [0, [1, [0, [2, [0, [0, [0, [0, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [1, [1, [1, [1, [2, [1, [1, [0, [1, [6, [6, [6, [1, [0, [1, [1, [2, [1, [1, [1, [1, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [0, [0, [0, [0, [2, [0, [1, [0, [0, [0, [0, [0, [0, [0, [1, [0, [2, [0, [0, [0, [0, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [1, [1, [1, [0, [2, [0, [1, [1, [1, [1, [4, [1, [1, [1, [1, [0, [2, [0, [1, [1, [1, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [0, [0, [0, [0, [2, [0, [1, [0, [0, [0, [0, [0, [0, [0, [1, [0, [2, [0, [0, [0, [0, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [0, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [0, [0, [0, [2, [0, [0, [0, [0, [2, [0, [2, [0, [0, [0, [0, [2, [0, [0, [0, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [3, [2, [2, [0, [2, [2, [2, [2, [2, [2, [5, [2, [2, [2, [2, [2, [2, [0, [2, [2, [3, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [0, [0, [2, [0, [2, [0, [2, [0, [0, [0, [0, [0, [0, [0, [2, [0, [2, [0, [2, [0, [0, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [2, [2, [2, [2, [0, [2, [2, [2, [2, [0, [2, [2, [2, [2, [0, [2, [2, [2, [2, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [0, [0, [0, [0, [0, [0, [0, [0, [2, [0, [2, [0, [0, [0, [0, [0, [0, [0, [0, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [2, [0, 0]]]]]]]]]]]]]]]]]]]]]]], [[0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, [0, 0]]]]]]]]]]]]]]]]]]]]]]], 0]]]]]]]]]]]]]]]]]]]]]], [[0, [[11, 16], [2, [3, 0]]]], [[[0, [[11, 8], 2]], [[0, [[10, 10], 2]], [[0, [[11, 10], 2]], [[0, [[12, 10], 2]], 0]]]], 0]]])
  return [0, step_impl]
}

