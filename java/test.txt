LDC    1            ;  <== entryPoint  [WorldState ws, ListCons<ListCons> ghostSpecs] (as blk) ; 0
LDC    1            ; just constant from code ; 1
CEQ                  ; 2
SEL    5 13         ; IF? 1 ; 3
RTN                  ; 4
LD     0 0          ; THEN: 1 ; 5
LD     0 1          ; var ghostSpecs ; 6
LDC 0               ; local var space ; 7
LDC 0               ; local var space ; 8
LDC 0               ; local var space ; 9
LDF    2534         ;  @entryFactual ; 10
AP     5             ; 11
JOIN                 ; 12
LDC 0               ; ELSE: 1 ; 13
LDC 0               ; local var space ; 14
LDC 0               ; local var space ; 15
LDC 0               ; local var space ; 16
LDC 0               ; local var space ; 17
LDF    2498         ;  @entryCPUEmulator ; 18
AP     5             ; 19
JOIN                 ; 20
LD     0 0          ;  <== mydebug  [T o] (as blk) ; 21
DBUG                 ; 22
LD     0 0          ; var o ; 23
RTN                  ; 24
LD     0 0          ;  <== mydebugv  [Object tag, T o] (as blk) ; 25
DBUG                 ; 26
LD     0 1          ; var o ; 27
DBUG                 ; 28
LD     0 1          ; var o ; 29
RTN                  ; 30
LD     0 2          ;  <== foldl  [Function2<A,B,A> f, A a, ListCons<B> l] (as blk) ; 31
ATOM                 ; 32
SEL    35 37        ; IF? 2 ; 33
RTN                  ; 34
LD     0 1          ; THEN: 2 ; 35
JOIN                 ; 36
LD     0 0          ; ELSE: 2 ; 37
LD     0 1          ; var a ; 38
LD     0 2          ; var l ; 39
CAR                  ; 40
LD     0 0          ; var f ; 41
AP     2             ; 42
LD     0 2          ; var l ; 43
CDR                  ; 44
LDF    31           ;  @foldl ; 45
AP     3             ; 46
JOIN                 ; 47
LD     0 2          ;  <== foldr  [Function2<A,B,B> f, B a, ListCons<A> l] (as blk) ; 48
ATOM                 ; 49
SEL    52 54        ; IF? 3 ; 50
RTN                  ; 51
LD     0 1          ; THEN: 3 ; 52
JOIN                 ; 53
LD     0 2          ; ELSE: 3 ; 54
CAR                  ; 55
LD     0 0          ; var f ; 56
LD     0 1          ; var a ; 57
LD     0 2          ; var l ; 58
CDR                  ; 59
LDF    48           ;  @foldr ; 60
AP     3             ; 61
LD     0 0          ; var f ; 62
AP     2             ; 63
JOIN                 ; 64
LDF    10197        ;  <== o  [final Function1<B,C> f, final Function1<A,B> g] (as blk), ALSO: @lambda_1000 ; 65
RTN                  ; 66
LDF    10203        ;  <== flip  [Function2<A,B,C> f] (as blk), ALSO: @lambda_1001 ; 67
RTN                  ; 68
LD     0 0          ;  <== map  [ListCons<T> c, Function1<T,T2> arg] (as blk) ; 69
ATOM                 ; 70
SEL    73 75        ; IF? 4 ; 71
RTN                  ; 72
LDC    0            ; THEN: 4 ; 73
JOIN                 ; 74
LD     0 0          ; ELSE: 4 ; 75
CAR                  ; 76
LD     0 1          ; var arg ; 77
AP     1             ; 78
LD     0 0          ; var c ; 79
CDR                  ; 80
LD     0 1          ; var arg ; 81
LDF    69           ;  @map ; 82
AP     2             ; 83
CONS                 ; 84
JOIN                 ; 85
LD     0 0          ;  <== mapi  [ListCons<D> c, int ix, Function2<D,Integer,D2> arg] (as blk) ; 86
ATOM                 ; 87
SEL    90 92        ; IF? 5 ; 88
RTN                  ; 89
LDC    0            ; THEN: 5 ; 90
JOIN                 ; 91
LD     0 0          ; ELSE: 5 ; 92
CAR                  ; 93
LD     0 1          ; var ix ; 94
LD     0 2          ; var arg ; 95
AP     2             ; 96
LD     0 0          ; var c ; 97
CDR                  ; 98
LD     0 1          ; var ix ; 99
LDC    1            ; just constant from code ; 100
ADD                  ; 101
LD     0 2          ; var arg ; 102
LDF    86           ;  @mapi ; 103
AP     3             ; 104
CONS                 ; 105
JOIN                 ; 106
LD     0 0          ;  <== cat_maybes  [ListCons<Maybe<D>> data] (as blk) ; 107
LDF    10208        ;  @lambda_1002 ; 108
LDF    69           ;  @map ; 109
AP     2             ; 110
ST     0 1           ; 111
LD     0 1          ; var mtl ; 112
LDF    118          ;  @concat ; 113
AP     1             ; 114
ST     0 2           ; 115
LD     0 2          ; var rv ; 116
RTN                  ; 117
LD     0 0          ;  <== concat  [ListCons<ListCons<D>> data] (as blk) ; 118
LDC    0            ; NULL literal ; 119
LDF    149          ;  @concat_acc ; 120
AP     2             ; 121
LDF    299          ;  @reverse ; 122
AP     1             ; 123
RTN                  ; 124
LD     0 0          ;  <== last  [ListCons<D> data] (as blk) ; 125
ATOM                 ; 126
SEL    133 135       ; 127
LD     0 0          ; var data ; 128
CDR                  ; 129
ATOM                 ; 130
SEL    136 139      ; IF? 8 ; 131
RTN                  ; 132
BRK                 ; branch@133 ; 133
JOIN                 ; 134
JOIN                ; branch@135 ; 135
LD     0 0          ; THEN: 8 ; 136
CAR                  ; 137
JOIN                 ; 138
LD     0 0          ; ELSE: 8 ; 139
CDR                  ; 140
LDF    125          ;  @last ; 141
AP     1             ; 142
JOIN                 ; 143
LD     0 0          ;  <== concat_set  [ListCons<ListCons<D>> data] (as blk) ; 144
LDC    0            ; NULL literal ; 145
LDF    149          ;  @concat_acc ; 146
AP     2             ; 147
RTN                  ; 148
LD     0 0          ;  <== concat_acc  [ListCons<ListCons<D>> data, ListCons<D> acc] (as blk) ; 149
ATOM                 ; 150
SEL    153 155      ; IF? 6 ; 151
RTN                  ; 152
LD     0 1          ; THEN: 6 ; 153
JOIN                 ; 154
LD     0 0          ; ELSE: 6 ; 155
CDR                  ; 156
LD     0 0          ; var data ; 157
CAR                  ; 158
LD     0 1          ; var acc ; 159
LDF    165          ;  @concat2 ; 160
AP     2             ; 161
LDF    149          ;  @concat_acc ; 162
AP     2             ; 163
JOIN                 ; 164
LD     0 0          ;  <== concat2  [ListCons<D> data, ListCons<D> data2] (as blk) ; 165
ATOM                 ; 166
SEL    169 171      ; IF? 9 ; 167
RTN                  ; 168
LD     0 1          ; THEN: 9 ; 169
JOIN                 ; 170
LD     0 1          ; ELSE: 9 ; 171
ATOM                 ; 172
SEL    175 177      ; IF? 85 ; 173
JOIN                 ; 174
LD     0 0          ; THEN: 85 ; 175
JOIN                 ; 176
LD     0 0          ; ELSE: 85 ; 177
LDF    299          ;  @reverse ; 178
AP     1             ; 179
LD     0 1          ; var data2 ; 180
LDF    201          ;  @concat2_acc ; 181
AP     2             ; 182
JOIN                 ; 183
LD     0 0          ;  <== concat2_set  [ListCons<D> data, ListCons<D> data2] (as blk) ; 184
ATOM                 ; 185
SEL    188 190      ; IF? 10 ; 186
RTN                  ; 187
LD     0 1          ; THEN: 10 ; 188
JOIN                 ; 189
LD     0 1          ; ELSE: 10 ; 190
ATOM                 ; 191
SEL    194 196      ; IF? 86 ; 192
JOIN                 ; 193
LD     0 0          ; THEN: 86 ; 194
JOIN                 ; 195
LD     0 0          ; ELSE: 86 ; 196
LD     0 1          ; var data2 ; 197
LDF    201          ;  @concat2_acc ; 198
AP     2             ; 199
JOIN                 ; 200
LD     0 0          ;  <== concat2_acc  [ListCons<D> data, ListCons<D> acc] (as blk) ; 201
ATOM                 ; 202
SEL    205 207      ; IF? 11 ; 203
RTN                  ; 204
LD     0 1          ; THEN: 11 ; 205
JOIN                 ; 206
LD     0 0          ; ELSE: 11 ; 207
CDR                  ; 208
LD     0 0          ; var data ; 209
CAR                  ; 210
LD     0 1          ; var acc ; 211
CONS                 ; 212
LDF    201          ;  @concat2_acc ; 213
AP     2             ; 214
JOIN                 ; 215
LDC    0            ;  <== NOTHING  [] (as blk) ; 216
LDC    0            ; NULL literal ; 217
CONS                 ; 218
RTN                  ; 219
LDC    1            ;  <== JUST  [T t] (as blk) ; 220
LD     0 0          ; var t ; 221
CONS                 ; 222
ST     0 1           ; 223
LD     0 1          ; var tMaybe ; 224
RTN                  ; 225
LD     0 0          ;  <== maybeToList  [Maybe<D> d] (as blk) ; 226
LDF    283          ;  @is_nothing ; 227
AP     1             ; 228
LDC    1            ; just constant from code ; 229
CEQ                  ; 230
SEL    233 235      ; IF? 12 ; 231
RTN                  ; 232
LDC    0            ; THEN: 12 ; 233
JOIN                 ; 234
LD     0 0          ; ELSE: 12 ; 235
LDF    288          ;  @from_maybe ; 236
AP     1             ; 237
LDC    0            ; NULL literal ; 238
CONS                 ; 239
JOIN                 ; 240
LDC    0            ;  <== catMaybes_acc  [ListCons<Maybe<D>> data, ListCons<D> acc] (as blk) ; 241
ST     0 2           ; 242
LD     0 0          ; var data ; 243
ATOM                 ; 244
SEL    248 251       ; 245
LD     0 2          ; var rv ; 246
RTN                  ; 247
LD     0 1          ; branch@248 ; 248
ST     0 2           ; 249
JOIN                 ; 250
LD     0 0          ; branch@251 ; 251
CAR                  ; 252
LDF    283          ;  @is_nothing ; 253
AP     1             ; 254
ST     0 3           ; 255
LD     0 0          ; var data ; 256
CAR                  ; 257
LDF    288          ;  @from_maybe ; 258
AP     1             ; 259
ST     0 4           ; 260
LD     0 4          ; var data1 ; 261
LD     0 1          ; var acc ; 262
CONS                 ; 263
ST     0 5           ; 264
LD     0 0          ; var data ; 265
CDR                  ; 266
LD     0 3          ; var nothing ; 267
LDC    1            ; just constant from code ; 268
CEQ                  ; 269
SEL    279 281      ; IF? 87 ; 270
LDC 0               ; local var space ; 271
LDC 0               ; local var space ; 272
LDC 0               ; local var space ; 273
LDC 0               ; local var space ; 274
LDF    241          ;  @catMaybes_acc ; 275
AP     6             ; 276
ST     0 2           ; 277
JOIN                 ; 278
LD     0 1          ; THEN: 87 ; 279
JOIN                 ; 280
LD     0 5          ; ELSE: 87 ; 281
JOIN                 ; 282
LDC    1            ;  <== is_nothing  [Maybe<D> head] (as blk) ; 283
LD     0 0          ; var head ; 284
CAR                 ; generateTupleAccess total=2 pos=0 ; 285
SUB                  ; 286
RTN                  ; 287
LD     0 0          ;  <== from_maybe  [Maybe<D> head] (as blk) ; 288
CAR                 ; generateTupleAccess total=2 pos=0 ; 289
LDC    0            ; just constant from code ; 290
CEQ                  ; 291
SEL    296 298       ; 292
LD     0 0          ; var head ; 293
CDR                 ; generateTupleAccess total=2 pos=1 ; 294
RTN                  ; 295
BRK                 ; branch@296 ; 296
JOIN                 ; 297
JOIN                ; branch@298 ; 298
LD     0 0          ;  <== reverse  [ListCons<D> c] (as blk) ; 299
LDC    0            ; NULL literal ; 300
LDF    371          ;  @reverse_acc ; 301
AP     2             ; 302
RTN                  ; 303
LD     0 0          ;  <== maximum_by_acc  [ListCons<D> d, Function1<D,Integer> projection, D acc] (as blk) ; 304
ATOM                 ; 305
SEL    308 310      ; IF? 13 ; 306
RTN                  ; 307
LD     0 2          ; THEN: 13 ; 308
JOIN                 ; 309
LD     0 2          ; ELSE: 13 ; 310
LD     0 1          ; var projection ; 311
AP     1             ; 312
LD     0 0          ; var d ; 313
CAR                  ; 314
LD     0 1          ; var projection ; 315
AP     1             ; 316
CGT                  ; 317
SEL    320 327      ; IF? 88 ; 318
JOIN                 ; 319
LD     0 0          ; THEN: 88 ; 320
CDR                  ; 321
LD     0 1          ; var projection ; 322
LD     0 2          ; var acc ; 323
LDF    304          ;  @maximum_by_acc ; 324
AP     3             ; 325
JOIN                 ; 326
LD     0 0          ; ELSE: 88 ; 327
CDR                  ; 328
LD     0 1          ; var projection ; 329
LD     0 0          ; var d ; 330
CAR                  ; 331
LDF    304          ;  @maximum_by_acc ; 332
AP     3             ; 333
JOIN                 ; 334
LD     0 0          ;  <== maximum_by  [ListCons<D> d, Function1<D,Integer> projection] (as blk) ; 335
ATOM                 ; 336
SEL    346 348       ; 337
LD     0 0          ; var d ; 338
CDR                  ; 339
LD     0 1          ; var projection ; 340
LD     0 0          ; var d ; 341
CAR                  ; 342
LDF    304          ;  @maximum_by_acc ; 343
AP     3             ; 344
RTN                  ; 345
BRK                 ; branch@346 ; 346
JOIN                 ; 347
JOIN                ; branch@348 ; 348
LD     0 0          ;  <== dropWhile  [ListCons<D> c, Function1<D,Integer> test] (as blk) ; 349
ATOM                 ; 350
SEL    353 355      ; IF? 14 ; 351
RTN                  ; 352
LDC    0            ; THEN: 14 ; 353
JOIN                 ; 354
LD     0 0          ; ELSE: 14 ; 355
CAR                  ; 356
LD     0 1          ; var test ; 357
AP     1             ; 358
LDC    1            ; just constant from code ; 359
CEQ                  ; 360
SEL    363 369      ; IF? 89 ; 361
JOIN                 ; 362
LD     0 0          ; THEN: 89 ; 363
CDR                  ; 364
LD     0 1          ; var test ; 365
LDF    349          ;  @dropWhile ; 366
AP     2             ; 367
JOIN                 ; 368
LD     0 0          ; ELSE: 89 ; 369
JOIN                 ; 370
LD     0 0          ;  <== reverse_acc  [ListCons<D> c, ListCons<D> acc] (as blk) ; 371
ATOM                 ; 372
SEL    375 377      ; IF? 7 ; 373
RTN                  ; 374
LD     0 1          ; THEN: 7 ; 375
JOIN                 ; 376
LD     0 0          ; ELSE: 7 ; 377
CDR                  ; 378
LD     0 0          ; var c ; 379
CAR                  ; 380
LD     0 1          ; var acc ; 381
CONS                 ; 382
LDF    371          ;  @reverse_acc ; 383
AP     2             ; 384
JOIN                 ; 385
LD     0 0          ;  <== fold0  [ListCons<I> c, R init, Function2<R,I,R> arg] (as blk) ; 386
ATOM                 ; 387
SEL    390 392      ; IF? 15 ; 388
RTN                  ; 389
LD     0 1          ; THEN: 15 ; 390
JOIN                 ; 391
LD     0 0          ; ELSE: 15 ; 392
CDR                  ; 393
LD     0 1          ; var init ; 394
LD     0 0          ; var c ; 395
CAR                  ; 396
LD     0 2          ; var arg ; 397
AP     2             ; 398
LD     0 2          ; var arg ; 399
LDF    386          ;  @fold0 ; 400
AP     3             ; 401
JOIN                 ; 402
LDC    0            ;  <== queue_new  [] (as blk) ; 403
LDC    0            ; NULL literal ; 404
CONS                 ; 405
RTN                  ; 406
LD     0 0          ;  <== queue_enqueue  [Queue<T> q, T v] (as blk) ; 407
CAR                 ; generateTupleAccess total=2 pos=0 ; 408
LD     0 1          ; var v ; 409
LD     0 0          ; var q ; 410
CDR                 ; generateTupleAccess total=2 pos=1 ; 411
CONS                 ; 412
CONS                 ; 413
RTN                  ; 414
LD     0 0          ;  <== queue_isempty  [Queue<T> q] (as blk) ; 415
CAR                 ; generateTupleAccess total=2 pos=0 ; 416
ATOM                 ; 417
LD     0 0          ; var q ; 418
CDR                 ; generateTupleAccess total=2 pos=1 ; 419
ATOM                 ; 420
MUL                  ; 421
RTN                  ; 422
LDC    0            ;  <== list_item  [Cons list, int n] (as blk) ; 423
LD     0 1          ; var n ; 424
CGT                  ; 425
SEL    432 434       ; 426
LD     0 1          ; var n ; 427
LDC    0            ; just constant from code ; 428
CEQ                  ; 429
SEL    435 438      ; IF? 16 ; 430
RTN                  ; 431
BRK                 ; branch@432 ; 432
JOIN                 ; 433
JOIN                ; branch@434 ; 434
LD     0 0          ; THEN: 16 ; 435
CAR                  ; 436
JOIN                 ; 437
LD     0 0          ; ELSE: 16 ; 438
CDR                  ; 439
LD     0 1          ; var n ; 440
LDC    1            ; just constant from code ; 441
SUB                  ; 442
LDF    423          ;  @list_item ; 443
AP     2             ; 444
JOIN                 ; 445
LDC    0            ;  <== list_item  [ListCons<T> list, int n] (as blk) ; 446
LD     0 1          ; var n ; 447
CGT                  ; 448
SEL    455 457       ; 449
LD     0 1          ; var n ; 450
LDC    0            ; just constant from code ; 451
CEQ                  ; 452
SEL    458 461      ; IF? 17 ; 453
RTN                  ; 454
BRK                 ; branch@455 ; 455
JOIN                 ; 456
JOIN                ; branch@457 ; 457
LD     0 0          ; THEN: 17 ; 458
CAR                  ; 459
JOIN                 ; 460
LD     0 0          ; ELSE: 17 ; 461
CDR                  ; 462
LD     0 1          ; var n ; 463
LDC    1            ; just constant from code ; 464
SUB                  ; 465
LDF    423          ;  @list_item ; 466
AP     2             ; 467
JOIN                 ; 468
LDC    0            ;  <== list_item_def  [Cons list, int index, Object deflt] (as blk) ; 469
LD     0 1          ; var index ; 470
CGT                  ; 471
SEL    474 476      ; IF? 18 ; 472
RTN                  ; 473
LD     0 2          ; THEN: 18 ; 474
JOIN                 ; 475
LD     0 1          ; ELSE: 18 ; 476
LDC    0            ; just constant from code ; 477
CEQ                  ; 478
SEL    481 484      ; IF? 90 ; 479
JOIN                 ; 480
LD     0 0          ; THEN: 90 ; 481
CAR                  ; 482
JOIN                 ; 483
LD     0 0          ; ELSE: 90 ; 484
CDR                  ; 485
LD     0 1          ; var index ; 486
LDC    1            ; just constant from code ; 487
SUB                  ; 488
LDF    423          ;  @list_item ; 489
AP     2             ; 490
JOIN                 ; 491
LDC    0            ;  <== queue_dequeue  [Queue<T> q] (as blk) ; 492
ST     0 1           ; 493
LD     0 0          ; var q ; 494
CAR                 ; generateTupleAccess total=2 pos=0 ; 495
ATOM                 ; 496
SEL    500 507       ; 497
LD     0 1          ; var retval ; 498
RTN                  ; 499
LD     0 0          ; branch@500 ; 500
CDR                 ; generateTupleAccess total=2 pos=1 ; 501
ATOM                 ; 502
LDC    1            ; for negation ; 503
SUB                  ; 504
SEL    519 530       ; 505
JOIN                 ; 506
LD     0 0          ; branch@507 ; 507
CAR                 ; generateTupleAccess total=2 pos=0 ; 508
CAR                  ; 509
LD     0 0          ; var q ; 510
CAR                 ; generateTupleAccess total=2 pos=0 ; 511
CDR                  ; 512
LD     0 0          ; var q ; 513
CDR                 ; generateTupleAccess total=2 pos=1 ; 514
CONS                 ; 515
CONS                 ; 516
ST     0 1           ; 517
JOIN                 ; 518
LD     0 0          ; branch@519 ; 519
CDR                 ; generateTupleAccess total=2 pos=1 ; 520
LDF    299          ;  @reverse ; 521
AP     1             ; 522
LDC    0            ; NULL literal ; 523
CONS                 ; 524
LDC 0               ; local var space ; 525
LDF    492          ;  @queue_dequeue ; 526
AP     2             ; 527
ST     0 1           ; 528
JOIN                 ; 529
BRK                 ; branch@530 ; 530
JOIN                 ; 531
LD     0 0          ;  <== length  [ListCons<T> list] (as blk) ; 532
LDC    0            ; just constant from code ; 533
LDF    646          ;  @elements_counter ; 534
AP     2             ; 535
RTN                  ; 536
LD     0 0          ;  <== filter  [ListCons<T> list, Function1<T,Integer> pred] (as blk) ; 537
LD     0 1          ; var pred ; 538
LDC    0            ; NULL literal ; 539
LDF    609          ;  @filter_acc ; 540
AP     3             ; 541
LDF    299          ;  @reverse ; 542
AP     1             ; 543
RTN                  ; 544
LD     0 0          ;  <== any  [ListCons<T> list, Function1<T,Integer> pred] (as blk) ; 545
ATOM                 ; 546
SEL    549 551      ; IF? 21 ; 547
RTN                  ; 548
LDC    0            ; THEN: 21 ; 549
JOIN                 ; 550
LD     0 0          ; ELSE: 21 ; 551
CAR                  ; 552
LD     0 1          ; var pred ; 553
AP     1             ; 554
LDC    1            ; just constant from code ; 555
CEQ                  ; 556
SEL    559 561      ; IF? 91 ; 557
JOIN                 ; 558
LDC    1            ; THEN: 91 ; 559
JOIN                 ; 560
LD     0 0          ; ELSE: 91 ; 561
CDR                  ; 562
LD     0 1          ; var pred ; 563
LDF    545          ;  @any ; 564
AP     2             ; 565
JOIN                 ; 566
LD     0 0          ;  <== noneof  [ListCons<T> list, Function1<T,Integer> pred] (as blk) ; 567
ATOM                 ; 568
SEL    571 573      ; IF? 22 ; 569
RTN                  ; 570
LDC    1            ; THEN: 22 ; 571
JOIN                 ; 572
LD     0 0          ; ELSE: 22 ; 573
CAR                  ; 574
LD     0 1          ; var pred ; 575
AP     1             ; 576
LDC    1            ; just constant from code ; 577
CEQ                  ; 578
SEL    581 583      ; IF? 92 ; 579
JOIN                 ; 580
LDC    0            ; THEN: 92 ; 581
JOIN                 ; 582
LD     0 0          ; ELSE: 92 ; 583
CDR                  ; 584
LD     0 1          ; var pred ; 585
LDF    567          ;  @noneof ; 586
AP     2             ; 587
JOIN                 ; 588
LD     0 0          ;  <== empty  [Cons d] (as blk) ; 589
ATOM                 ; 590
LDC    1            ; for negation ; 591
SUB                  ; 592
SEL    595 597      ; IF? 23 ; 593
RTN                  ; 594
LDC    0            ; THEN: 23 ; 595
JOIN                 ; 596
LDC    1            ; ELSE: 23 ; 597
JOIN                 ; 598
LD     0 0          ;  <== notempty  [Cons d] (as blk) ; 599
ATOM                 ; 600
LDC    1            ; for negation ; 601
SUB                  ; 602
SEL    605 607      ; IF? 24 ; 603
RTN                  ; 604
LDC    1            ; THEN: 24 ; 605
JOIN                 ; 606
LDC    0            ; ELSE: 24 ; 607
JOIN                 ; 608
LD     0 0          ;  <== filter_acc  [ListCons<T> list, Function1<T,Integer> pred, ListCons<T> acc] (as blk) ; 609
ATOM                 ; 610
SEL    613 615      ; IF? 20 ; 611
RTN                  ; 612
LD     0 2          ; THEN: 20 ; 613
JOIN                 ; 614
LD     0 0          ; ELSE: 20 ; 615
CDR                  ; 616
LD     0 1          ; var pred ; 617
LD     0 0          ; var list ; 618
CAR                  ; 619
LD     0 1          ; var pred ; 620
AP     1             ; 621
LDC    1            ; just constant from code ; 622
CEQ                  ; 623
SEL    628 633      ; IF? 93 ; 624
LDF    609          ;  @filter_acc ; 625
AP     3             ; 626
JOIN                 ; 627
LD     0 0          ; THEN: 93 ; 628
CAR                  ; 629
LD     0 2          ; var acc ; 630
CONS                 ; 631
JOIN                 ; 632
LD     0 2          ; ELSE: 93 ; 633
JOIN                 ; 634
LD     0 0          ;  <== map_height  [Cons map] (as blk) ; 635
LDC    0            ; just constant from code ; 636
LDF    646          ;  @elements_counter ; 637
AP     2             ; 638
RTN                  ; 639
LD     0 0          ;  <== map_width  [Cons map] (as blk) ; 640
CAR                  ; 641
LDC    0            ; just constant from code ; 642
LDF    646          ;  @elements_counter ; 643
AP     2             ; 644
RTN                  ; 645
LD     0 0          ;  <== elements_counter  [Cons list, int counter] (as blk) ; 646
ATOM                 ; 647
SEL    650 652      ; IF? 19 ; 648
RTN                  ; 649
LD     0 1          ; THEN: 19 ; 650
JOIN                 ; 651
LD     0 0          ; ELSE: 19 ; 652
CDR                  ; 653
LD     0 1          ; var counter ; 654
LDC    1            ; just constant from code ; 655
ADD                  ; 656
LDF    646          ;  @elements_counter ; 657
AP     2             ; 658
JOIN                 ; 659
LD     0 1          ;  <== zip_with  [Function2<A,B,C> f, ListCons<A> x, ListCons<B> y] (as blk) ; 660
ATOM                 ; 661
SEL    664 666      ; IF? 25 ; 662
RTN                  ; 663
LDC    0            ; THEN: 25 ; 664
JOIN                 ; 665
LD     0 2          ; ELSE: 25 ; 666
ATOM                 ; 667
SEL    670 672      ; IF? 94 ; 668
JOIN                 ; 669
LDC    0            ; THEN: 94 ; 670
JOIN                 ; 671
LD     0 1          ; ELSE: 94 ; 672
CAR                  ; 673
LD     0 2          ; var y ; 674
CAR                  ; 675
LD     0 0          ; var f ; 676
AP     2             ; 677
LD     0 0          ; var f ; 678
LD     0 1          ; var x ; 679
CDR                  ; 680
LD     0 2          ; var y ; 681
CDR                  ; 682
LDF    660          ;  @zip_with ; 683
AP     3             ; 684
CONS                 ; 685
JOIN                 ; 686
LD     0 1          ;  <== zip3_with  [Function3<A,B,C,R> f, ListCons<A> x, ListCons<B> y, ListCons<C> z] (as blk) ; 687
ATOM                 ; 688
SEL    691 693      ; IF? 26 ; 689
RTN                  ; 690
LDC    0            ; THEN: 26 ; 691
JOIN                 ; 692
LD     0 2          ; ELSE: 26 ; 693
ATOM                 ; 694
SEL    697 699      ; IF? 95 ; 695
JOIN                 ; 696
LDC    0            ; THEN: 95 ; 697
JOIN                 ; 698
LD     0 3          ; ELSE: 95 ; 699
ATOM                 ; 700
SEL    703 705      ; IF? 96 ; 701
JOIN                 ; 702
LDC    0            ; THEN: 96 ; 703
JOIN                 ; 704
LD     0 1          ; ELSE: 96 ; 705
CAR                  ; 706
LD     0 2          ; var y ; 707
CAR                  ; 708
LD     0 3          ; var z ; 709
CAR                  ; 710
LD     0 0          ; var f ; 711
AP     3             ; 712
LD     0 0          ; var f ; 713
LD     0 1          ; var x ; 714
CDR                  ; 715
LD     0 2          ; var y ; 716
CDR                  ; 717
LD     0 3          ; var z ; 718
CDR                  ; 719
LDF    687          ;  @zip3_with ; 720
AP     4             ; 721
CONS                 ; 722
JOIN                 ; 723
LD     0 0          ;  <== zip  [final ListCons<A> x, final ListCons<B> y] (as blk) ; 724
ATOM                 ; 725
SEL    728 730      ; IF? 27 ; 726
RTN                  ; 727
LDC    0            ; THEN: 27 ; 728
JOIN                 ; 729
LD     0 1          ; ELSE: 27 ; 730
ATOM                 ; 731
SEL    734 736      ; IF? 97 ; 732
JOIN                 ; 733
LDC    0            ; THEN: 97 ; 734
JOIN                 ; 735
LD     0 0          ; ELSE: 97 ; 736
CAR                  ; 737
LD     0 1          ; var y ; 738
CAR                  ; 739
CONS                 ; 740
LD     0 0          ; var x ; 741
CDR                  ; 742
LD     0 1          ; var y ; 743
CDR                  ; 744
LDF    724          ;  @zip ; 745
AP     2             ; 746
CONS                 ; 747
JOIN                 ; 748
LD     0 1          ;  <== produce_n  [Function1<T,Cons> f, T a, int n] (as blk) ; 749
LD     0 0          ; var f ; 750
AP     1             ; 751
CAR                  ; 752
ST     0 3           ; 753
LD     0 2          ; var n ; 754
LDC    0            ; just constant from code ; 755
CEQ                  ; 756
SEL    759 763      ; IF? 28 ; 757
RTN                  ; 758
LD     0 3          ; THEN: 28 ; 759
LDC    0            ; NULL literal ; 760
CONS                 ; 761
JOIN                 ; 762
LD     0 3          ; ELSE: 28 ; 763
LD     0 0          ; var f ; 764
LD     0 1          ; var a ; 765
LD     0 0          ; var f ; 766
AP     1             ; 767
CDR                  ; 768
LD     0 2          ; var n ; 769
LDC    1            ; just constant from code ; 770
SUB                  ; 771
LDC 0               ; local var space ; 772
LDF    749          ;  @produce_n ; 773
AP     4             ; 774
CONS                 ; 775
JOIN                 ; 776
LD     0 0          ;  <== range_n  [int n] (as blk) ; 777
LDC    0            ; just constant from code ; 778
CEQ                  ; 779
SEL    782 786      ; IF? 29 ; 780
RTN                  ; 781
LD     0 0          ; THEN: 29 ; 782
LDC    0            ; NULL literal ; 783
CONS                 ; 784
JOIN                 ; 785
LD     0 0          ; ELSE: 29 ; 786
LD     0 0          ; var n ; 787
LDC    1            ; just constant from code ; 788
SUB                  ; 789
LDF    777          ;  @range_n ; 790
AP     1             ; 791
CONS                 ; 792
JOIN                 ; 793
LDC    1            ;  <== sorted_node_new  [int key, T val, int lev, SortedMapNode<T> lo, SortedMapNode<T> hi] (as blk) ; 794
LD     0 3          ; var lo ; 795
ATOM                 ; 796
LDC    1            ; for negation ; 797
SUB                  ; 798
SEL    818 821      ; IF? 30 ; 799
ADD                  ; 800
LD     0 4          ; var hi ; 801
ATOM                 ; 802
LDC    1            ; for negation ; 803
SUB                  ; 804
SEL    823 826      ; IF? 31 ; 805
ADD                  ; 806
LD     0 0          ; var key ; 807
LD     0 1          ; var val ; 808
LD     0 2          ; var lev ; 809
LD     0 3          ; var lo ; 810
LD     0 4          ; var hi ; 811
CONS                 ; 812
CONS                 ; 813
CONS                 ; 814
CONS                 ; 815
CONS                 ; 816
RTN                  ; 817
LD     0 3          ; THEN: 30 ; 818
CAR                 ; generateTupleAccess total=6 pos=0 ; 819
JOIN                 ; 820
LDC    0            ; ELSE: 30 ; 821
JOIN                 ; 822
LD     0 4          ; THEN: 31 ; 823
CAR                 ; generateTupleAccess total=6 pos=0 ; 824
JOIN                 ; 825
LDC    0            ; ELSE: 31 ; 826
JOIN                 ; 827
LD     0 0          ;  <== sorted_node_with_lev  [SortedMapNode<T> node, int lev] (as blk) ; 828
CDR                 ; generateTupleAccess total=6 pos=1 ; 829
CAR                  ; 830
LD     0 0          ; var node ; 831
CDR                 ; generateTupleAccess total=6 pos=2 ; 832
CDR                  ; 833
CAR                  ; 834
LD     0 1          ; var lev ; 835
LD     0 0          ; var node ; 836
CDR                 ; generateTupleAccess total=6 pos=4 ; 837
CDR                  ; 838
CDR                  ; 839
CDR                  ; 840
CAR                  ; 841
LD     0 0          ; var node ; 842
CDR                 ; generateTupleAccess total=6 pos=5 ; 843
CDR                  ; 844
CDR                  ; 845
CDR                  ; 846
CDR                  ; 847
LDF    794          ;  @sorted_node_new ; 848
AP     5             ; 849
RTN                  ; 850
LD     0 0          ;  <== sorted_node_with_lo_hi  [SortedMapNode<T> node, SortedMapNode<T> lo, SortedMapNode<T> hi] (as blk) ; 851
CDR                 ; generateTupleAccess total=6 pos=1 ; 852
CAR                  ; 853
LD     0 0          ; var node ; 854
CDR                 ; generateTupleAccess total=6 pos=2 ; 855
CDR                  ; 856
CAR                  ; 857
LD     0 0          ; var node ; 858
CDR                 ; generateTupleAccess total=6 pos=3 ; 859
CDR                  ; 860
CDR                  ; 861
CAR                  ; 862
LD     0 1          ; var lo ; 863
LD     0 2          ; var hi ; 864
LDF    794          ;  @sorted_node_new ; 865
AP     5             ; 866
RTN                  ; 867
LD     0 0          ;  <== sorted_node_with_lo  [SortedMapNode<T> node, SortedMapNode<T> lo] (as blk) ; 868
LD     0 1          ; var lo ; 869
LD     0 0          ; var node ; 870
CDR                 ; generateTupleAccess total=6 pos=5 ; 871
CDR                  ; 872
CDR                  ; 873
CDR                  ; 874
CDR                  ; 875
LDF    851          ;  @sorted_node_with_lo_hi ; 876
AP     3             ; 877
RTN                  ; 878
LD     0 0          ;  <== sorted_node_with_hi  [SortedMapNode<T> node, SortedMapNode<T> hi] (as blk) ; 879
LD     0 0          ; var node ; 880
CDR                 ; generateTupleAccess total=6 pos=4 ; 881
CDR                  ; 882
CDR                  ; 883
CDR                  ; 884
CAR                  ; 885
LD     0 1          ; var hi ; 886
LDF    851          ;  @sorted_node_with_lo_hi ; 887
AP     3             ; 888
RTN                  ; 889
LD     0 0          ;  <== sorted_node_has  [SortedMapNode<T> node, int key] (as blk) ; 890
ATOM                 ; 891
SEL    894 896      ; IF? 32 ; 892
RTN                  ; 893
LDC    0            ; THEN: 32 ; 894
JOIN                 ; 895
LD     0 1          ; ELSE: 32 ; 896
LD     0 0          ; var node ; 897
CDR                 ; generateTupleAccess total=6 pos=1 ; 898
CAR                  ; 899
CEQ                  ; 900
SEL    903 905      ; IF? 98 ; 901
JOIN                 ; 902
LDC    1            ; THEN: 98 ; 903
JOIN                 ; 904
LD     0 0          ; ELSE: 98 ; 905
CDR                 ; generateTupleAccess total=6 pos=1 ; 906
CAR                  ; 907
LD     0 1          ; var key ; 908
CGT                  ; 909
SEL    915 922      ; IF? 99 ; 910
LD     0 1          ; var key ; 911
LDF    890          ;  @sorted_node_has ; 912
AP     2             ; 913
JOIN                 ; 914
LD     0 0          ; THEN: 99 ; 915
CDR                 ; generateTupleAccess total=6 pos=4 ; 916
CDR                  ; 917
CDR                  ; 918
CDR                  ; 919
CAR                  ; 920
JOIN                 ; 921
LD     0 0          ; ELSE: 99 ; 922
CDR                 ; generateTupleAccess total=6 pos=5 ; 923
CDR                  ; 924
CDR                  ; 925
CDR                  ; 926
CDR                  ; 927
JOIN                 ; 928
LD     0 0          ;  <== sorted_node_get  [SortedMapNode<T> node, int key, T def] (as blk) ; 929
ATOM                 ; 930
SEL    933 935      ; IF? 33 ; 931
RTN                  ; 932
LD     0 2          ; THEN: 33 ; 933
JOIN                 ; 934
LD     0 1          ; ELSE: 33 ; 935
LD     0 0          ; var node ; 936
CDR                 ; generateTupleAccess total=6 pos=1 ; 937
CAR                  ; 938
CEQ                  ; 939
SEL    942 947      ; IF? 100 ; 940
JOIN                 ; 941
LD     0 0          ; THEN: 100 ; 942
CDR                 ; generateTupleAccess total=6 pos=2 ; 943
CDR                  ; 944
CAR                  ; 945
JOIN                 ; 946
LD     0 0          ; ELSE: 100 ; 947
CDR                 ; generateTupleAccess total=6 pos=1 ; 948
CAR                  ; 949
LD     0 1          ; var key ; 950
CGT                  ; 951
SEL    958 965      ; IF? 101 ; 952
LD     0 1          ; var key ; 953
LD     0 2          ; var def ; 954
LDF    929          ;  @sorted_node_get ; 955
AP     3             ; 956
JOIN                 ; 957
LD     0 0          ; THEN: 101 ; 958
CDR                 ; generateTupleAccess total=6 pos=4 ; 959
CDR                  ; 960
CDR                  ; 961
CDR                  ; 962
CAR                  ; 963
JOIN                 ; 964
LD     0 0          ; ELSE: 101 ; 965
CDR                 ; generateTupleAccess total=6 pos=5 ; 966
CDR                  ; 967
CDR                  ; 968
CDR                  ; 969
CDR                  ; 970
JOIN                 ; 971
LD     0 0          ;  <== sorted_node_put  [SortedMapNode<T> node, int key, T val] (as blk) ; 972
ATOM                 ; 973
SEL    976 984      ; IF? 34 ; 974
RTN                  ; 975
LD     0 1          ; THEN: 34 ; 976
LD     0 2          ; var val ; 977
LDC    0            ; just constant from code ; 978
LDC    0            ; NULL literal ; 979
LDC    0            ; NULL literal ; 980
LDF    794          ;  @sorted_node_new ; 981
AP     5             ; 982
JOIN                 ; 983
LD     0 1          ; ELSE: 34 ; 984
LD     0 0          ; var node ; 985
CDR                 ; generateTupleAccess total=6 pos=1 ; 986
CAR                  ; 987
CEQ                  ; 988
SEL    991 999      ; IF? 102 ; 989
JOIN                 ; 990
LD     0 2          ; THEN: 102 ; 991
LD     0 0          ; var node ; 992
CDR                 ; generateTupleAccess total=6 pos=2 ; 993
CDR                  ; 994
CAR                  ; 995
CEQ                  ; 996
SEL    1009 1011    ; IF? 103 ; 997
JOIN                 ; 998
LD     0 0          ; ELSE: 102 ; 999
CDR                 ; generateTupleAccess total=6 pos=1 ; 1000
CAR                  ; 1001
LD     0 1          ; var key ; 1002
CGT                  ; 1003
SEL    1033 1048    ; IF? 104 ; 1004
LDC 0               ; local var space ; 1005
LDF    1120         ;  @sorted_node_split ; 1006
AP     2             ; 1007
JOIN                 ; 1008
LD     0 0          ; THEN: 103 ; 1009
JOIN                 ; 1010
LD     0 1          ; ELSE: 103 ; 1011
LD     0 2          ; var val ; 1012
LD     0 0          ; var node ; 1013
CDR                 ; generateTupleAccess total=6 pos=3 ; 1014
CDR                  ; 1015
CDR                  ; 1016
CAR                  ; 1017
LD     0 0          ; var node ; 1018
CDR                 ; generateTupleAccess total=6 pos=4 ; 1019
CDR                  ; 1020
CDR                  ; 1021
CDR                  ; 1022
CAR                  ; 1023
LD     0 0          ; var node ; 1024
CDR                 ; generateTupleAccess total=6 pos=5 ; 1025
CDR                  ; 1026
CDR                  ; 1027
CDR                  ; 1028
CDR                  ; 1029
LDF    794          ;  @sorted_node_new ; 1030
AP     5             ; 1031
JOIN                 ; 1032
LD     0 0          ; THEN: 104 ; 1033
LD     0 0          ; var node ; 1034
CDR                 ; generateTupleAccess total=6 pos=4 ; 1035
CDR                  ; 1036
CDR                  ; 1037
CDR                  ; 1038
CAR                  ; 1039
LD     0 1          ; var key ; 1040
LD     0 2          ; var val ; 1041
LDF    972          ;  @sorted_node_put ; 1042
AP     3             ; 1043
LDC 0               ; local var space ; 1044
LDF    1066         ;  @sorted_node_skew ; 1045
AP     3             ; 1046
JOIN                 ; 1047
LD     0 0          ; ELSE: 104 ; 1048
LD     0 0          ; var node ; 1049
CDR                 ; generateTupleAccess total=6 pos=5 ; 1050
CDR                  ; 1051
CDR                  ; 1052
CDR                  ; 1053
CDR                  ; 1054
LD     0 1          ; var key ; 1055
LD     0 2          ; var val ; 1056
LDF    972          ;  @sorted_node_put ; 1057
AP     3             ; 1058
LDF    879          ;  @sorted_node_with_hi ; 1059
AP     2             ; 1060
LDC    0            ; NULL literal ; 1061
LDC 0               ; local var space ; 1062
LDF    1066         ;  @sorted_node_skew ; 1063
AP     3             ; 1064
JOIN                 ; 1065
LD     0 1          ;  <== sorted_node_skew  [SortedMapNode<T> node, SortedMapNode<T> lo] (as blk) ; 1066
ATOM                 ; 1067
LDC    1            ; for negation ; 1068
SUB                  ; 1069
SEL    1081 1083    ; IF? 35 ; 1070
ST     0 1           ; 1071
LD     0 0          ; var node ; 1072
LD     0 1          ; var lo ; 1073
LDF    868          ;  @sorted_node_with_lo ; 1074
AP     2             ; 1075
ST     0 2           ; 1076
LD     0 1          ; var lo ; 1077
ATOM                 ; 1078
SEL    1090 1092    ; IF? 36 ; 1079
RTN                  ; 1080
LD     0 1          ; THEN: 35 ; 1081
JOIN                 ; 1082
LD     0 0          ; ELSE: 35 ; 1083
CDR                 ; generateTupleAccess total=6 pos=4 ; 1084
CDR                  ; 1085
CDR                  ; 1086
CDR                  ; 1087
CAR                  ; 1088
JOIN                 ; 1089
LD     0 2          ; THEN: 36 ; 1090
JOIN                 ; 1091
LD     0 0          ; ELSE: 36 ; 1092
CDR                 ; generateTupleAccess total=6 pos=3 ; 1093
CDR                  ; 1094
CDR                  ; 1095
CAR                  ; 1096
LD     0 1          ; var lo ; 1097
CDR                 ; generateTupleAccess total=6 pos=3 ; 1098
CDR                  ; 1099
CDR                  ; 1100
CAR                  ; 1101
CGT                  ; 1102
SEL    1105 1107    ; IF? 105 ; 1103
JOIN                 ; 1104
LD     0 2          ; THEN: 105 ; 1105
JOIN                 ; 1106
LD     0 1          ; ELSE: 105 ; 1107
LD     0 0          ; var node ; 1108
LD     0 1          ; var lo ; 1109
CDR                 ; generateTupleAccess total=6 pos=5 ; 1110
CDR                  ; 1111
CDR                  ; 1112
CDR                  ; 1113
CDR                  ; 1114
LDF    868          ;  @sorted_node_with_lo ; 1115
AP     2             ; 1116
LDF    879          ;  @sorted_node_with_hi ; 1117
AP     2             ; 1118
JOIN                 ; 1119
LD     0 0          ;  <== sorted_node_split  [SortedMapNode<T> node] (as blk) ; 1120
CDR                 ; generateTupleAccess total=6 pos=5 ; 1121
CDR                  ; 1122
CDR                  ; 1123
CDR                  ; 1124
CDR                  ; 1125
ST     0 1           ; 1126
LD     0 1          ; var hi ; 1127
ATOM                 ; 1128
SEL    1131 1133    ; IF? 37 ; 1129
RTN                  ; 1130
LD     0 0          ; THEN: 37 ; 1131
JOIN                 ; 1132
LD     0 1          ; ELSE: 37 ; 1133
CDR                 ; generateTupleAccess total=6 pos=5 ; 1134
CDR                  ; 1135
CDR                  ; 1136
CDR                  ; 1137
CDR                  ; 1138
ATOM                 ; 1139
SEL    1142 1144    ; IF? 106 ; 1140
JOIN                 ; 1141
LD     0 0          ; THEN: 106 ; 1142
JOIN                 ; 1143
LD     0 0          ; ELSE: 106 ; 1144
CDR                 ; generateTupleAccess total=6 pos=3 ; 1145
CDR                  ; 1146
CDR                  ; 1147
CAR                  ; 1148
LD     0 1          ; var hi ; 1149
CDR                 ; generateTupleAccess total=6 pos=5 ; 1150
CDR                  ; 1151
CDR                  ; 1152
CDR                  ; 1153
CDR                  ; 1154
CDR                 ; generateTupleAccess total=6 pos=3 ; 1155
CDR                  ; 1156
CDR                  ; 1157
CAR                  ; 1158
CGT                  ; 1159
SEL    1162 1164    ; IF? 107 ; 1160
JOIN                 ; 1161
LD     0 0          ; THEN: 107 ; 1162
JOIN                 ; 1163
LD     0 1          ; ELSE: 107 ; 1164
CDR                 ; generateTupleAccess total=6 pos=1 ; 1165
CAR                  ; 1166
LD     0 1          ; var hi ; 1167
CDR                 ; generateTupleAccess total=6 pos=2 ; 1168
CDR                  ; 1169
CAR                  ; 1170
LD     0 1          ; var hi ; 1171
CDR                 ; generateTupleAccess total=6 pos=3 ; 1172
CDR                  ; 1173
CDR                  ; 1174
CAR                  ; 1175
LDC    1            ; just constant from code ; 1176
ADD                  ; 1177
LD     0 0          ; var node ; 1178
LD     0 1          ; var hi ; 1179
CDR                 ; generateTupleAccess total=6 pos=4 ; 1180
CDR                  ; 1181
CDR                  ; 1182
CDR                  ; 1183
CAR                  ; 1184
LDF    879          ;  @sorted_node_with_hi ; 1185
AP     2             ; 1186
LD     0 1          ; var hi ; 1187
CDR                 ; generateTupleAccess total=6 pos=5 ; 1188
CDR                  ; 1189
CDR                  ; 1190
CDR                  ; 1191
CDR                  ; 1192
LDF    794          ;  @sorted_node_new ; 1193
AP     5             ; 1194
JOIN                 ; 1195
LD     0 0          ;  <== sorted_node_walk  [SortedMapNode<T> node, X acc, Function2<X,Tuple<Integer,T>,X> fun] (as blk) ; 1196
ATOM                 ; 1197
SEL    1200 1202    ; IF? 38 ; 1198
RTN                  ; 1199
LD     0 1          ; THEN: 38 ; 1200
JOIN                 ; 1201
LD     0 0          ; ELSE: 38 ; 1202
CDR                 ; generateTupleAccess total=6 pos=5 ; 1203
CDR                  ; 1204
CDR                  ; 1205
CDR                  ; 1206
CDR                  ; 1207
ATOM                 ; 1208
LDC    1            ; for negation ; 1209
SUB                  ; 1210
SEL    1213 1243    ; IF? 108 ; 1211
JOIN                 ; 1212
LD     0 0          ; THEN: 108 ; 1213
CDR                 ; generateTupleAccess total=6 pos=5 ; 1214
CDR                  ; 1215
CDR                  ; 1216
CDR                  ; 1217
CDR                  ; 1218
LD     0 0          ; var node ; 1219
CDR                 ; generateTupleAccess total=6 pos=4 ; 1220
CDR                  ; 1221
CDR                  ; 1222
CDR                  ; 1223
CAR                  ; 1224
LD     0 1          ; var acc ; 1225
LD     0 2          ; var fun ; 1226
LDF    1196         ;  @sorted_node_walk ; 1227
AP     3             ; 1228
LD     0 0          ; var node ; 1229
CDR                 ; generateTupleAccess total=6 pos=1 ; 1230
CAR                  ; 1231
LD     0 0          ; var node ; 1232
CDR                 ; generateTupleAccess total=6 pos=2 ; 1233
CDR                  ; 1234
CAR                  ; 1235
CONS                 ; 1236
LD     0 2          ; var fun ; 1237
AP     2             ; 1238
LD     0 2          ; var fun ; 1239
LDF    1196         ;  @sorted_node_walk ; 1240
AP     3             ; 1241
JOIN                 ; 1242
LD     0 0          ; ELSE: 108 ; 1243
CDR                 ; generateTupleAccess total=6 pos=4 ; 1244
CDR                  ; 1245
CDR                  ; 1246
CDR                  ; 1247
CAR                  ; 1248
LD     0 1          ; var acc ; 1249
LD     0 2          ; var fun ; 1250
LDF    1196         ;  @sorted_node_walk ; 1251
AP     3             ; 1252
LD     0 0          ; var node ; 1253
CDR                 ; generateTupleAccess total=6 pos=1 ; 1254
CAR                  ; 1255
LD     0 0          ; var node ; 1256
CDR                 ; generateTupleAccess total=6 pos=2 ; 1257
CDR                  ; 1258
CAR                  ; 1259
CONS                 ; 1260
LD     0 2          ; var fun ; 1261
AP     2             ; 1262
JOIN                 ; 1263
LD     0 0          ;  <== sorted_map_count  [SortedMap<T> m] (as blk) ; 1264
CAR                 ; generateTupleAccess total=2 pos=0 ; 1265
ATOM                 ; 1266
LDC    1            ; for negation ; 1267
SUB                  ; 1268
SEL    1271 1275    ; IF? 39 ; 1269
RTN                  ; 1270
LD     0 0          ; THEN: 39 ; 1271
CAR                 ; generateTupleAccess total=2 pos=0 ; 1272
CAR                 ; generateTupleAccess total=6 pos=0 ; 1273
JOIN                 ; 1274
LDC    0            ; ELSE: 39 ; 1275
JOIN                 ; 1276
LD     0 0          ;  <== sorted_map_contains  [SortedMap<T> m, int key] (as blk) ; 1277
CAR                 ; generateTupleAccess total=2 pos=0 ; 1278
ATOM                 ; 1279
LDC    1            ; for negation ; 1280
SUB                  ; 1281
SEL    1284 1290    ; IF? 40 ; 1282
RTN                  ; 1283
LD     0 0          ; THEN: 40 ; 1284
CAR                 ; generateTupleAccess total=2 pos=0 ; 1285
LD     0 1          ; var key ; 1286
LDF    890          ;  @sorted_node_has ; 1287
AP     2             ; 1288
JOIN                 ; 1289
LDC    0            ; ELSE: 40 ; 1290
JOIN                 ; 1291
LD     0 0          ;  <== sorted_map_get  [SortedMap<T> m, int key, T def] (as blk) ; 1292
CAR                 ; generateTupleAccess total=2 pos=0 ; 1293
ATOM                 ; 1294
LDC    1            ; for negation ; 1295
SUB                  ; 1296
SEL    1299 1306    ; IF? 41 ; 1297
RTN                  ; 1298
LD     0 0          ; THEN: 41 ; 1299
CAR                 ; generateTupleAccess total=2 pos=0 ; 1300
LD     0 1          ; var key ; 1301
LD     0 2          ; var def ; 1302
LDF    929          ;  @sorted_node_get ; 1303
AP     3             ; 1304
JOIN                 ; 1305
LD     0 2          ; ELSE: 41 ; 1306
JOIN                 ; 1307
LD     0 0          ;  <== sorted_map_assoc  [SortedMap<T> m, int key, T val] (as blk) ; 1308
CAR                 ; generateTupleAccess total=2 pos=0 ; 1309
LD     0 1          ; var key ; 1310
LD     0 2          ; var val ; 1311
LDF    972          ;  @sorted_node_put ; 1312
AP     3             ; 1313
LDC    0            ; just constant from code ; 1314
CONS                 ; 1315
RTN                  ; 1316
LD     0 1          ;  <== sorted_map_assoc_all  [SortedMap<T> m, ListCons<Tuple<Integer,T>> l] (as blk) ; 1317
LD     0 0          ; var m ; 1318
LDF    10212        ;  @lambda_1003 ; 1319
LDF    386          ;  @fold0 ; 1320
AP     3             ; 1321
RTN                  ; 1322
LD     0 0          ;  <== sorted_map_walk  [SortedMap<T> map, X acc, Function2<X,Tuple<Integer,T>,X> fun] (as blk) ; 1323
CAR                 ; generateTupleAccess total=2 pos=0 ; 1324
ATOM                 ; 1325
SEL    1328 1330    ; IF? 42 ; 1326
RTN                  ; 1327
LD     0 1          ; THEN: 42 ; 1328
JOIN                 ; 1329
LD     0 0          ; ELSE: 42 ; 1330
CAR                 ; generateTupleAccess total=2 pos=0 ; 1331
LD     0 1          ; var acc ; 1332
LD     0 2          ; var fun ; 1333
LDF    1196         ;  @sorted_node_walk ; 1334
AP     3             ; 1335
JOIN                 ; 1336
LD     0 1          ;  <== ghcstate_read_val  [GHCState state, Cons<Integer,Integer> val_cons] (as blk) ; 1337
CAR                  ; 1338
ST     0 2           ; 1339
LD     0 1          ; var val_cons ; 1340
CDR                  ; 1341
ST     0 3           ; 1342
LD     0 2          ; var val_tag ; 1343
LDC    3            ; just constant from code ; 1344
CGT                  ; 1345
SEL    1352 1354     ; 1346
LD     0 2          ; var val_tag ; 1347
LDC    0            ; Named Const = Args.REGISTER ; 1348
CEQ                  ; 1349
SEL    1355 1363    ; IF? 43 ; 1350
RTN                  ; 1351
BRK                 ; branch@1352 ; 1352
JOIN                 ; 1353
JOIN                ; branch@1354 ; 1354
LD     0 0          ; THEN: 43 ; 1355
CDR                 ; generateTupleAccess total=3 pos=1 ; 1356
CAR                  ; 1357
LD     0 3          ; var val ; 1358
LDC    0            ; just constant from code ; 1359
LDF    1292         ;  @sorted_map_get ; 1360
AP     3             ; 1361
JOIN                 ; 1362
LD     0 2          ; ELSE: 43 ; 1363
LDC    1            ; Named Const = Args.REGISTER_INDIRECT ; 1364
CEQ                  ; 1365
SEL    1368 1382    ; IF? 109 ; 1366
JOIN                 ; 1367
LD     0 0          ; THEN: 109 ; 1368
CDR                 ; generateTupleAccess total=3 pos=2 ; 1369
CDR                  ; 1370
LD     0 0          ; var state ; 1371
CDR                 ; generateTupleAccess total=3 pos=1 ; 1372
CAR                  ; 1373
LD     0 3          ; var val ; 1374
LDC    0            ; just constant from code ; 1375
LDF    1292         ;  @sorted_map_get ; 1376
AP     3             ; 1377
LDC    0            ; just constant from code ; 1378
LDF    1292         ;  @sorted_map_get ; 1379
AP     3             ; 1380
JOIN                 ; 1381
LD     0 2          ; ELSE: 109 ; 1382
LDC    2            ; Named Const = Args.CONSTANT ; 1383
CEQ                  ; 1384
SEL    1387 1389    ; IF? 110 ; 1385
JOIN                 ; 1386
LD     0 3          ; THEN: 110 ; 1387
JOIN                 ; 1388
LD     0 0          ; ELSE: 110 ; 1389
CDR                 ; generateTupleAccess total=3 pos=2 ; 1390
CDR                  ; 1391
LD     0 3          ; var val ; 1392
LDC    0            ; just constant from code ; 1393
LDF    1292         ;  @sorted_map_get ; 1394
AP     3             ; 1395
JOIN                 ; 1396
LD     0 1          ;  <== ghcstate_write_val  [GHCState state, Cons arg_cons, Integer val] (as blk) ; 1397
CAR                  ; 1398
ST     0 3           ; 1399
LD     0 3          ; var arg_tag ; 1400
LDC    3            ; just constant from code ; 1401
CGT                  ; 1402
SEL    1413 1415     ; 1403
LD     0 3          ; var arg_tag ; 1404
LDC    2            ; just constant from code ; 1405
CEQ                  ; 1406
SEL    1416 1418     ; 1407
LD     0 3          ; var arg_tag ; 1408
LDC    0            ; just constant from code ; 1409
CEQ                  ; 1410
SEL    1419 1435    ; IF? 44 ; 1411
RTN                  ; 1412
BRK                 ; branch@1413 ; 1413
JOIN                 ; 1414
JOIN                ; branch@1415 ; 1415
BRK                 ; branch@1416 ; 1416
JOIN                 ; 1417
JOIN                ; branch@1418 ; 1418
LD     0 0          ; THEN: 44 ; 1419
CAR                 ; generateTupleAccess total=3 pos=0 ; 1420
LD     0 0          ; var state ; 1421
CDR                 ; generateTupleAccess total=3 pos=1 ; 1422
CAR                  ; 1423
LD     0 1          ; var arg_cons ; 1424
CDR                  ; 1425
LD     0 2          ; var val ; 1426
LDF    1308         ;  @sorted_map_assoc ; 1427
AP     3             ; 1428
LD     0 0          ; var state ; 1429
CDR                 ; generateTupleAccess total=3 pos=2 ; 1430
CDR                  ; 1431
CONS                 ; 1432
CONS                 ; 1433
JOIN                 ; 1434
LD     0 3          ; ELSE: 44 ; 1435
LDC    1            ; just constant from code ; 1436
CEQ                  ; 1437
SEL    1440 1462    ; IF? 111 ; 1438
JOIN                 ; 1439
LD     0 0          ; THEN: 111 ; 1440
CAR                 ; generateTupleAccess total=3 pos=0 ; 1441
LD     0 0          ; var state ; 1442
CDR                 ; generateTupleAccess total=3 pos=1 ; 1443
CAR                  ; 1444
LD     0 0          ; var state ; 1445
CDR                 ; generateTupleAccess total=3 pos=1 ; 1446
CAR                  ; 1447
LD     0 1          ; var arg_cons ; 1448
CDR                  ; 1449
LDC    0            ; just constant from code ; 1450
LDF    1292         ;  @sorted_map_get ; 1451
AP     3             ; 1452
LD     0 2          ; var val ; 1453
LDF    1308         ;  @sorted_map_assoc ; 1454
AP     3             ; 1455
LD     0 0          ; var state ; 1456
CDR                 ; generateTupleAccess total=3 pos=2 ; 1457
CDR                  ; 1458
CONS                 ; 1459
CONS                 ; 1460
JOIN                 ; 1461
LD     0 0          ; ELSE: 111 ; 1462
CAR                 ; generateTupleAccess total=3 pos=0 ; 1463
LD     0 0          ; var state ; 1464
CDR                 ; generateTupleAccess total=3 pos=1 ; 1465
CAR                  ; 1466
LD     0 0          ; var state ; 1467
CDR                 ; generateTupleAccess total=3 pos=2 ; 1468
CDR                  ; 1469
LD     0 1          ; var arg_cons ; 1470
CDR                  ; 1471
LD     0 2          ; var val ; 1472
LDF    1308         ;  @sorted_map_assoc ; 1473
AP     3             ; 1474
CONS                 ; 1475
CONS                 ; 1476
JOIN                 ; 1477
LD     0 0          ;  <== ghcstate_assoc  [GHCState state, Cons arg_cons, Cons val_cons] (as blk) ; 1478
LD     0 2          ; var val_cons ; 1479
LDC 0               ; local var space ; 1480
LDC 0               ; local var space ; 1481
LDF    1337         ;  @ghcstate_read_val ; 1482
AP     4             ; 1483
ST     0 3           ; 1484
LD     0 0          ; var state ; 1485
LD     0 1          ; var arg_cons ; 1486
LD     0 3          ; var val ; 1487
LDC 0               ; local var space ; 1488
LDF    1397         ;  @ghcstate_write_val ; 1489
AP     4             ; 1490
RTN                  ; 1491
LD     0 0          ;  <== processGhostInfoRequest  [WorldState world, GHCState state, GhostInfo ghostInfo, Integer index, int requestType] (as blk) ; 1492
CDR                 ; generateTupleAccess total=4 pos=2 ; 1493
CDR                  ; 1494
CAR                  ; 1495
LD     0 3          ; var index ; 1496
LD     0 1          ; var state ; 1497
CAR                 ; generateTupleAccess total=3 pos=0 ; 1498
LDF    469          ;  @list_item_def ; 1499
AP     3             ; 1500
ST     0 5           ; 1501
LDC    4            ; just constant from code ; 1502
LD     0 4          ; var requestType ; 1503
CEQ                  ; 1504
SEL    1507 1529    ; IF? 45 ; 1505
RTN                  ; 1506
LD     0 5          ; THEN: 45 ; 1507
LD     0 1          ; var state ; 1508
CDR                 ; generateTupleAccess total=3 pos=1 ; 1509
CAR                  ; 1510
LDC    0            ; just constant from code ; 1511
LD     0 2          ; var ghostInfo ; 1512
CAR                 ; generateTupleAccess total=3 pos=0 ; 1513
CAR                 ; generateTupleAccess total=2 pos=0 ; 1514
LDF    1308         ;  @sorted_map_assoc ; 1515
AP     3             ; 1516
LDC    1            ; just constant from code ; 1517
LD     0 2          ; var ghostInfo ; 1518
CAR                 ; generateTupleAccess total=3 pos=0 ; 1519
CDR                 ; generateTupleAccess total=2 pos=1 ; 1520
LDF    1308         ;  @sorted_map_assoc ; 1521
AP     3             ; 1522
LD     0 1          ; var state ; 1523
CDR                 ; generateTupleAccess total=3 pos=2 ; 1524
CDR                  ; 1525
CONS                 ; 1526
CONS                 ; 1527
JOIN                 ; 1528
LDC    5            ; ELSE: 45 ; 1529
LD     0 4          ; var requestType ; 1530
CEQ                  ; 1531
SEL    1534 1558    ; IF? 112 ; 1532
JOIN                 ; 1533
LD     0 5          ; THEN: 112 ; 1534
LD     0 1          ; var state ; 1535
CDR                 ; generateTupleAccess total=3 pos=1 ; 1536
CAR                  ; 1537
LDC    0            ; just constant from code ; 1538
LD     0 5          ; var gs ; 1539
CDR                 ; generateTupleAccess total=3 pos=1 ; 1540
CAR                  ; 1541
CAR                 ; generateTupleAccess total=2 pos=0 ; 1542
LDF    1308         ;  @sorted_map_assoc ; 1543
AP     3             ; 1544
LDC    1            ; just constant from code ; 1545
LD     0 5          ; var gs ; 1546
CDR                 ; generateTupleAccess total=3 pos=1 ; 1547
CAR                  ; 1548
CDR                 ; generateTupleAccess total=2 pos=1 ; 1549
LDF    1308         ;  @sorted_map_assoc ; 1550
AP     3             ; 1551
LD     0 1          ; var state ; 1552
CDR                 ; generateTupleAccess total=3 pos=2 ; 1553
CDR                  ; 1554
CONS                 ; 1555
CONS                 ; 1556
JOIN                 ; 1557
LD     0 5          ; ELSE: 112 ; 1558
LD     0 1          ; var state ; 1559
CDR                 ; generateTupleAccess total=3 pos=1 ; 1560
CAR                  ; 1561
LDC    0            ; just constant from code ; 1562
LD     0 5          ; var gs ; 1563
CAR                 ; generateTupleAccess total=3 pos=0 ; 1564
LDF    1308         ;  @sorted_map_assoc ; 1565
AP     3             ; 1566
LDC    1            ; just constant from code ; 1567
LD     0 5          ; var gs ; 1568
CDR                 ; generateTupleAccess total=3 pos=2 ; 1569
CDR                  ; 1570
LDF    1308         ;  @sorted_map_assoc ; 1571
AP     3             ; 1572
LD     0 1          ; var state ; 1573
CDR                 ; generateTupleAccess total=3 pos=2 ; 1574
CDR                  ; 1575
CONS                 ; 1576
CONS                 ; 1577
JOIN                 ; 1578
LD     0 1          ;  <== processGhostInt  [WorldState world, GHCState state, GhostInfo ghostInfo, Integer num, Cons arg] (as blk) ; 1579
CAR                 ; generateTupleAccess total=3 pos=0 ; 1580
ST     0 5           ; 1581
LD     0 2          ; var ghostInfo ; 1582
CDR                 ; generateTupleAccess total=3 pos=2 ; 1583
CDR                  ; 1584
ST     0 6           ; 1585
LDC    0            ; just constant from code ; 1586
LD     0 3          ; var num ; 1587
CEQ                  ; 1588
SEL    1591 1614    ; IF? 46 ; 1589
RTN                  ; 1590
LD     0 5          ; THEN: 46 ; 1591
CAR                 ; generateTupleAccess total=3 pos=0 ; 1592
LD     0 5          ; var gs ; 1593
CDR                 ; generateTupleAccess total=3 pos=1 ; 1594
CAR                  ; 1595
LD     0 1          ; var state ; 1596
CDR                 ; generateTupleAccess total=3 pos=1 ; 1597
CAR                  ; 1598
LDC    0            ; just constant from code ; 1599
LDC    0            ; just constant from code ; 1600
LDF    1292         ;  @sorted_map_get ; 1601
AP     3             ; 1602
CONS                 ; 1603
CONS                 ; 1604
LD     0 1          ; var state ; 1605
CDR                 ; generateTupleAccess total=3 pos=1 ; 1606
CAR                  ; 1607
LD     0 1          ; var state ; 1608
CDR                 ; generateTupleAccess total=3 pos=2 ; 1609
CDR                  ; 1610
CONS                 ; 1611
CONS                 ; 1612
JOIN                 ; 1613
LDC    1            ; ELSE: 46 ; 1614
LD     0 3          ; var num ; 1615
CEQ                  ; 1616
SEL    1619 1647    ; IF? 113 ; 1617
JOIN                 ; 1618
LD     0 5          ; THEN: 113 ; 1619
LD     0 1          ; var state ; 1620
CDR                 ; generateTupleAccess total=3 pos=1 ; 1621
CAR                  ; 1622
LDC    0            ; just constant from code ; 1623
LD     0 0          ; var world ; 1624
CDR                 ; generateTupleAccess total=4 pos=1 ; 1625
CAR                  ; 1626
CDR                 ; generateTupleAccess total=5 pos=1 ; 1627
CAR                  ; 1628
CAR                 ; generateTupleAccess total=2 pos=0 ; 1629
LDF    1308         ;  @sorted_map_assoc ; 1630
AP     3             ; 1631
LDC    1            ; just constant from code ; 1632
LD     0 0          ; var world ; 1633
CDR                 ; generateTupleAccess total=4 pos=1 ; 1634
CAR                  ; 1635
CDR                 ; generateTupleAccess total=5 pos=1 ; 1636
CAR                  ; 1637
CDR                 ; generateTupleAccess total=2 pos=1 ; 1638
LDF    1308         ;  @sorted_map_assoc ; 1639
AP     3             ; 1640
LD     0 1          ; var state ; 1641
CDR                 ; generateTupleAccess total=3 pos=2 ; 1642
CDR                  ; 1643
CONS                 ; 1644
CONS                 ; 1645
JOIN                 ; 1646
LDC    2            ; ELSE: 113 ; 1647
LD     0 3          ; var num ; 1648
CEQ                  ; 1649
SEL    1652 1680    ; IF? 114 ; 1650
JOIN                 ; 1651
LD     0 5          ; THEN: 114 ; 1652
LD     0 1          ; var state ; 1653
CDR                 ; generateTupleAccess total=3 pos=1 ; 1654
CAR                  ; 1655
LDC    0            ; just constant from code ; 1656
LD     0 0          ; var world ; 1657
CDR                 ; generateTupleAccess total=4 pos=1 ; 1658
CAR                  ; 1659
CDR                 ; generateTupleAccess total=5 pos=1 ; 1660
CAR                  ; 1661
CAR                 ; generateTupleAccess total=2 pos=0 ; 1662
LDF    1308         ;  @sorted_map_assoc ; 1663
AP     3             ; 1664
LDC    1            ; just constant from code ; 1665
LD     0 0          ; var world ; 1666
CDR                 ; generateTupleAccess total=4 pos=1 ; 1667
CAR                  ; 1668
CDR                 ; generateTupleAccess total=5 pos=1 ; 1669
CAR                  ; 1670
CDR                 ; generateTupleAccess total=2 pos=1 ; 1671
LDF    1308         ;  @sorted_map_assoc ; 1672
AP     3             ; 1673
LD     0 1          ; var state ; 1674
CDR                 ; generateTupleAccess total=3 pos=2 ; 1675
CDR                  ; 1676
CONS                 ; 1677
CONS                 ; 1678
JOIN                 ; 1679
LDC    3            ; ELSE: 114 ; 1680
LD     0 3          ; var num ; 1681
CEQ                  ; 1682
SEL    1685 1699    ; IF? 115 ; 1683
JOIN                 ; 1684
LD     0 5          ; THEN: 115 ; 1685
LD     0 1          ; var state ; 1686
CDR                 ; generateTupleAccess total=3 pos=1 ; 1687
CAR                  ; 1688
LDC    0            ; just constant from code ; 1689
LD     0 6          ; var currentGhostIndex ; 1690
LDF    1308         ;  @sorted_map_assoc ; 1691
AP     3             ; 1692
LD     0 1          ; var state ; 1693
CDR                 ; generateTupleAccess total=3 pos=2 ; 1694
CDR                  ; 1695
CONS                 ; 1696
CONS                 ; 1697
JOIN                 ; 1698
LDC    4            ; ELSE: 115 ; 1699
LD     0 3          ; var num ; 1700
CEQ                  ; 1701
SEL    1704 1719    ; IF? 116 ; 1702
JOIN                 ; 1703
LD     0 0          ; THEN: 116 ; 1704
LD     0 1          ; var state ; 1705
LD     0 2          ; var ghostInfo ; 1706
LD     0 1          ; var state ; 1707
CDR                 ; generateTupleAccess total=3 pos=1 ; 1708
CAR                  ; 1709
LDC    0            ; just constant from code ; 1710
LDC    0            ; just constant from code ; 1711
LDF    1292         ;  @sorted_map_get ; 1712
AP     3             ; 1713
LDC    4            ; just constant from code ; 1714
LDC 0               ; local var space ; 1715
LDF    1492         ;  @processGhostInfoRequest ; 1716
AP     6             ; 1717
JOIN                 ; 1718
LDC    5            ; ELSE: 116 ; 1719
LD     0 3          ; var num ; 1720
CEQ                  ; 1721
SEL    1724 1739    ; IF? 117 ; 1722
JOIN                 ; 1723
LD     0 0          ; THEN: 117 ; 1724
LD     0 1          ; var state ; 1725
LD     0 2          ; var ghostInfo ; 1726
LD     0 1          ; var state ; 1727
CDR                 ; generateTupleAccess total=3 pos=1 ; 1728
CAR                  ; 1729
LDC    0            ; just constant from code ; 1730
LDC    0            ; just constant from code ; 1731
LDF    1292         ;  @sorted_map_get ; 1732
AP     3             ; 1733
LDC    5            ; just constant from code ; 1734
LDC 0               ; local var space ; 1735
LDF    1492         ;  @processGhostInfoRequest ; 1736
AP     6             ; 1737
JOIN                 ; 1738
LDC    6            ; ELSE: 117 ; 1739
LD     0 3          ; var num ; 1740
CEQ                  ; 1741
SEL    1744 1759    ; IF? 118 ; 1742
JOIN                 ; 1743
LD     0 0          ; THEN: 118 ; 1744
LD     0 1          ; var state ; 1745
LD     0 2          ; var ghostInfo ; 1746
LD     0 1          ; var state ; 1747
CDR                 ; generateTupleAccess total=3 pos=1 ; 1748
CAR                  ; 1749
LDC    0            ; just constant from code ; 1750
LDC    0            ; just constant from code ; 1751
LDF    1292         ;  @sorted_map_get ; 1752
AP     3             ; 1753
LDC    6            ; just constant from code ; 1754
LDC 0               ; local var space ; 1755
LDF    1492         ;  @processGhostInfoRequest ; 1756
AP     6             ; 1757
JOIN                 ; 1758
LDC    7            ; ELSE: 118 ; 1759
LD     0 3          ; var num ; 1760
CEQ                  ; 1761
SEL    1764 1795    ; IF? 119 ; 1762
JOIN                 ; 1763
LD     0 5          ; THEN: 119 ; 1764
LD     0 1          ; var state ; 1765
CDR                 ; generateTupleAccess total=3 pos=1 ; 1766
CAR                  ; 1767
LDC    0            ; just constant from code ; 1768
LD     0 0          ; var world ; 1769
CAR                 ; generateTupleAccess total=4 pos=0 ; 1770
LD     0 1          ; var state ; 1771
CDR                 ; generateTupleAccess total=3 pos=1 ; 1772
CAR                  ; 1773
LDC    0            ; just constant from code ; 1774
LDC    0            ; just constant from code ; 1775
LDF    1292         ;  @sorted_map_get ; 1776
AP     3             ; 1777
LD     0 1          ; var state ; 1778
CDR                 ; generateTupleAccess total=3 pos=1 ; 1779
CAR                  ; 1780
LDC    1            ; just constant from code ; 1781
LDC    0            ; just constant from code ; 1782
LDF    1292         ;  @sorted_map_get ; 1783
AP     3             ; 1784
LDF    4113         ;  @getMapItem ; 1785
AP     3             ; 1786
LDF    1308         ;  @sorted_map_assoc ; 1787
AP     3             ; 1788
LD     0 1          ; var state ; 1789
CDR                 ; generateTupleAccess total=3 pos=2 ; 1790
CDR                  ; 1791
CONS                 ; 1792
CONS                 ; 1793
JOIN                 ; 1794
LD     0 1          ; ELSE: 119 ; 1795
JOIN                 ; 1796
LD     0 1          ;  <== produce_n  [Function1<T,Cons> f, T a, int n] (as blk) ; 1797
LD     0 0          ; var f ; 1798
AP     1             ; 1799
CAR                  ; 1800
ST     0 3           ; 1801
LD     0 2          ; var n ; 1802
LDC    0            ; just constant from code ; 1803
CEQ                  ; 1804
SEL    1807 1811    ; IF? 47 ; 1805
RTN                  ; 1806
LD     0 3          ; THEN: 47 ; 1807
LDC    0            ; NULL literal ; 1808
CONS                 ; 1809
JOIN                 ; 1810
LD     0 3          ; ELSE: 47 ; 1811
LD     0 0          ; var f ; 1812
LD     0 1          ; var a ; 1813
LD     0 0          ; var f ; 1814
AP     1             ; 1815
CDR                  ; 1816
LD     0 2          ; var n ; 1817
LDC    1            ; just constant from code ; 1818
SUB                  ; 1819
LDC 0               ; local var space ; 1820
LDF    749          ;  @produce_n ; 1821
AP     4             ; 1822
CONS                 ; 1823
JOIN                 ; 1824
LDF    10220        ;  <== bit_split  [Integer x] (as blk), ALSO: @lambda_1004 ; 1825
LD     0 0          ; var x ; 1826
LDC    7            ; just constant from code ; 1827
LDC 0               ; local var space ; 1828
LDF    749          ;  @produce_n ; 1829
AP     4             ; 1830
RTN                  ; 1831
LD     0 0          ;  <== emulate_bitop  [Integer x, Integer y, Function2<Integer,Integer,Integer> f] (as blk) ; 1832
LDF    1825         ;  @bit_split ; 1833
AP     1             ; 1834
ST     0 3           ; 1835
LD     0 1          ; var y ; 1836
LDF    1825         ;  @bit_split ; 1837
AP     1             ; 1838
ST     0 4           ; 1839
LDF    10237        ;  @lambda_1005 ; 1840
LDC    0            ; just constant from code ; 1841
LD     0 2          ; var f ; 1842
LD     0 3          ; var bits_x ; 1843
LD     0 4          ; var bits_y ; 1844
LDF    660          ;  @zip_with ; 1845
AP     3             ; 1846
LDF    48           ;  @foldr ; 1847
AP     3             ; 1848
RTN                  ; 1849
LD     0 0          ;  <== intCompare  [int a, int b] (as blk) ; 1850
LD     0 1          ; var b ; 1851
CEQ                  ; 1852
SEL    1855 1857    ; IF? 48 ; 1853
RTN                  ; 1854
LDC    1            ; THEN: 48 ; 1855
JOIN                 ; 1856
LDC    0            ; ELSE: 48 ; 1857
JOIN                 ; 1858
LD     0 0          ;  <== ghcstate_bitop  [GHCState state, Cons arg_cons, Cons val_cons, int type] (as blk) ; 1859
LD     0 1          ; var arg_cons ; 1860
LDC 0               ; local var space ; 1861
LDC 0               ; local var space ; 1862
LDF    1337         ;  @ghcstate_read_val ; 1863
AP     4             ; 1864
ST     0 4           ; 1865
LD     0 0          ; var state ; 1866
LD     0 2          ; var val_cons ; 1867
LDC 0               ; local var space ; 1868
LDC 0               ; local var space ; 1869
LDF    1337         ;  @ghcstate_read_val ; 1870
AP     4             ; 1871
ST     0 5           ; 1872
LD     0 4          ; var arg ; 1873
LD     0 5          ; var val ; 1874
LD     0 3          ; var type ; 1875
LDC    7            ; Named Const = GHCOps.AND ; 1876
CEQ                  ; 1877
SEL    1891 1893    ; IF? 49 ; 1878
LDC 0               ; local var space ; 1879
LDC 0               ; local var space ; 1880
LDF    1832         ;  @emulate_bitop ; 1881
AP     5             ; 1882
ST     0 6           ; 1883
LD     0 0          ; var state ; 1884
LD     0 1          ; var arg_cons ; 1885
LD     0 6          ; var result ; 1886
LDC 0               ; local var space ; 1887
LDF    1397         ;  @ghcstate_write_val ; 1888
AP     4             ; 1889
RTN                  ; 1890
LDF    11129        ; THEN: 49, ALSO: @lambda_1073 ; 1891
JOIN                 ; 1892
LD     0 3          ; ELSE: 49 ; 1893
LDC    8            ; Named Const = GHCOps.OR ; 1894
CEQ                  ; 1895
SEL    1898 1900    ; IF? 120 ; 1896
JOIN                 ; 1897
LDF    11133        ; THEN: 120, ALSO: @lambda_1074 ; 1898
JOIN                 ; 1899
LDF    11144        ; ELSE: 120, ALSO: @lambda_1075 ; 1900
JOIN                 ; 1901
LD     0 5          ;  <== runGhostStep  [SortedMap<Cons> prog, WorldState world, GhostInfo ghostInfo, int lev, GHCState state, Cons step] (as blk) ; 1902
CAR                  ; 1903
ST     0 6           ; 1904
LD     0 5          ; var step ; 1905
CDR                  ; 1906
ST     0 7           ; 1907
LD     0 4          ; var state ; 1908
CAR                 ; generateTupleAccess total=3 pos=0 ; 1909
LD     0 4          ; var state ; 1910
CDR                 ; generateTupleAccess total=3 pos=1 ; 1911
CAR                  ; 1912
LDC    8            ; just constant from code ; 1913
LD     0 4          ; var state ; 1914
CDR                 ; generateTupleAccess total=3 pos=1 ; 1915
CAR                  ; 1916
LDC    8            ; just constant from code ; 1917
LDC    0            ; just constant from code ; 1918
LDF    1292         ;  @sorted_map_get ; 1919
AP     3             ; 1920
LDC    1            ; just constant from code ; 1921
ADD                  ; 1922
LDF    1308         ;  @sorted_map_assoc ; 1923
AP     3             ; 1924
LD     0 4          ; var state ; 1925
CDR                 ; generateTupleAccess total=3 pos=2 ; 1926
CDR                  ; 1927
CONS                 ; 1928
CONS                 ; 1929
ST     0 8           ; 1930
LDC    0            ; Named Const = GHCOps.MOV ; 1931
LD     0 6          ; var opcode ; 1932
CEQ                  ; 1933
SEL    1936 1954    ; IF? 50 ; 1934
RTN                  ; 1935
LD     0 0          ; THEN: 50 ; 1936
LD     0 1          ; var world ; 1937
LD     0 2          ; var ghostInfo ; 1938
LD     0 3          ; var lev ; 1939
LD     0 8          ; var inc_pc ; 1940
LD     0 7          ; var args ; 1941
CAR                  ; 1942
LD     0 7          ; var args ; 1943
CDR                  ; 1944
CAR                  ; 1945
LDC 0               ; local var space ; 1946
LDF    1478         ;  @ghcstate_assoc ; 1947
AP     4             ; 1948
LDC 0               ; local var space ; 1949
LDC 0               ; local var space ; 1950
LDF    2414         ;  @runGhost ; 1951
AP     7             ; 1952
JOIN                 ; 1953
LDC    1            ; ELSE: 50 ; 1954
LD     0 6          ; var opcode ; 1955
CEQ                  ; 1956
SEL    1959 1983    ; IF? 121 ; 1957
JOIN                 ; 1958
LD     0 0          ; THEN: 121 ; 1959
LD     0 1          ; var world ; 1960
LD     0 2          ; var ghostInfo ; 1961
LD     0 3          ; var lev ; 1962
LD     0 8          ; var inc_pc ; 1963
LD     0 7          ; var args ; 1964
CAR                  ; 1965
LD     0 8          ; var inc_pc ; 1966
LD     0 7          ; var args ; 1967
CAR                  ; 1968
LDC 0               ; local var space ; 1969
LDC 0               ; local var space ; 1970
LDF    1337         ;  @ghcstate_read_val ; 1971
AP     4             ; 1972
LDC    1            ; just constant from code ; 1973
ADD                  ; 1974
LDC 0               ; local var space ; 1975
LDF    1397         ;  @ghcstate_write_val ; 1976
AP     4             ; 1977
LDC 0               ; local var space ; 1978
LDC 0               ; local var space ; 1979
LDF    2414         ;  @runGhost ; 1980
AP     7             ; 1981
JOIN                 ; 1982
LDC    2            ; ELSE: 121 ; 1983
LD     0 6          ; var opcode ; 1984
CEQ                  ; 1985
SEL    1988 2012    ; IF? 122 ; 1986
JOIN                 ; 1987
LD     0 0          ; THEN: 122 ; 1988
LD     0 1          ; var world ; 1989
LD     0 2          ; var ghostInfo ; 1990
LD     0 3          ; var lev ; 1991
LD     0 8          ; var inc_pc ; 1992
LD     0 7          ; var args ; 1993
CAR                  ; 1994
LD     0 8          ; var inc_pc ; 1995
LD     0 7          ; var args ; 1996
CAR                  ; 1997
LDC 0               ; local var space ; 1998
LDC 0               ; local var space ; 1999
LDF    1337         ;  @ghcstate_read_val ; 2000
AP     4             ; 2001
LDC    1            ; just constant from code ; 2002
SUB                  ; 2003
LDC 0               ; local var space ; 2004
LDF    1397         ;  @ghcstate_write_val ; 2005
AP     4             ; 2006
LDC 0               ; local var space ; 2007
LDC 0               ; local var space ; 2008
LDF    2414         ;  @runGhost ; 2009
AP     7             ; 2010
JOIN                 ; 2011
LDC    3            ; ELSE: 122 ; 2012
LD     0 6          ; var opcode ; 2013
CEQ                  ; 2014
SEL    2017 2048    ; IF? 123 ; 2015
JOIN                 ; 2016
LD     0 0          ; THEN: 123 ; 2017
LD     0 1          ; var world ; 2018
LD     0 2          ; var ghostInfo ; 2019
LD     0 3          ; var lev ; 2020
LD     0 8          ; var inc_pc ; 2021
LD     0 7          ; var args ; 2022
CAR                  ; 2023
LD     0 8          ; var inc_pc ; 2024
LD     0 7          ; var args ; 2025
CAR                  ; 2026
LDC 0               ; local var space ; 2027
LDC 0               ; local var space ; 2028
LDF    1337         ;  @ghcstate_read_val ; 2029
AP     4             ; 2030
LD     0 8          ; var inc_pc ; 2031
LD     0 7          ; var args ; 2032
CDR                  ; 2033
CAR                  ; 2034
LDC 0               ; local var space ; 2035
LDC 0               ; local var space ; 2036
LDF    1337         ;  @ghcstate_read_val ; 2037
AP     4             ; 2038
ADD                  ; 2039
LDC 0               ; local var space ; 2040
LDF    1397         ;  @ghcstate_write_val ; 2041
AP     4             ; 2042
LDC 0               ; local var space ; 2043
LDC 0               ; local var space ; 2044
LDF    2414         ;  @runGhost ; 2045
AP     7             ; 2046
JOIN                 ; 2047
LDC    4            ; ELSE: 123 ; 2048
LD     0 6          ; var opcode ; 2049
CEQ                  ; 2050
SEL    2053 2084    ; IF? 124 ; 2051
JOIN                 ; 2052
LD     0 0          ; THEN: 124 ; 2053
LD     0 1          ; var world ; 2054
LD     0 2          ; var ghostInfo ; 2055
LD     0 3          ; var lev ; 2056
LD     0 8          ; var inc_pc ; 2057
LD     0 7          ; var args ; 2058
CAR                  ; 2059
LD     0 8          ; var inc_pc ; 2060
LD     0 7          ; var args ; 2061
CAR                  ; 2062
LDC 0               ; local var space ; 2063
LDC 0               ; local var space ; 2064
LDF    1337         ;  @ghcstate_read_val ; 2065
AP     4             ; 2066
LD     0 8          ; var inc_pc ; 2067
LD     0 7          ; var args ; 2068
CDR                  ; 2069
CAR                  ; 2070
LDC 0               ; local var space ; 2071
LDC 0               ; local var space ; 2072
LDF    1337         ;  @ghcstate_read_val ; 2073
AP     4             ; 2074
SUB                  ; 2075
LDC 0               ; local var space ; 2076
LDF    1397         ;  @ghcstate_write_val ; 2077
AP     4             ; 2078
LDC 0               ; local var space ; 2079
LDC 0               ; local var space ; 2080
LDF    2414         ;  @runGhost ; 2081
AP     7             ; 2082
JOIN                 ; 2083
LDC    5            ; ELSE: 124 ; 2084
LD     0 6          ; var opcode ; 2085
CEQ                  ; 2086
SEL    2089 2120    ; IF? 125 ; 2087
JOIN                 ; 2088
LD     0 0          ; THEN: 125 ; 2089
LD     0 1          ; var world ; 2090
LD     0 2          ; var ghostInfo ; 2091
LD     0 3          ; var lev ; 2092
LD     0 8          ; var inc_pc ; 2093
LD     0 7          ; var args ; 2094
CAR                  ; 2095
LD     0 8          ; var inc_pc ; 2096
LD     0 7          ; var args ; 2097
CAR                  ; 2098
LDC 0               ; local var space ; 2099
LDC 0               ; local var space ; 2100
LDF    1337         ;  @ghcstate_read_val ; 2101
AP     4             ; 2102
LD     0 8          ; var inc_pc ; 2103
LD     0 7          ; var args ; 2104
CDR                  ; 2105
CAR                  ; 2106
LDC 0               ; local var space ; 2107
LDC 0               ; local var space ; 2108
LDF    1337         ;  @ghcstate_read_val ; 2109
AP     4             ; 2110
MUL                  ; 2111
LDC 0               ; local var space ; 2112
LDF    1397         ;  @ghcstate_write_val ; 2113
AP     4             ; 2114
LDC 0               ; local var space ; 2115
LDC 0               ; local var space ; 2116
LDF    2414         ;  @runGhost ; 2117
AP     7             ; 2118
JOIN                 ; 2119
LDC    6            ; ELSE: 125 ; 2120
LD     0 6          ; var opcode ; 2121
CEQ                  ; 2122
SEL    2125 2156    ; IF? 126 ; 2123
JOIN                 ; 2124
LD     0 0          ; THEN: 126 ; 2125
LD     0 1          ; var world ; 2126
LD     0 2          ; var ghostInfo ; 2127
LD     0 3          ; var lev ; 2128
LD     0 8          ; var inc_pc ; 2129
LD     0 7          ; var args ; 2130
CAR                  ; 2131
LD     0 8          ; var inc_pc ; 2132
LD     0 7          ; var args ; 2133
CAR                  ; 2134
LDC 0               ; local var space ; 2135
LDC 0               ; local var space ; 2136
LDF    1337         ;  @ghcstate_read_val ; 2137
AP     4             ; 2138
LD     0 8          ; var inc_pc ; 2139
LD     0 7          ; var args ; 2140
CDR                  ; 2141
CAR                  ; 2142
LDC 0               ; local var space ; 2143
LDC 0               ; local var space ; 2144
LDF    1337         ;  @ghcstate_read_val ; 2145
AP     4             ; 2146
DIV                  ; 2147
LDC 0               ; local var space ; 2148
LDF    1397         ;  @ghcstate_write_val ; 2149
AP     4             ; 2150
LDC 0               ; local var space ; 2151
LDC 0               ; local var space ; 2152
LDF    2414         ;  @runGhost ; 2153
AP     7             ; 2154
JOIN                 ; 2155
LDC    7            ; ELSE: 126 ; 2156
LD     0 6          ; var opcode ; 2157
CEQ                  ; 2158
SEL    2161 2182    ; IF? 127 ; 2159
JOIN                 ; 2160
LD     0 0          ; THEN: 127 ; 2161
LD     0 1          ; var world ; 2162
LD     0 2          ; var ghostInfo ; 2163
LD     0 3          ; var lev ; 2164
LD     0 8          ; var inc_pc ; 2165
LD     0 7          ; var args ; 2166
CAR                  ; 2167
LD     0 7          ; var args ; 2168
CDR                  ; 2169
CAR                  ; 2170
LDC    7            ; Named Const = GHCOps.AND ; 2171
LDC 0               ; local var space ; 2172
LDC 0               ; local var space ; 2173
LDC 0               ; local var space ; 2174
LDF    1859         ;  @ghcstate_bitop ; 2175
AP     7             ; 2176
LDC 0               ; local var space ; 2177
LDC 0               ; local var space ; 2178
LDF    2414         ;  @runGhost ; 2179
AP     7             ; 2180
JOIN                 ; 2181
LDC    8            ; ELSE: 127 ; 2182
LD     0 6          ; var opcode ; 2183
CEQ                  ; 2184
SEL    2187 2208    ; IF? 128 ; 2185
JOIN                 ; 2186
LD     0 0          ; THEN: 128 ; 2187
LD     0 1          ; var world ; 2188
LD     0 2          ; var ghostInfo ; 2189
LD     0 3          ; var lev ; 2190
LD     0 8          ; var inc_pc ; 2191
LD     0 7          ; var args ; 2192
CAR                  ; 2193
LD     0 7          ; var args ; 2194
CDR                  ; 2195
CAR                  ; 2196
LDC    8            ; Named Const = GHCOps.OR ; 2197
LDC 0               ; local var space ; 2198
LDC 0               ; local var space ; 2199
LDC 0               ; local var space ; 2200
LDF    1859         ;  @ghcstate_bitop ; 2201
AP     7             ; 2202
LDC 0               ; local var space ; 2203
LDC 0               ; local var space ; 2204
LDF    2414         ;  @runGhost ; 2205
AP     7             ; 2206
JOIN                 ; 2207
LDC    9            ; ELSE: 128 ; 2208
LD     0 6          ; var opcode ; 2209
CEQ                  ; 2210
SEL    2213 2234    ; IF? 129 ; 2211
JOIN                 ; 2212
LD     0 0          ; THEN: 129 ; 2213
LD     0 1          ; var world ; 2214
LD     0 2          ; var ghostInfo ; 2215
LD     0 3          ; var lev ; 2216
LD     0 8          ; var inc_pc ; 2217
LD     0 7          ; var args ; 2218
CAR                  ; 2219
LD     0 7          ; var args ; 2220
CDR                  ; 2221
CAR                  ; 2222
LDC    9            ; Named Const = GHCOps.XOR ; 2223
LDC 0               ; local var space ; 2224
LDC 0               ; local var space ; 2225
LDC 0               ; local var space ; 2226
LDF    1859         ;  @ghcstate_bitop ; 2227
AP     7             ; 2228
LDC 0               ; local var space ; 2229
LDC 0               ; local var space ; 2230
LDF    2414         ;  @runGhost ; 2231
AP     7             ; 2232
JOIN                 ; 2233
LDC    10           ; ELSE: 129 ; 2234
LD     0 6          ; var opcode ; 2235
CEQ                  ; 2236
SEL    2239 2266    ; IF? 130 ; 2237
JOIN                 ; 2238
LD     0 0          ; THEN: 130 ; 2239
LD     0 1          ; var world ; 2240
LD     0 2          ; var ghostInfo ; 2241
LD     0 3          ; var lev ; 2242
LD     0 4          ; var state ; 2243
LD     0 7          ; var args ; 2244
CDR                  ; 2245
CDR                  ; 2246
LDC 0               ; local var space ; 2247
LDC 0               ; local var space ; 2248
LDF    1337         ;  @ghcstate_read_val ; 2249
AP     4             ; 2250
LD     0 4          ; var state ; 2251
LD     0 7          ; var args ; 2252
CDR                  ; 2253
CAR                  ; 2254
LDC 0               ; local var space ; 2255
LDC 0               ; local var space ; 2256
LDF    1337         ;  @ghcstate_read_val ; 2257
AP     4             ; 2258
CGT                  ; 2259
SEL    2271 2287    ; IF? 131 ; 2260
LDC 0               ; local var space ; 2261
LDC 0               ; local var space ; 2262
LDF    2414         ;  @runGhost ; 2263
AP     7             ; 2264
JOIN                 ; 2265
LDC    11           ; ELSE: 130 ; 2266
LD     0 6          ; var opcode ; 2267
CEQ                  ; 2268
SEL    2289 2316    ; IF? 132 ; 2269
JOIN                 ; 2270
LD     0 4          ; THEN: 131 ; 2271
CAR                 ; generateTupleAccess total=3 pos=0 ; 2272
LD     0 4          ; var state ; 2273
CDR                 ; generateTupleAccess total=3 pos=1 ; 2274
CAR                  ; 2275
LDC    8            ; just constant from code ; 2276
LD     0 7          ; var args ; 2277
CAR                  ; 2278
LDF    1308         ;  @sorted_map_assoc ; 2279
AP     3             ; 2280
LD     0 4          ; var state ; 2281
CDR                 ; generateTupleAccess total=3 pos=2 ; 2282
CDR                  ; 2283
CONS                 ; 2284
CONS                 ; 2285
JOIN                 ; 2286
LD     0 4          ; ELSE: 131 ; 2287
JOIN                 ; 2288
LD     0 0          ; THEN: 132 ; 2289
LD     0 1          ; var world ; 2290
LD     0 2          ; var ghostInfo ; 2291
LD     0 3          ; var lev ; 2292
LD     0 4          ; var state ; 2293
LD     0 7          ; var args ; 2294
CDR                  ; 2295
CAR                  ; 2296
LDC 0               ; local var space ; 2297
LDC 0               ; local var space ; 2298
LDF    1337         ;  @ghcstate_read_val ; 2299
AP     4             ; 2300
LD     0 4          ; var state ; 2301
LD     0 7          ; var args ; 2302
CDR                  ; 2303
CDR                  ; 2304
LDC 0               ; local var space ; 2305
LDC 0               ; local var space ; 2306
LDF    1337         ;  @ghcstate_read_val ; 2307
AP     4             ; 2308
CEQ                  ; 2309
SEL    2321 2337    ; IF? 133 ; 2310
LDC 0               ; local var space ; 2311
LDC 0               ; local var space ; 2312
LDF    2414         ;  @runGhost ; 2313
AP     7             ; 2314
JOIN                 ; 2315
LDC    12           ; ELSE: 132 ; 2316
LD     0 6          ; var opcode ; 2317
CEQ                  ; 2318
SEL    2339 2366    ; IF? 134 ; 2319
JOIN                 ; 2320
LD     0 4          ; THEN: 133 ; 2321
CAR                 ; generateTupleAccess total=3 pos=0 ; 2322
LD     0 4          ; var state ; 2323
CDR                 ; generateTupleAccess total=3 pos=1 ; 2324
CAR                  ; 2325
LDC    8            ; just constant from code ; 2326
LD     0 7          ; var args ; 2327
CAR                  ; 2328
LDF    1308         ;  @sorted_map_assoc ; 2329
AP     3             ; 2330
LD     0 4          ; var state ; 2331
CDR                 ; generateTupleAccess total=3 pos=2 ; 2332
CDR                  ; 2333
CONS                 ; 2334
CONS                 ; 2335
JOIN                 ; 2336
LD     0 4          ; ELSE: 133 ; 2337
JOIN                 ; 2338
LD     0 0          ; THEN: 134 ; 2339
LD     0 1          ; var world ; 2340
LD     0 2          ; var ghostInfo ; 2341
LD     0 3          ; var lev ; 2342
LD     0 4          ; var state ; 2343
LD     0 7          ; var args ; 2344
CDR                  ; 2345
CAR                  ; 2346
LDC 0               ; local var space ; 2347
LDC 0               ; local var space ; 2348
LDF    1337         ;  @ghcstate_read_val ; 2349
AP     4             ; 2350
LD     0 4          ; var state ; 2351
LD     0 7          ; var args ; 2352
CDR                  ; 2353
CDR                  ; 2354
LDC 0               ; local var space ; 2355
LDC 0               ; local var space ; 2356
LDF    1337         ;  @ghcstate_read_val ; 2357
AP     4             ; 2358
CGT                  ; 2359
SEL    2371 2387    ; IF? 135 ; 2360
LDC 0               ; local var space ; 2361
LDC 0               ; local var space ; 2362
LDF    2414         ;  @runGhost ; 2363
AP     7             ; 2364
JOIN                 ; 2365
LDC    13           ; ELSE: 134 ; 2366
LD     0 6          ; var opcode ; 2367
CEQ                  ; 2368
SEL    2389 2409    ; IF? 136 ; 2369
JOIN                 ; 2370
LD     0 4          ; THEN: 135 ; 2371
CAR                 ; generateTupleAccess total=3 pos=0 ; 2372
LD     0 4          ; var state ; 2373
CDR                 ; generateTupleAccess total=3 pos=1 ; 2374
CAR                  ; 2375
LDC    8            ; just constant from code ; 2376
LD     0 7          ; var args ; 2377
CAR                  ; 2378
LDF    1308         ;  @sorted_map_assoc ; 2379
AP     3             ; 2380
LD     0 4          ; var state ; 2381
CDR                 ; generateTupleAccess total=3 pos=2 ; 2382
CDR                  ; 2383
CONS                 ; 2384
CONS                 ; 2385
JOIN                 ; 2386
LD     0 4          ; ELSE: 135 ; 2387
JOIN                 ; 2388
LD     0 0          ; THEN: 136 ; 2389
LD     0 1          ; var world ; 2390
LD     0 2          ; var ghostInfo ; 2391
LD     0 3          ; var lev ; 2392
LD     0 1          ; var world ; 2393
LD     0 8          ; var inc_pc ; 2394
LD     0 2          ; var ghostInfo ; 2395
LD     0 7          ; var args ; 2396
CAR                  ; 2397
LD     0 7          ; var args ; 2398
CDR                  ; 2399
LDC 0               ; local var space ; 2400
LDC 0               ; local var space ; 2401
LDF    1579         ;  @processGhostInt ; 2402
AP     7             ; 2403
LDC 0               ; local var space ; 2404
LDC 0               ; local var space ; 2405
LDF    2414         ;  @runGhost ; 2406
AP     7             ; 2407
JOIN                 ; 2408
LD     0 4          ; ELSE: 136 ; 2409
CAR                 ; generateTupleAccess total=3 pos=0 ; 2410
CDR                 ; generateTupleAccess total=3 pos=2 ; 2411
CDR                  ; 2412
JOIN                 ; 2413
LD     0 4          ;  <== runGhost  [SortedMap<Cons> prog, WorldState world, GhostInfo ghostInfo, int lev, GHCState state] (as blk) ; 2414
CDR                 ; generateTupleAccess total=3 pos=1 ; 2415
CAR                  ; 2416
LDC    8            ; just constant from code ; 2417
LDC    0            ; just constant from code ; 2418
LDF    1292         ;  @sorted_map_get ; 2419
AP     3             ; 2420
ST     0 5           ; 2421
LD     0 0          ; var prog ; 2422
LD     0 5          ; var pc ; 2423
LDC    0            ; NULL literal ; 2424
LDF    1292         ;  @sorted_map_get ; 2425
AP     3             ; 2426
ST     0 6           ; 2427
LD     0 6          ; var step ; 2428
ATOM                 ; 2429
SEL    2432 2437    ; IF? 51 ; 2430
RTN                  ; 2431
LD     0 4          ; THEN: 51 ; 2432
CAR                 ; generateTupleAccess total=3 pos=0 ; 2433
CDR                 ; generateTupleAccess total=3 pos=2 ; 2434
CDR                  ; 2435
JOIN                 ; 2436
LD     0 3          ; ELSE: 51 ; 2437
LDC    1023         ; just constant from code ; 2438
CGT                  ; 2439
SEL    2442 2447    ; IF? 137 ; 2440
JOIN                 ; 2441
LD     0 4          ; THEN: 137 ; 2442
CAR                 ; generateTupleAccess total=3 pos=0 ; 2443
CDR                 ; generateTupleAccess total=3 pos=2 ; 2444
CDR                  ; 2445
JOIN                 ; 2446
LD     0 0          ; ELSE: 137 ; 2447
LD     0 1          ; var world ; 2448
LD     0 2          ; var ghostInfo ; 2449
LD     0 3          ; var lev ; 2450
LDC    1            ; just constant from code ; 2451
ADD                  ; 2452
LD     0 4          ; var state ; 2453
LD     0 6          ; var step ; 2454
LDC 0               ; local var space ; 2455
LDC 0               ; local var space ; 2456
LDC 0               ; local var space ; 2457
LDF    1902         ;  @runGhostStep ; 2458
AP     9             ; 2459
JOIN                 ; 2460
LD     0 1          ;  <== getGhostDirection  [WorldState world, GhostInfo ghostInfo] (as blk) ; 2461
CDR                 ; generateTupleAccess total=3 pos=1 ; 2462
CAR                  ; 2463
LDC    0            ; just constant from code ; 2464
LDC    0            ; NULL literal ; 2465
LDC    0            ; just constant from code ; 2466
CONS                 ; 2467
CONS                 ; 2468
LDF    10243        ;  @lambda_1006 ; 2469
LDF    386          ;  @fold0 ; 2470
AP     3             ; 2471
ST     0 2           ; 2472
LD     0 0          ; var world ; 2473
CDR                 ; generateTupleAccess total=4 pos=2 ; 2474
CDR                  ; 2475
CAR                  ; 2476
CAR                  ; 2477
ST     0 3           ; 2478
LD     0 2          ; var prog ; 2479
CDR                 ; generateTupleAccess total=2 pos=1 ; 2480
LD     0 0          ; var world ; 2481
LD     0 1          ; var ghostInfo ; 2482
LDC    0            ; just constant from code ; 2483
LD     0 3          ; var ghostState ; 2484
LDC    0            ; NULL literal ; 2485
LDC    0            ; just constant from code ; 2486
CONS                 ; 2487
LDC    0            ; NULL literal ; 2488
LDC    0            ; just constant from code ; 2489
CONS                 ; 2490
CONS                 ; 2491
CONS                 ; 2492
LDC 0               ; local var space ; 2493
LDC 0               ; local var space ; 2494
LDF    2414         ;  @runGhost ; 2495
AP     7             ; 2496
RTN                  ; 2497
LDC    1000001      ;  <== entryCPUEmulator  [] (as blk) ; 2498
DBUG                 ; 2499
LDF    9091         ;  @sample_map ; 2500
AP     0             ; 2501
ST     0 0           ; 2502
LDC    1000002      ; just constant from code ; 2503
DBUG                 ; 2504
LD     0 0          ; var ws ; 2505
DBUG                 ; 2506
BRK                  ; 2507
LD     0 0          ; var ws ; 2508
LDC    0            ; NULL literal ; 2509
LDC 0               ; local var space ; 2510
LDC 0               ; local var space ; 2511
LDC 0               ; local var space ; 2512
LDF    2534         ;  @entryFactual ; 2513
AP     5             ; 2514
ST     0 1           ; 2515
LDC    1000003      ; just constant from code ; 2516
DBUG                 ; 2517
LD     0 0          ; var ws ; 2518
DBUG                 ; 2519
BRK                  ; 2520
LD     0 1          ; var initialDone ; 2521
CDR                 ; generateTupleAccess total=2 pos=1 ; 2522
ST     0 2           ; 2523
LD     0 1          ; var initialDone ; 2524
CAR                 ; generateTupleAccess total=2 pos=0 ; 2525
ST     0 3           ; 2526
LD     0 3          ; var a ; 2527
LD     0 0          ; var ws ; 2528
LD     0 2          ; var b ; 2529
AP     2             ; 2530
ST     0 4           ; 2531
LDC    0            ; NULL literal ; 2532
RTN                  ; 2533
LD     0 0          ;  <== entryFactual  [WorldState ws, ListCons<ListCons> ghostSpecs] (as blk) ; 2534
LD     0 1          ; var ghostSpecs ; 2535
LDC 0               ; local var space ; 2536
LDF    3467         ;  @createInitialState ; 2537
AP     3             ; 2538
ST     0 2           ; 2539
LD     0 2          ; var initialState ; 2540
CAR                 ; generateTupleAccess total=4 pos=0 ; 2541
CDR                 ; generateTupleAccess total=7 pos=5 ; 2542
CDR                  ; 2543
CDR                  ; 2544
CDR                  ; 2545
CDR                  ; 2546
CAR                  ; 2547
LDC    1            ; just constant from code ; 2548
LDF    423          ;  @list_item ; 2549
AP     2             ; 2550
ST     0 3           ; 2551
LDC    0            ; just constant from code ; 2552
LDC    100          ; Named Const = VMExtras.GET_READER ; 2553
LDC    1            ; just constant from code ; 2554
LD     0 3          ; var newRowAccessor ; 2555
AP     2             ; 2556
AP     1             ; 2557
ST     0 4           ; 2558
LD     0 2          ; var initialState ; 2559
LDF    10431        ;  @lambda_1020 ; 2560
CONS                 ; 2561
RTN                  ; 2562
LDF    4134         ;  <== test01  [] (as blk), ALSO: @array_256 ; 2563
AP     0             ; 2564
ST     0 0           ; 2565
LDC    100          ; Named Const = VMExtras.GET_READER ; 2566
LDC    22           ; just constant from code ; 2567
LD     0 0          ; var accessor ; 2568
AP     2             ; 2569
ST     0 1           ; 2570
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 2571
LDC    22           ; just constant from code ; 2572
LD     0 0          ; var accessor ; 2573
AP     2             ; 2574
ST     0 2           ; 2575
LDC    77           ; just constant from code ; 2576
LD     0 2          ; var writer101 ; 2577
AP     1             ; 2578
ST     0 3           ; 2579
LDC    0            ; just constant from code ; 2580
LD     0 1          ; var reader101 ; 2581
AP     1             ; 2582
ST     0 4           ; 2583
LDC    0            ; just constant from code ; 2584
RTN                  ; 2585
LD     0 0          ;  <== collectEdgePills  [ParsedEdge edge, Point start, ListCons<ListCons<Integer>> map] (as blk) ; 2586
CDR                 ; generateTupleAccess total=8 pos=3 ; 2587
CDR                  ; 2588
CDR                  ; 2589
CAR                  ; 2590
LDF    10449        ;  @lambda_1021 ; 2591
LDF    349          ;  @dropWhile ; 2592
AP     2             ; 2593
ST     0 3           ; 2594
LD     0 3          ; var pathRemaining ; 2595
LDF    10472        ;  @lambda_1022 ; 2596
LDF    537          ;  @filter ; 2597
AP     2             ; 2598
ST     0 4           ; 2599
LD     0 4          ; var rv ; 2600
RTN                  ; 2601
LD     0 0          ;  <== collectEdgeGhosts  [ParsedEdge edge, Point start, ListCons<ListCons<Integer>> map] (as blk) ; 2602
CDR                 ; generateTupleAccess total=8 pos=2 ; 2603
CDR                  ; 2604
CAR                  ; 2605
LDF    10484        ;  @lambda_1023 ; 2606
LDF    349          ;  @dropWhile ; 2607
AP     2             ; 2608
ST     0 3           ; 2609
LD     0 3          ; var pathOnEdge ; 2610
LDF    10505        ;  @lambda_1024 ; 2611
LDF    537          ;  @filter ; 2612
AP     2             ; 2613
RTN                  ; 2614
LD     0 0          ;  <== collectAnyEdgePills  [ParsedEdge edge, ListCons<ListCons<Integer>> map] (as blk) ; 2615
CDR                 ; generateTupleAccess total=8 pos=3 ; 2616
CDR                  ; 2617
CDR                  ; 2618
CAR                  ; 2619
ST     0 2           ; 2620
LD     0 2          ; var edgeAccess ; 2621
LDF    10520        ;  @lambda_1025 ; 2622
LDF    537          ;  @filter ; 2623
AP     2             ; 2624
ST     0 3           ; 2625
LD     0 3          ; var rv ; 2626
RTN                  ; 2627
LD     0 0          ;  <== countAnyEdgePills  [ParsedEdge edge] (as blk) ; 2628
CDR                 ; generateTupleAccess total=8 pos=3 ; 2629
CDR                  ; 2630
CDR                  ; 2631
CAR                  ; 2632
ST     0 1           ; 2633
LD     0 1          ; var edgeAccess ; 2634
LDC    0            ; just constant from code ; 2635
LDF    10532        ;  @lambda_1026 ; 2636
LDF    386          ;  @fold0 ; 2637
AP     3             ; 2638
ST     0 2           ; 2639
LD     0 2          ; var rv ; 2640
RTN                  ; 2641
LD     0 0          ;  <== countMyEdgePills  [ParsedEdge edge, Point start] (as blk) ; 2642
CDR                 ; generateTupleAccess total=8 pos=3 ; 2643
CDR                  ; 2644
CDR                  ; 2645
CAR                  ; 2646
LDF    10546        ;  @lambda_1027 ; 2647
LDF    349          ;  @dropWhile ; 2648
AP     2             ; 2649
ST     0 2           ; 2650
LD     0 2          ; var pathRemaining ; 2651
LDC    0            ; just constant from code ; 2652
LDF    10569        ;  @lambda_1028 ; 2653
LDF    386          ;  @fold0 ; 2654
AP     3             ; 2655
ST     0 3           ; 2656
LD     0 3          ; var rv ; 2657
RTN                  ; 2658
LD     0 1          ;  <== performMove  [AIState aistate, WorldState worldState] (as blk) ; 2659
CDR                 ; generateTupleAccess total=4 pos=1 ; 2660
CAR                  ; 2661
CDR                 ; generateTupleAccess total=5 pos=1 ; 2662
CAR                  ; 2663
ST     0 2           ; 2664
LD     0 0          ; var aistate ; 2665
LD     0 2          ; var location ; 2666
LDF    3868         ;  @findEdgesForPoint ; 2667
AP     2             ; 2668
ST     0 3           ; 2669
LD     0 3          ; var edgesForPoint ; 2670
LD     0 0          ; var aistate ; 2671
LD     0 1          ; var worldState ; 2672
LDC 0               ; local var space ; 2673
LDC 0               ; local var space ; 2674
LDC 0               ; local var space ; 2675
LDC 0               ; local var space ; 2676
LDC 0               ; local var space ; 2677
LDC 0               ; local var space ; 2678
LDF    3419         ;  @findBestDistantEdge ; 2679
AP     9             ; 2680
ST     0 7           ; 2681
LD     0 0          ; var aistate ; 2682
CAR                 ; generateTupleAccess total=4 pos=0 ; 2683
CDR                 ; generateTupleAccess total=7 pos=2 ; 2684
CDR                  ; 2685
CAR                  ; 2686
LDF    10662        ;  @lambda_1034 ; 2687
LDF    69           ;  @map ; 2688
AP     2             ; 2689
ST     0 8           ; 2690
LD     0 1          ; var worldState ; 2691
CDR                 ; generateTupleAccess total=4 pos=2 ; 2692
CDR                  ; 2693
CAR                  ; 2694
LDF    10676        ;  @lambda_1035 ; 2695
LDF    69           ;  @map ; 2696
AP     2             ; 2697
ST     0 8           ; 2698
LD     0 7          ; var startEdge ; 2699
CDR                 ; generateTupleAccess total=8 pos=2 ; 2700
CDR                  ; 2701
CAR                  ; 2702
LDF    10687        ;  @lambda_1036 ; 2703
LDF    349          ;  @dropWhile ; 2704
AP     2             ; 2705
ST     0 9           ; 2706
LD     0 9          ; var pathToWalk ; 2707
LDF    532          ;  @length ; 2708
AP     1             ; 2709
LDC    2            ; just constant from code ; 2710
CGTE                 ; 2711
SEL    2754 2770     ; 2712
LD     0 4          ; var retval ; 2713
CDR                 ; generateTupleAccess total=2 pos=1 ; 2714
LDC    3            ; Named Const = Direction.LEFT ; 2715
CEQ                  ; 2716
SEL    2775 2780    ; IF? 52 ; 2717
ST     0 10          ; 2718
LD     0 4          ; var retval ; 2719
CDR                 ; generateTupleAccess total=2 pos=1 ; 2720
LDC    0            ; Named Const = Direction.UP ; 2721
CEQ                  ; 2722
SEL    2786 2791    ; IF? 53 ; 2723
ST     0 11          ; 2724
LD     0 4          ; var retval ; 2725
CAR                 ; generateTupleAccess total=2 pos=0 ; 2726
ST     0 12          ; 2727
LD     0 12         ; var a ; 2728
CAR                 ; generateTupleAccess total=4 pos=0 ; 2729
CDR                 ; generateTupleAccess total=7 pos=5 ; 2730
CDR                  ; 2731
CDR                  ; 2732
CDR                  ; 2733
CDR                  ; 2734
CAR                  ; 2735
LD     0 11         ; var ny ; 2736
LDF    423          ;  @list_item ; 2737
AP     2             ; 2738
ST     0 13          ; 2739
LDC    0            ; just constant from code ; 2740
LDC    100          ; Named Const = VMExtras.GET_READER ; 2741
LD     0 10         ; var nx ; 2742
LD     0 13         ; var newRowAccessor ; 2743
AP     2             ; 2744
AP     1             ; 2745
ST     0 14          ; 2746
LD     0 14         ; var oldValue ; 2747
LDC    2            ; Named Const = CT.PILL ; 2748
CEQ                  ; 2749
SEL    2797 2804    ; IF? 54 ; 2750
ST     0 14          ; 2751
LD     0 4          ; var retval ; 2752
RTN                  ; 2753
LD     0 9          ; branch@2754 ; 2754
CDR                  ; 2755
CAR                  ; 2756
ST     0 5           ; 2757
LD     0 5          ; var newLocation ; 2758
CAR                 ; generateTupleAccess total=2 pos=0 ; 2759
LD     0 2          ; var location ; 2760
CAR                 ; generateTupleAccess total=2 pos=0 ; 2761
CGT                  ; 2762
SEL    2806 2808    ; IF? 138 ; 2763
ST     0 6           ; 2764
LD     0 0          ; var aistate ; 2765
LD     0 6          ; var direction ; 2766
CONS                 ; 2767
ST     0 4           ; 2768
JOIN                 ; 2769
LD     0 0          ; branch@2770 ; 2770
LDC    0            ; Named Const = Direction.UP ; 2771
CONS                 ; 2772
ST     0 4           ; 2773
JOIN                 ; 2774
LD     0 2          ; THEN: 52 ; 2775
CAR                 ; generateTupleAccess total=2 pos=0 ; 2776
LDC    1            ; just constant from code ; 2777
SUB                  ; 2778
JOIN                 ; 2779
LD     0 4          ; ELSE: 52 ; 2780
CDR                 ; generateTupleAccess total=2 pos=1 ; 2781
LDC    1            ; Named Const = Direction.RIGHT ; 2782
CEQ                  ; 2783
SEL    2815 2820    ; IF? 139 ; 2784
JOIN                 ; 2785
LD     0 2          ; THEN: 53 ; 2786
CDR                 ; generateTupleAccess total=2 pos=1 ; 2787
LDC    1            ; just constant from code ; 2788
SUB                  ; 2789
JOIN                 ; 2790
LD     0 4          ; ELSE: 53 ; 2791
CDR                 ; generateTupleAccess total=2 pos=1 ; 2792
LDC    2            ; Named Const = Direction.DOWN ; 2793
CEQ                  ; 2794
SEL    2823 2828    ; IF? 140 ; 2795
JOIN                 ; 2796
LDC    1            ; THEN: 54 ; 2797
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 2798
LD     0 10         ; var nx ; 2799
LD     0 13         ; var newRowAccessor ; 2800
AP     2             ; 2801
AP     1             ; 2802
JOIN                 ; 2803
LD     0 14         ; ELSE: 54 ; 2804
JOIN                 ; 2805
LDC    1            ; THEN: 138 ; 2806
JOIN                 ; 2807
LD     0 2          ; ELSE: 138 ; 2808
CAR                 ; generateTupleAccess total=2 pos=0 ; 2809
LD     0 5          ; var newLocation ; 2810
CAR                 ; generateTupleAccess total=2 pos=0 ; 2811
CGT                  ; 2812
SEL    2831 2833    ; IF? 141 ; 2813
JOIN                 ; 2814
LD     0 2          ; THEN: 139 ; 2815
CAR                 ; generateTupleAccess total=2 pos=0 ; 2816
LDC    1            ; just constant from code ; 2817
ADD                  ; 2818
JOIN                 ; 2819
LD     0 2          ; ELSE: 139 ; 2820
CAR                 ; generateTupleAccess total=2 pos=0 ; 2821
JOIN                 ; 2822
LD     0 2          ; THEN: 140 ; 2823
CDR                 ; generateTupleAccess total=2 pos=1 ; 2824
LDC    1            ; just constant from code ; 2825
ADD                  ; 2826
JOIN                 ; 2827
LD     0 2          ; ELSE: 140 ; 2828
CDR                 ; generateTupleAccess total=2 pos=1 ; 2829
JOIN                 ; 2830
LDC    3            ; THEN: 141 ; 2831
JOIN                 ; 2832
LD     0 2          ; ELSE: 141 ; 2833
CDR                 ; generateTupleAccess total=2 pos=1 ; 2834
LD     0 5          ; var newLocation ; 2835
CDR                 ; generateTupleAccess total=2 pos=1 ; 2836
CGT                  ; 2837
SEL    2840 2842    ; IF? 142 ; 2838
JOIN                 ; 2839
LDC    0            ; THEN: 142 ; 2840
JOIN                 ; 2841
LDC    2            ; ELSE: 142 ; 2842
JOIN                 ; 2843
LD     0 1          ;  <== waveGhostDangerAcc0  [AIState aistate, Queue<EdgeDangerWaveItem> queue, ListCons<Integer> visitedEdges] (as blk) ; 2844
LDF    415          ;  @queue_isempty ; 2845
AP     1             ; 2846
SEL    2849 2853    ; IF? 55 ; 2847
RTN                  ; 2848
LDC    0            ; THEN: 55 ; 2849
LDF    21           ;  @mydebug ; 2850
AP     1             ; 2851
JOIN                 ; 2852
LD     0 0          ; ELSE: 55 ; 2853
LD     0 1          ; var queue ; 2854
LD     0 2          ; var visitedEdges ; 2855
LDC 0               ; local var space ; 2856
LDC 0               ; local var space ; 2857
LDC 0               ; local var space ; 2858
LDC 0               ; local var space ; 2859
LDC 0               ; local var space ; 2860
LDC 0               ; local var space ; 2861
LDC 0               ; local var space ; 2862
LDC 0               ; local var space ; 2863
LDF    2867         ;  @waveGhostDangerAcc ; 2864
AP     11            ; 2865
JOIN                 ; 2866
LD     0 1          ;  <== waveGhostDangerAcc  [AIState aistate, Queue<EdgeDangerWaveItem> queue, ListCons<Integer> visitedEdges] (as blk) ; 2867
LDC 0               ; local var space ; 2868
LDF    492          ;  @queue_dequeue ; 2869
AP     2             ; 2870
ST     0 3           ; 2871
LD     0 3          ; var smaller ; 2872
CAR                 ; generateTupleAccess total=2 pos=0 ; 2873
ST     0 4           ; 2874
LD     0 0          ; var aistate ; 2875
CAR                 ; generateTupleAccess total=4 pos=0 ; 2876
CDR                 ; generateTupleAccess total=7 pos=2 ; 2877
CDR                  ; 2878
CAR                  ; 2879
LD     0 4          ; var a ; 2880
CAR                 ; generateTupleAccess total=3 pos=0 ; 2881
LDF    3286         ;  @findPrecedingEdgesSimple ; 2882
AP     2             ; 2883
ST     0 5           ; 2884
LD     0 5          ; var precedingEdges ; 2885
LDF    10716        ;  @lambda_1038 ; 2886
LDF    537          ;  @filter ; 2887
AP     2             ; 2888
ST     0 5           ; 2889
LD     0 5          ; var precedingEdges ; 2890
LDF    532          ;  @length ; 2891
AP     1             ; 2892
ST     0 6           ; 2893
LD     0 5          ; var precedingEdges ; 2894
LDF    10721        ;  @lambda_1039 ; 2895
LDF    69           ;  @map ; 2896
AP     2             ; 2897
ST     0 7           ; 2898
LD     0 2          ; var visitedEdges ; 2899
LD     0 5          ; var precedingEdges ; 2900
LDF    10732        ;  @lambda_1040 ; 2901
LDF    69           ;  @map ; 2902
AP     2             ; 2903
LDF    184          ;  @concat2_set ; 2904
AP     2             ; 2905
ST     0 8           ; 2906
LD     0 8          ; var nvisited ; 2907
LD     0 5          ; var precedingEdges ; 2908
LDF    10740        ;  @lambda_1041 ; 2909
LDF    69           ;  @map ; 2910
AP     2             ; 2911
LDF    184          ;  @concat2_set ; 2912
AP     2             ; 2913
ST     0 9           ; 2914
LD     0 5          ; var precedingEdges ; 2915
LD     0 3          ; var smaller ; 2916
CDR                 ; generateTupleAccess total=2 pos=1 ; 2917
LDF    10749        ;  @lambda_1042 ; 2918
LDF    386          ;  @fold0 ; 2919
AP     3             ; 2920
ST     0 10          ; 2921
LD     0 4          ; var a ; 2922
CDR                 ; generateTupleAccess total=3 pos=1 ; 2923
CAR                  ; 2924
LDC    5            ; just constant from code ; 2925
CGTE                 ; 2926
SEL    2929 2935    ; IF? 56 ; 2927
RTN                  ; 2928
LD     0 0          ; THEN: 56 ; 2929
LD     0 10         ; var newQueue ; 2930
LD     0 9          ; var nvisited2 ; 2931
LDF    2844         ;  @waveGhostDangerAcc0 ; 2932
AP     3             ; 2933
JOIN                 ; 2934
LDC    0            ; ELSE: 56 ; 2935
JOIN                 ; 2936
LDF    403          ;  <== waveGhostDanger  [AIState aistate, EdgeDangerWaveItem item] (as blk), ALSO: @queue_new ; 2937
AP     0             ; 2938
LD     0 1          ; var item ; 2939
LDF    407          ;  @queue_enqueue ; 2940
AP     2             ; 2941
ST     0 2           ; 2942
LD     0 0          ; var aistate ; 2943
LD     0 2          ; var q ; 2944
LD     0 1          ; var item ; 2945
CAR                 ; generateTupleAccess total=3 pos=0 ; 2946
CDR                 ; generateTupleAccess total=8 pos=5 ; 2947
CDR                  ; 2948
CDR                  ; 2949
CDR                  ; 2950
CDR                  ; 2951
CAR                  ; 2952
LD     0 1          ; var item ; 2953
CAR                 ; generateTupleAccess total=3 pos=0 ; 2954
CDR                 ; generateTupleAccess total=8 pos=6 ; 2955
CDR                  ; 2956
CDR                  ; 2957
CDR                  ; 2958
CDR                  ; 2959
CDR                  ; 2960
CAR                  ; 2961
LDC    0            ; NULL literal ; 2962
CONS                 ; 2963
CONS                 ; 2964
LDF    2844         ;  @waveGhostDangerAcc0 ; 2965
AP     3             ; 2966
ST     0 3           ; 2967
LDC    0            ; just constant from code ; 2968
RTN                  ; 2969
LD     0 0          ;  <== placeGhostDanger  [AIState aistate, GhostState gs] (as blk) ; 2970
LD     0 1          ; var gs ; 2971
CDR                 ; generateTupleAccess total=3 pos=1 ; 2972
CAR                  ; 2973
LDF    3868         ;  @findEdgesForPoint ; 2974
AP     2             ; 2975
ST     0 2           ; 2976
LD     0 1          ; var gs ; 2977
CDR                 ; generateTupleAccess total=3 pos=2 ; 2978
CDR                  ; 2979
ST     0 3           ; 2980
LD     0 3          ; var direction ; 2981
LDC    1            ; just constant from code ; 2982
CEQ                  ; 2983
SEL    3012 3019    ; IF? 57 ; 2984
ST     0 4           ; 2985
LD     0 3          ; var direction ; 2986
LDC    0            ; just constant from code ; 2987
CEQ                  ; 2988
SEL    3024 3031    ; IF? 58 ; 2989
ST     0 5           ; 2990
LD     0 4          ; var nx ; 2991
LD     0 5          ; var ny ; 2992
CONS                 ; 2993
ST     0 6           ; 2994
LD     0 2          ; var edgesForPoint ; 2995
LDF    10771        ;  @lambda_1043 ; 2996
LDF    537          ;  @filter ; 2997
AP     2             ; 2998
ST     0 2           ; 2999
LD     0 2          ; var edgesForPoint ; 3000
LDF    10790        ;  @lambda_1044 ; 3001
LDF    69           ;  @map ; 3002
AP     2             ; 3003
ST     0 7           ; 3004
LD     0 2          ; var edgesForPoint ; 3005
LDF    10812        ;  @lambda_1045 ; 3006
LDF    69           ;  @map ; 3007
AP     2             ; 3008
ST     0 7           ; 3009
LDC    0            ; just constant from code ; 3010
RTN                  ; 3011
LD     0 1          ; THEN: 57 ; 3012
CDR                 ; generateTupleAccess total=3 pos=1 ; 3013
CAR                  ; 3014
CAR                 ; generateTupleAccess total=2 pos=0 ; 3015
LDC    1            ; just constant from code ; 3016
ADD                  ; 3017
JOIN                 ; 3018
LD     0 3          ; ELSE: 57 ; 3019
LDC    3            ; just constant from code ; 3020
CEQ                  ; 3021
SEL    3036 3043    ; IF? 143 ; 3022
JOIN                 ; 3023
LD     0 1          ; THEN: 58 ; 3024
CDR                 ; generateTupleAccess total=3 pos=1 ; 3025
CAR                  ; 3026
CDR                 ; generateTupleAccess total=2 pos=1 ; 3027
LDC    1            ; just constant from code ; 3028
SUB                  ; 3029
JOIN                 ; 3030
LD     0 3          ; ELSE: 58 ; 3031
LDC    2            ; just constant from code ; 3032
CEQ                  ; 3033
SEL    3048 3055    ; IF? 144 ; 3034
JOIN                 ; 3035
LD     0 1          ; THEN: 143 ; 3036
CDR                 ; generateTupleAccess total=3 pos=1 ; 3037
CAR                  ; 3038
CAR                 ; generateTupleAccess total=2 pos=0 ; 3039
LDC    1            ; just constant from code ; 3040
SUB                  ; 3041
JOIN                 ; 3042
LD     0 1          ; ELSE: 143 ; 3043
CDR                 ; generateTupleAccess total=3 pos=1 ; 3044
CAR                  ; 3045
CAR                 ; generateTupleAccess total=2 pos=0 ; 3046
JOIN                 ; 3047
LD     0 1          ; THEN: 144 ; 3048
CDR                 ; generateTupleAccess total=3 pos=1 ; 3049
CAR                  ; 3050
CDR                 ; generateTupleAccess total=2 pos=1 ; 3051
LDC    1            ; just constant from code ; 3052
ADD                  ; 3053
JOIN                 ; 3054
LD     0 1          ; ELSE: 144 ; 3055
CDR                 ; generateTupleAccess total=3 pos=1 ; 3056
CAR                  ; 3057
CDR                 ; generateTupleAccess total=2 pos=1 ; 3058
JOIN                 ; 3059
LDC    100          ;  <== initialDangerPercent  [int count, ListCons<Point> remainingPath] (as blk) ; 3060
LD     0 1          ; var remainingPath ; 3061
LDF    532          ;  @length ; 3062
AP     1             ; 3063
LDC    100          ; just constant from code ; 3064
MUL                  ; 3065
LD     0 0          ; var count ; 3066
DIV                  ; 3067
SUB                  ; 3068
ST     0 2           ; 3069
LDC    50           ; just constant from code ; 3070
LD     0 2          ; var completedPercent ; 3071
LDC    350          ; just constant from code ; 3072
MUL                  ; 3073
LDC    100          ; just constant from code ; 3074
DIV                  ; 3075
ADD                  ; 3076
RTN                  ; 3077
LD     0 0          ;  <== findReverseEdge  [AIState aistate, ParsedEdge e] (as blk) ; 3078
CAR                 ; generateTupleAccess total=4 pos=0 ; 3079
CDR                 ; generateTupleAccess total=7 pos=2 ; 3080
CDR                  ; 3081
CAR                  ; 3082
LDF    10834        ;  @lambda_1046 ; 3083
LDF    537          ;  @filter ; 3084
AP     2             ; 3085
CAR                  ; 3086
RTN                  ; 3087
LDC    0            ;  <== addEdgeDanger  [ParsedEdge e, int danger] (as blk) ; 3088
LDC    100          ; Named Const = VMExtras.GET_READER ; 3089
LDC    0            ; just constant from code ; 3090
LD     0 0          ; var e ; 3091
CDR                 ; generateTupleAccess total=8 pos=7 ; 3092
CDR                  ; 3093
CDR                  ; 3094
CDR                  ; 3095
CDR                  ; 3096
CDR                  ; 3097
CDR                  ; 3098
AP     2             ; 3099
AP     1             ; 3100
ST     0 2           ; 3101
LD     0 2          ; var oldValue ; 3102
LD     0 1          ; var danger ; 3103
ADD                  ; 3104
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 3105
LDC    0            ; just constant from code ; 3106
LD     0 0          ; var e ; 3107
CDR                 ; generateTupleAccess total=8 pos=7 ; 3108
CDR                  ; 3109
CDR                  ; 3110
CDR                  ; 3111
CDR                  ; 3112
CDR                  ; 3113
CDR                  ; 3114
AP     2             ; 3115
AP     1             ; 3116
ST     0 3           ; 3117
LDC    0            ; just constant from code ; 3118
RTN                  ; 3119
LD     0 0          ;  <== remainingPath  [ParsedEdge pe, Point location] (as blk) ; 3120
CDR                 ; generateTupleAccess total=8 pos=2 ; 3121
CDR                  ; 3122
CAR                  ; 3123
LDF    10856        ;  @lambda_1047 ; 3124
LDF    349          ;  @dropWhile ; 3125
AP     2             ; 3126
ST     0 2           ; 3127
LD     0 2          ; var meAndFurther ; 3128
CDR                  ; 3129
ATOM                 ; 3130
SEL    3133 3135    ; IF? 59 ; 3131
RTN                  ; 3132
LD     0 2          ; THEN: 59 ; 3133
JOIN                 ; 3134
LD     0 2          ; ELSE: 59 ; 3135
CDR                  ; 3136
JOIN                 ; 3137
LD     0 2          ;  <== waveFromEdgeToNearestEdges  [AIState aistate, WorldState worldState, Queue<ListCons<ParsedEdge>> edgeQueue, SortedMap<Integer> visited, ListCons<ListCons<ParsedEdge>> acc, int edgesWithDotsSoFar] (as blk) ; 3138
LDF    415          ;  @queue_isempty ; 3139
AP     1             ; 3140
SEL    3144 3147     ; 3141
LD     0 6          ; var retval ; 3142
RTN                  ; 3143
LD     0 4          ; branch@3144 ; 3144
ST     0 6           ; 3145
JOIN                 ; 3146
LD     0 0          ; branch@3147 ; 3147
LD     0 1          ; var worldState ; 3148
LD     0 2          ; var edgeQueue ; 3149
LD     0 3          ; var visited ; 3150
LD     0 4          ; var acc ; 3151
LD     0 5          ; var edgesWithDotsSoFar ; 3152
LDC 0               ; local var space ; 3153
LDC 0               ; local var space ; 3154
LDC 0               ; local var space ; 3155
LDC 0               ; local var space ; 3156
LDC 0               ; local var space ; 3157
LDC 0               ; local var space ; 3158
LDC 0               ; local var space ; 3159
LDC 0               ; local var space ; 3160
LDC 0               ; local var space ; 3161
LDC 0               ; local var space ; 3162
LDF    3167         ;  @waveFromEdgeToNearestEdges0 ; 3163
AP     16            ; 3164
ST     0 6           ; 3165
JOIN                 ; 3166
LD     0 2          ;  <== waveFromEdgeToNearestEdges0  [AIState aistate, WorldState worldState, Queue<ListCons<ParsedEdge>> edgeQueue, SortedMap<Integer> visited, ListCons<ListCons<ParsedEdge>> acc, int edgesWithDotsSoFar] (as blk) ; 3167
LDC 0               ; local var space ; 3168
LDF    492          ;  @queue_dequeue ; 3169
AP     2             ; 3170
ST     0 7           ; 3171
LD     0 7          ; var reduced ; 3172
CAR                 ; generateTupleAccess total=2 pos=0 ; 3173
ST     0 8           ; 3174
LD     0 0          ; var aistate ; 3175
CAR                 ; generateTupleAccess total=4 pos=0 ; 3176
CDR                 ; generateTupleAccess total=7 pos=2 ; 3177
CDR                  ; 3178
CAR                  ; 3179
LD     0 8          ; var lookingEdge ; 3180
LDF    3276         ;  @findFollowingEdges ; 3181
AP     2             ; 3182
ST     0 9           ; 3183
LD     0 9          ; var following ; 3184
LDF    10877        ;  @lambda_1049 ; 3185
LDF    537          ;  @filter ; 3186
AP     2             ; 3187
ST     0 9           ; 3188
LD     0 9          ; var following ; 3189
LDF    10890        ;  @lambda_1050 ; 3190
LDF    537          ;  @filter ; 3191
AP     2             ; 3192
ST     0 10          ; 3193
LD     0 3          ; var visited ; 3194
LD     0 9          ; var following ; 3195
LDF    10907        ;  @lambda_1051 ; 3196
LDF    69           ;  @map ; 3197
AP     2             ; 3198
LDF    1317         ;  @sorted_map_assoc_all ; 3199
AP     2             ; 3200
ST     0 11          ; 3201
LD     0 11         ; var nvisited ; 3202
LD     0 9          ; var following ; 3203
LDF    10917        ;  @lambda_1052 ; 3204
LDF    69           ;  @map ; 3205
AP     2             ; 3206
LDF    1317         ;  @sorted_map_assoc_all ; 3207
AP     2             ; 3208
ST     0 11          ; 3209
LD     0 9          ; var following ; 3210
LDF    10928        ;  @lambda_1053 ; 3211
LDF    69           ;  @map ; 3212
AP     2             ; 3213
ST     0 12          ; 3214
LD     0 12         ; var newRoutes ; 3215
LD     0 7          ; var reduced ; 3216
CDR                 ; generateTupleAccess total=2 pos=1 ; 3217
LDF    10932        ;  @lambda_1054 ; 3218
LDF    386          ;  @fold0 ; 3219
AP     3             ; 3220
ST     0 13          ; 3221
LD     0 12         ; var newRoutes ; 3222
LD     0 4          ; var acc ; 3223
LDF    184          ;  @concat2_set ; 3224
AP     2             ; 3225
ST     0 14          ; 3226
LD     0 4          ; var acc ; 3227
ATOM                 ; 3228
LDC    1            ; for negation ; 3229
SUB                  ; 3230
SEL    3238 3258    ; IF? 60 ; 3231
ST     0 15          ; 3232
LD     0 15         ; var stopCondition ; 3233
SEL    3260 3262    ; IF? 61 ; 3234
ST     0 6           ; 3235
LD     0 6          ; var retval ; 3236
RTN                  ; 3237
LD     0 5          ; THEN: 60 ; 3238
LDC    3            ; just constant from code ; 3239
CGT                  ; 3240
LD     0 4          ; var acc ; 3241
LDF    532          ;  @length ; 3242
AP     1             ; 3243
LDC    15           ; just constant from code ; 3244
CGT                  ; 3245
MUL                  ; 3246
LD     0 14         ; var newAcc ; 3247
CAR                  ; 3248
LDF    532          ;  @length ; 3249
AP     1             ; 3250
LD     0 4          ; var acc ; 3251
CAR                  ; 3252
LDF    532          ;  @length ; 3253
AP     1             ; 3254
CGT                  ; 3255
MUL                  ; 3256
JOIN                 ; 3257
LDC    0            ; ELSE: 60 ; 3258
JOIN                 ; 3259
LD     0 4          ; THEN: 61 ; 3260
JOIN                 ; 3261
LD     0 0          ; ELSE: 61 ; 3262
LD     0 1          ; var worldState ; 3263
LD     0 13         ; var newqq ; 3264
LD     0 11         ; var nvisited ; 3265
LD     0 14         ; var newAcc ; 3266
LD     0 5          ; var edgesWithDotsSoFar ; 3267
LD     0 10         ; var withDots ; 3268
LDF    532          ;  @length ; 3269
AP     1             ; 3270
ADD                  ; 3271
LDC 0               ; local var space ; 3272
LDF    3138         ;  @waveFromEdgeToNearestEdges ; 3273
AP     7             ; 3274
JOIN                 ; 3275
LD     0 0          ;  <== findFollowingEdges  [ListCons<ParsedEdge> parsedEdges, ListCons<ParsedEdge> lookingEdge] (as blk) ; 3276
LDF    10868        ;  @lambda_1048 ; 3277
LDF    537          ;  @filter ; 3278
AP     2             ; 3279
RTN                  ; 3280
LD     0 0          ;  <== findFollowingEdgesSimple  [ListCons<ParsedEdge> parsedEdges, ParsedEdge lookingEdge] (as blk) ; 3281
LDF    10937        ;  @lambda_1055 ; 3282
LDF    537          ;  @filter ; 3283
AP     2             ; 3284
RTN                  ; 3285
LD     0 0          ;  <== findPrecedingEdgesSimple  [ListCons<ParsedEdge> parsedEdges, ParsedEdge assEdge] (as blk) ; 3286
LDF    10708        ;  @lambda_1037 ; 3287
LDF    537          ;  @filter ; 3288
AP     2             ; 3289
RTN                  ; 3290
LD     0 0          ;  <== pointEquals  [Point a, Point b] (as blk) ; 3291
CAR                 ; generateTupleAccess total=2 pos=0 ; 3292
LD     0 1          ; var b ; 3293
CAR                 ; generateTupleAccess total=2 pos=0 ; 3294
CEQ                  ; 3295
LD     0 0          ; var a ; 3296
CDR                 ; generateTupleAccess total=2 pos=1 ; 3297
LD     0 1          ; var b ; 3298
CDR                 ; generateTupleAccess total=2 pos=1 ; 3299
CEQ                  ; 3300
MUL                  ; 3301
SEL    3304 3306    ; IF? 62 ; 3302
RTN                  ; 3303
LDC    1            ; THEN: 62 ; 3304
JOIN                 ; 3305
LDC    0            ; ELSE: 62 ; 3306
JOIN                 ; 3307
LD     0 0          ;  <== endingPointOfEdgeRoute  [ListCons<ParsedEdge> lookingEdge] (as blk) ; 3308
CAR                  ; 3309
ST     0 1           ; 3310
LD     0 1          ; var lastEdge ; 3311
CDR                 ; generateTupleAccess total=8 pos=1 ; 3312
CAR                  ; 3313
RTN                  ; 3314
LD     0 0          ;  <== countRoutePills  [ListCons<ParsedEdge> route] (as blk) ; 3315
LDC    0            ; just constant from code ; 3316
LDF    10945        ;  @lambda_1056 ; 3317
LDF    386          ;  @fold0 ; 3318
AP     3             ; 3319
RTN                  ; 3320
LD     0 0          ;  <== safetyPercent  [ListCons<ParsedEdge> routeDirected] (as blk) ; 3321
CAR                  ; 3322
ST     0 1           ; 3323
LDC    0            ; just constant from code ; 3324
LDC    100          ; Named Const = VMExtras.GET_READER ; 3325
LDC    0            ; just constant from code ; 3326
LD     0 1          ; var hd ; 3327
CDR                 ; generateTupleAccess total=8 pos=7 ; 3328
CDR                  ; 3329
CDR                  ; 3330
CDR                  ; 3331
CDR                  ; 3332
CDR                  ; 3333
CDR                  ; 3334
AP     2             ; 3335
AP     1             ; 3336
ST     0 2           ; 3337
LD     0 0          ; var routeDirected ; 3338
CDR                  ; 3339
ST     0 0           ; 3340
LD     0 0          ; var routeDirected ; 3341
ATOM                 ; 3342
LDC    1            ; for negation ; 3343
SUB                  ; 3344
SEL    3366 3391     ; 3345
LD     0 0          ; var routeDirected ; 3346
ATOM                 ; 3347
LDC    1            ; for negation ; 3348
SUB                  ; 3349
SEL    3392 3414     ; 3350
LD     0 2          ; var danger ; 3351
LDC    100          ; just constant from code ; 3352
CGT                  ; 3353
SEL    3415 3417    ; IF? 63 ; 3354
LDC    100          ; just constant from code ; 3355
MUL                  ; 3356
LDC    100          ; just constant from code ; 3357
DIV                  ; 3358
ST     0 2           ; 3359
LDC    100          ; just constant from code ; 3360
LD     0 2          ; var danger ; 3361
SUB                  ; 3362
ST     0 3           ; 3363
LD     0 3          ; var safety ; 3364
RTN                  ; 3365
LD     0 0          ; branch@3366 ; 3366
CAR                  ; 3367
ST     0 1           ; 3368
LD     0 2          ; var danger ; 3369
LDC    0            ; just constant from code ; 3370
LDC    100          ; Named Const = VMExtras.GET_READER ; 3371
LDC    0            ; just constant from code ; 3372
LD     0 1          ; var hd ; 3373
CDR                 ; generateTupleAccess total=8 pos=7 ; 3374
CDR                  ; 3375
CDR                  ; 3376
CDR                  ; 3377
CDR                  ; 3378
CDR                  ; 3379
CDR                  ; 3380
AP     2             ; 3381
AP     1             ; 3382
LDC    5            ; just constant from code ; 3383
DIV                  ; 3384
ADD                  ; 3385
ST     0 2           ; 3386
LD     0 0          ; var routeDirected ; 3387
CDR                  ; 3388
ST     0 0           ; 3389
JOIN                 ; 3390
JOIN                ; branch@3391 ; 3391
LD     0 0          ; branch@3392 ; 3392
CAR                  ; 3393
ST     0 1           ; 3394
LD     0 2          ; var danger ; 3395
LDC    0            ; just constant from code ; 3396
LDC    100          ; Named Const = VMExtras.GET_READER ; 3397
LDC    0            ; just constant from code ; 3398
LD     0 1          ; var hd ; 3399
CDR                 ; generateTupleAccess total=8 pos=7 ; 3400
CDR                  ; 3401
CDR                  ; 3402
CDR                  ; 3403
CDR                  ; 3404
CDR                  ; 3405
CDR                  ; 3406
AP     2             ; 3407
AP     1             ; 3408
LDC    15           ; just constant from code ; 3409
DIV                  ; 3410
ADD                  ; 3411
ST     0 2           ; 3412
JOIN                 ; 3413
JOIN                ; branch@3414 ; 3414
LDC    100          ; THEN: 63 ; 3415
JOIN                 ; 3416
LD     0 2          ; ELSE: 63 ; 3417
JOIN                 ; 3418
LDF    403          ;  <== findBestDistantEdge  [ListCons<ParsedEdge> currentEdges, AIState aistate, WorldState worldState] (as blk), ALSO: @queue_new ; 3419
AP     0             ; 3420
ST     0 3           ; 3421
LD     0 0          ; var currentEdges ; 3422
LD     0 3          ; var q ; 3423
LDF    10583        ;  @lambda_1029 ; 3424
LDF    386          ;  @fold0 ; 3425
AP     3             ; 3426
ST     0 3           ; 3427
LD     0 1          ; var aistate ; 3428
LD     0 2          ; var worldState ; 3429
LD     0 3          ; var q ; 3430
LDC    0            ; NULL literal ; 3431
LDC    0            ; just constant from code ; 3432
CONS                 ; 3433
LD     0 0          ; var currentEdges ; 3434
LDF    10590        ;  @lambda_1030 ; 3435
LDF    69           ;  @map ; 3436
AP     2             ; 3437
LDF    1317         ;  @sorted_map_assoc_all ; 3438
AP     2             ; 3439
LDC    0            ; NULL literal ; 3440
LDC    0            ; just constant from code ; 3441
LDC 0               ; local var space ; 3442
LDF    3138         ;  @waveFromEdgeToNearestEdges ; 3443
AP     7             ; 3444
ST     0 4           ; 3445
LD     0 4          ; var dests ; 3446
LDF    10600        ;  @lambda_1031 ; 3447
LDF    69           ;  @map ; 3448
AP     2             ; 3449
ST     0 5           ; 3450
LD     0 5          ; var directedRoutes ; 3451
LDF    10604        ;  @lambda_1032 ; 3452
LDF    69           ;  @map ; 3453
AP     2             ; 3454
ST     0 6           ; 3455
LD     0 6          ; var scores ; 3456
LDF    10658        ;  @lambda_1033 ; 3457
LDF    335          ;  @maximum_by ; 3458
AP     2             ; 3459
ST     0 7           ; 3460
LD     0 7          ; var winningRoute ; 3461
CAR                 ; generateTupleAccess total=3 pos=0 ; 3462
CAR                  ; 3463
ST     0 8           ; 3464
LD     0 8          ; var myStart ; 3465
RTN                  ; 3466
LD     0 0          ;  <== createInitialState  [WorldState ws, ListCons<ListCons> ghostSpecs] (as blk) ; 3467
CDR                 ; generateTupleAccess total=4 pos=2 ; 3468
CDR                  ; 3469
CAR                  ; 3470
LDF    532          ;  @length ; 3471
AP     1             ; 3472
LDF    777          ;  @range_n ; 3473
AP     1             ; 3474
ST     0 2           ; 3475
LD     0 0          ; var ws ; 3476
CAR                 ; generateTupleAccess total=4 pos=0 ; 3477
LDF    4036         ;  @parseStaticMap ; 3478
AP     1             ; 3479
LDC    0            ; just constant from code ; 3480
LDC    0            ; just constant from code ; 3481
LDF    10423        ;  @lambda_1019 ; 3482
LD     0 0          ; var ws ; 3483
CDR                 ; generateTupleAccess total=4 pos=2 ; 3484
CDR                  ; 3485
CAR                  ; 3486
LD     0 1          ; var ghostSpecs ; 3487
LD     0 2          ; var ghostNumbers ; 3488
LDF    687          ;  @zip3_with ; 3489
AP     4             ; 3490
CONS                 ; 3491
CONS                 ; 3492
CONS                 ; 3493
RTN                  ; 3494
LD     0 0          ;  <== isWall  [int test] (as blk) ; 3495
LDC    0            ; Named Const = CT.WALL ; 3496
CEQ                  ; 3497
SEL    3500 3502    ; IF? 64 ; 3498
RTN                  ; 3499
LDC    1            ; THEN: 64 ; 3500
JOIN                 ; 3501
LDC    0            ; ELSE: 64 ; 3502
JOIN                 ; 3503
LDC    77           ;  <== isWalkable  [int test] (as blk) ; 3504
ST     0 1           ; 3505
LD     0 0          ; var test ; 3506
LDC    0            ; Named Const = CT.WALL ; 3507
CEQ                  ; 3508
SEL    3512 3515     ; 3509
LD     0 1          ; var retval ; 3510
RTN                  ; 3511
LDC    0            ; branch@3512 ; 3512
ST     0 1           ; 3513
JOIN                 ; 3514
LDC    1            ; branch@3515 ; 3515
ST     0 1           ; 3516
JOIN                 ; 3517
LD     0 0          ;  <== isWalkable2  [ListCons<ListCons<Integer>> map, Point p] (as blk) ; 3518
LD     0 1          ; var p ; 3519
CDR                 ; generateTupleAccess total=2 pos=1 ; 3520
LD     0 1          ; var p ; 3521
CAR                 ; generateTupleAccess total=2 pos=0 ; 3522
LDF    4113         ;  @getMapItem ; 3523
AP     3             ; 3524
LDC 0               ; local var space ; 3525
LDF    3504         ;  @isWalkable ; 3526
AP     2             ; 3527
RTN                  ; 3528
LD     0 0          ;  <== isJunction  [ListCons<ListCons<Integer>> map, int x, int y] (as blk) ; 3529
LD     0 2          ; var y ; 3530
LDC    1            ; just constant from code ; 3531
SUB                  ; 3532
LD     0 1          ; var x ; 3533
LDF    4113         ;  @getMapItem ; 3534
AP     3             ; 3535
LDC 0               ; local var space ; 3536
LDF    3504         ;  @isWalkable ; 3537
AP     2             ; 3538
ST     0 3           ; 3539
LD     0 0          ; var map ; 3540
LD     0 2          ; var y ; 3541
LDC    1            ; just constant from code ; 3542
ADD                  ; 3543
LD     0 1          ; var x ; 3544
LDF    4113         ;  @getMapItem ; 3545
AP     3             ; 3546
LDC 0               ; local var space ; 3547
LDF    3504         ;  @isWalkable ; 3548
AP     2             ; 3549
ST     0 4           ; 3550
LD     0 0          ; var map ; 3551
LD     0 2          ; var y ; 3552
LD     0 1          ; var x ; 3553
LDC    1            ; just constant from code ; 3554
SUB                  ; 3555
LDF    4113         ;  @getMapItem ; 3556
AP     3             ; 3557
LDC 0               ; local var space ; 3558
LDF    3504         ;  @isWalkable ; 3559
AP     2             ; 3560
ST     0 5           ; 3561
LD     0 0          ; var map ; 3562
LD     0 2          ; var y ; 3563
LD     0 1          ; var x ; 3564
LDC    1            ; just constant from code ; 3565
ADD                  ; 3566
LDF    4113         ;  @getMapItem ; 3567
AP     3             ; 3568
LDC 0               ; local var space ; 3569
LDF    3504         ;  @isWalkable ; 3570
AP     2             ; 3571
ST     0 6           ; 3572
LD     0 3          ; var a1 ; 3573
LD     0 4          ; var a2 ; 3574
ADD                  ; 3575
LD     0 5          ; var a3 ; 3576
ADD                  ; 3577
LD     0 6          ; var a4 ; 3578
ADD                  ; 3579
LDC    2            ; just constant from code ; 3580
CGT                  ; 3581
SEL    3584 3586    ; IF? 66 ; 3582
RTN                  ; 3583
LDC    1            ; THEN: 66 ; 3584
JOIN                 ; 3585
LDC    0            ; ELSE: 66 ; 3586
JOIN                 ; 3587
LD     0 0          ;  <== isDeadEnd  [ListCons<ListCons<Integer>> map, int x, int y] (as blk) ; 3588
LD     0 2          ; var y ; 3589
LDC    1            ; just constant from code ; 3590
SUB                  ; 3591
LD     0 1          ; var x ; 3592
LDF    4113         ;  @getMapItem ; 3593
AP     3             ; 3594
LDC 0               ; local var space ; 3595
LDF    3504         ;  @isWalkable ; 3596
AP     2             ; 3597
ST     0 3           ; 3598
LD     0 0          ; var map ; 3599
LD     0 2          ; var y ; 3600
LDC    1            ; just constant from code ; 3601
ADD                  ; 3602
LD     0 1          ; var x ; 3603
LDF    4113         ;  @getMapItem ; 3604
AP     3             ; 3605
LDC 0               ; local var space ; 3606
LDF    3504         ;  @isWalkable ; 3607
AP     2             ; 3608
ST     0 4           ; 3609
LD     0 0          ; var map ; 3610
LD     0 2          ; var y ; 3611
LD     0 1          ; var x ; 3612
LDC    1            ; just constant from code ; 3613
SUB                  ; 3614
LDF    4113         ;  @getMapItem ; 3615
AP     3             ; 3616
LDC 0               ; local var space ; 3617
LDF    3504         ;  @isWalkable ; 3618
AP     2             ; 3619
ST     0 5           ; 3620
LD     0 0          ; var map ; 3621
LD     0 2          ; var y ; 3622
LD     0 1          ; var x ; 3623
LDC    1            ; just constant from code ; 3624
ADD                  ; 3625
LDF    4113         ;  @getMapItem ; 3626
AP     3             ; 3627
LDC 0               ; local var space ; 3628
LDF    3504         ;  @isWalkable ; 3629
AP     2             ; 3630
ST     0 6           ; 3631
LD     0 3          ; var a1 ; 3632
LD     0 4          ; var a2 ; 3633
ADD                  ; 3634
LD     0 5          ; var a3 ; 3635
ADD                  ; 3636
LD     0 6          ; var a4 ; 3637
ADD                  ; 3638
LDC    1            ; just constant from code ; 3639
CEQ                  ; 3640
SEL    3643 3645    ; IF? 67 ; 3641
RTN                  ; 3642
LDC    1            ; THEN: 67 ; 3643
JOIN                 ; 3644
LDC    0            ; ELSE: 67 ; 3645
JOIN                 ; 3646
LD     0 0          ;  <== findNeighbourJunctions  [ListCons<ListCons<Integer>> map, Point somePoint, SortedMap<Point> allJunctions, ListCons<Point> allJunctions2, ListCons<Function2<Integer,Integer,Function1<Integer,Integer>>> accessors] (as blk) ; 3647
LDF    403          ;  @queue_new ; 3648
AP     0             ; 3649
LD     0 1          ; var somePoint ; 3650
LDC    0            ; NULL literal ; 3651
CONS                 ; 3652
LDF    407          ;  @queue_enqueue ; 3653
AP     2             ; 3654
LD     0 2          ; var allJunctions ; 3655
LD     0 3          ; var allJunctions2 ; 3656
LDC    0            ; NULL literal ; 3657
LDC    0            ; just constant from code ; 3658
CONS                 ; 3659
LD     0 1          ; var somePoint ; 3660
LDF    3716         ;  @getPointKey ; 3661
AP     1             ; 3662
LD     0 1          ; var somePoint ; 3663
LDF    1308         ;  @sorted_map_assoc ; 3664
AP     3             ; 3665
LDC    0            ; NULL literal ; 3666
LDC 0               ; local var space ; 3667
LDF    3684         ;  @waveFromPointToNearestJunction ; 3668
AP     7             ; 3669
ST     0 5           ; 3670
LD     0 5          ; var allNeighbourJunctionsPaths ; 3671
LDF    10953        ;  @lambda_1057 ; 3672
LDF    69           ;  @map ; 3673
AP     2             ; 3674
RTN                  ; 3675
LD     0 0          ;  <== makeEdgeAccess  [ListCons<Point> p, ListCons<Function2<Integer,Integer,Function1<Integer,Integer>>> accessors] (as blk) ; 3676
LDF    10980        ;  @lambda_1058 ; 3677
LDF    69           ;  @map ; 3678
AP     2             ; 3679
LD     0 0          ; var p ; 3680
LDF    724          ;  @zip ; 3681
AP     2             ; 3682
RTN                  ; 3683
LD     0 1          ;  <== waveFromPointToNearestJunction  [ListCons<ListCons<Integer>> map, Queue<ListCons<Point>> pointQueue, SortedMap<Point> destinations, ListCons<Point> destinations2, SortedMap<Point> visited, ListCons<ListCons<Point>> acc] (as blk) ; 3684
LDF    415          ;  @queue_isempty ; 3685
AP     1             ; 3686
SEL    3690 3693     ; 3687
LD     0 6          ; var retval ; 3688
RTN                  ; 3689
LD     0 5          ; branch@3690 ; 3690
ST     0 6           ; 3691
JOIN                 ; 3692
LD     0 0          ; branch@3693 ; 3693
LD     0 1          ; var pointQueue ; 3694
LD     0 2          ; var destinations ; 3695
LD     0 3          ; var destinations2 ; 3696
LD     0 4          ; var visited ; 3697
LD     0 5          ; var acc ; 3698
LDC 0               ; local var space ; 3699
LDC 0               ; local var space ; 3700
LDC 0               ; local var space ; 3701
LDC 0               ; local var space ; 3702
LDC 0               ; local var space ; 3703
LDC 0               ; local var space ; 3704
LDC 0               ; local var space ; 3705
LDC 0               ; local var space ; 3706
LDC 0               ; local var space ; 3707
LDC 0               ; local var space ; 3708
LDC 0               ; local var space ; 3709
LDC 0               ; local var space ; 3710
LDC 0               ; local var space ; 3711
LDF    3729         ;  @waveFromPointToNearestJunction0 ; 3712
AP     19            ; 3713
ST     0 6           ; 3714
JOIN                 ; 3715
LD     0 0          ;  <== getPointKey  [Point pt] (as blk) ; 3716
CAR                 ; generateTupleAccess total=2 pos=0 ; 3717
LDC    300          ; just constant from code ; 3718
MUL                  ; 3719
LD     0 0          ; var pt ; 3720
CDR                 ; generateTupleAccess total=2 pos=1 ; 3721
ADD                  ; 3722
RTN                  ; 3723
LD     0 0          ;  <== addPointKeyAll  [ListCons<Point> in] (as blk) ; 3724
LDF    10290        ;  @lambda_1012 ; 3725
LDF    69           ;  @map ; 3726
AP     2             ; 3727
RTN                  ; 3728
LD     0 1          ;  <== waveFromPointToNearestJunction0  [ListCons<ListCons<Integer>> map, Queue<ListCons<Point>> pointQueue, SortedMap<Point> destinations, ListCons<Point> destinations2, SortedMap<Point> visited, ListCons<ListCons<Point>> acc] (as blk) ; 3729
LDC 0               ; local var space ; 3730
LDF    492          ;  @queue_dequeue ; 3731
AP     2             ; 3732
ST     0 7           ; 3733
LD     0 7          ; var emptier ; 3734
CAR                 ; generateTupleAccess total=2 pos=0 ; 3735
ST     0 8           ; 3736
LD     0 8          ; var thisRoute ; 3737
CAR                  ; 3738
ST     0 9           ; 3739
LD     0 9          ; var weAreHere ; 3740
CAR                 ; generateTupleAccess total=2 pos=0 ; 3741
LDC    1            ; just constant from code ; 3742
ADD                  ; 3743
LD     0 9          ; var weAreHere ; 3744
CDR                 ; generateTupleAccess total=2 pos=1 ; 3745
CONS                 ; 3746
LD     0 9          ; var weAreHere ; 3747
CAR                 ; generateTupleAccess total=2 pos=0 ; 3748
LDC    1            ; just constant from code ; 3749
SUB                  ; 3750
LD     0 9          ; var weAreHere ; 3751
CDR                 ; generateTupleAccess total=2 pos=1 ; 3752
CONS                 ; 3753
LD     0 9          ; var weAreHere ; 3754
CAR                 ; generateTupleAccess total=2 pos=0 ; 3755
LD     0 9          ; var weAreHere ; 3756
CDR                 ; generateTupleAccess total=2 pos=1 ; 3757
LDC    1            ; just constant from code ; 3758
ADD                  ; 3759
CONS                 ; 3760
LD     0 9          ; var weAreHere ; 3761
CAR                 ; generateTupleAccess total=2 pos=0 ; 3762
LD     0 9          ; var weAreHere ; 3763
CDR                 ; generateTupleAccess total=2 pos=1 ; 3764
LDC    1            ; just constant from code ; 3765
SUB                  ; 3766
CONS                 ; 3767
LDC    0            ; NULL literal ; 3768
CONS                 ; 3769
CONS                 ; 3770
CONS                 ; 3771
CONS                 ; 3772
LDF    3724         ;  @addPointKeyAll ; 3773
AP     1             ; 3774
ST     0 10          ; 3775
LD     0 10         ; var possibleDestinations ; 3776
LDF    10990        ;  @lambda_1059 ; 3777
LDF    537          ;  @filter ; 3778
AP     2             ; 3779
ST     0 11          ; 3780
LD     0 11         ; var exits ; 3781
LDF    11004        ;  @lambda_1060 ; 3782
LDF    537          ;  @filter ; 3783
AP     2             ; 3784
ST     0 12          ; 3785
LD     0 11         ; var exits ; 3786
LDF    11010        ;  @lambda_1061 ; 3787
LDF    537          ;  @filter ; 3788
AP     2             ; 3789
ST     0 13          ; 3790
LDC    0            ; NULL literal ; 3791
LDC    1            ; just constant from code ; 3792
CONS                 ; 3793
LD     0 12         ; var arrivedsList ; 3794
LDF    1317         ;  @sorted_map_assoc_all ; 3795
AP     2             ; 3796
ST     0 14          ; 3797
LD     0 11         ; var exits ; 3798
LDF    11015        ;  @lambda_1062 ; 3799
LDF    537          ;  @filter ; 3800
AP     2             ; 3801
ST     0 15          ; 3802
LD     0 15         ; var continueds ; 3803
LDF    11023        ;  @lambda_1063 ; 3804
LDF    69           ;  @map ; 3805
AP     2             ; 3806
ST     0 16          ; 3807
LD     0 16         ; var exitRoutes ; 3808
LD     0 7          ; var emptier ; 3809
CDR                 ; generateTupleAccess total=2 pos=1 ; 3810
LDF    11028        ;  @lambda_1064 ; 3811
LDF    386          ;  @fold0 ; 3812
AP     3             ; 3813
ST     0 17          ; 3814
LD     0 5          ; var acc ; 3815
LD     0 12         ; var arrivedsList ; 3816
LDF    11033        ;  @lambda_1065 ; 3817
LDF    69           ;  @map ; 3818
AP     2             ; 3819
LDF    184          ;  @concat2_set ; 3820
AP     2             ; 3821
ST     0 18          ; 3822
LD     0 12         ; var arrivedsList ; 3823
LDF    532          ;  @length ; 3824
AP     1             ; 3825
LD     0 13         ; var arrivedsList2 ; 3826
LDF    532          ;  @length ; 3827
AP     1             ; 3828
CEQ                  ; 3829
LDC    1            ; for negation ; 3830
SUB                  ; 3831
SEL    3848 3867     ; 3832
LD     0 0          ; var map ; 3833
LD     0 17         ; var filledQueue ; 3834
LD     0 2          ; var destinations ; 3835
LD     0 3          ; var destinations2 ; 3836
LD     0 4          ; var visited ; 3837
LD     0 11         ; var exits ; 3838
LDF    1317         ;  @sorted_map_assoc_all ; 3839
AP     2             ; 3840
LD     0 18         ; var newacc ; 3841
LDC 0               ; local var space ; 3842
LDF    3684         ;  @waveFromPointToNearestJunction ; 3843
AP     7             ; 3844
ST     0 6           ; 3845
LD     0 6          ; var retval ; 3846
RTN                  ; 3847
LDC    5000000      ; branch@3848 ; 3848
DBUG                 ; 3849
LD     0 2          ; var destinations ; 3850
DBUG                 ; 3851
LD     0 3          ; var destinations2 ; 3852
DBUG                 ; 3853
LD     0 12         ; var arrivedsList ; 3854
DBUG                 ; 3855
LD     0 13         ; var arrivedsList2 ; 3856
DBUG                 ; 3857
LD     0 11         ; var exits ; 3858
DBUG                 ; 3859
BRK                  ; 3860
LD     0 11         ; var exits ; 3861
LDF    11156        ;  @lambda_1076 ; 3862
LDF    537          ;  @filter ; 3863
AP     2             ; 3864
DBUG                 ; 3865
JOIN                 ; 3866
JOIN                ; branch@3867 ; 3867
LD     0 1          ;  <== findEdgesForPoint  [AIState state, Point pos] (as blk) ; 3868
LD     0 0          ; var state ; 3869
CAR                 ; generateTupleAccess total=4 pos=0 ; 3870
CDR                 ; generateTupleAccess total=7 pos=6 ; 3871
CDR                  ; 3872
CDR                  ; 3873
CDR                  ; 3874
CDR                  ; 3875
CDR                  ; 3876
AP     1             ; 3877
RTN                  ; 3878
LD     0 1          ;  <== pointInEdge  [Point pos, ParsedEdge e] (as blk) ; 3879
CDR                 ; generateTupleAccess total=8 pos=2 ; 3880
CDR                  ; 3881
CAR                  ; 3882
LDF    11038        ;  @lambda_1066 ; 3883
LDF    545          ;  @any ; 3884
AP     2             ; 3885
RTN                  ; 3886
LDC    4000001      ;  <== parseMap  [ListCons<ListCons<Integer>> m] (as blk) ; 3887
DBUG                 ; 3888
LD     0 0          ; var m ; 3889
LDF    10256        ;  @lambda_1007 ; 3890
LDF    69           ;  @map ; 3891
AP     2             ; 3892
ST     0 1           ; 3893
LDC    4000002      ; just constant from code ; 3894
DBUG                 ; 3895
LDF    10259        ;  @lambda_1008 ; 3896
LD     0 0          ; var m ; 3897
LD     0 1          ; var accessors ; 3898
LDF    660          ;  @zip_with ; 3899
AP     3             ; 3900
ST     0 2           ; 3901
LDC    4000003      ; just constant from code ; 3902
DBUG                 ; 3903
LD     0 2          ; var mapAccessors ; 3904
LDF    10263        ;  @lambda_1009 ; 3905
LDF    69           ;  @map ; 3906
AP     2             ; 3907
ST     0 3           ; 3908
LDC    4000004      ; just constant from code ; 3909
DBUG                 ; 3910
LD     0 0          ; var m ; 3911
LDC    0            ; just constant from code ; 3912
LDF    10270        ;  @lambda_1010 ; 3913
LDF    86           ;  @mapi ; 3914
AP     3             ; 3915
ST     0 4           ; 3916
LDC    4000005      ; just constant from code ; 3917
DBUG                 ; 3918
LD     0 4          ; var toConcat ; 3919
LDF    118          ;  @concat ; 3920
AP     1             ; 3921
ST     0 5           ; 3922
LD     0 5          ; var walkableList ; 3923
LDF    10278        ;  @lambda_1011 ; 3924
LDF    537          ;  @filter ; 3925
AP     2             ; 3926
ST     0 6           ; 3927
LDC    4000006      ; just constant from code ; 3928
DBUG                 ; 3929
LDC    0            ; NULL literal ; 3930
LDC    0            ; just constant from code ; 3931
CONS                 ; 3932
LD     0 5          ; var walkableList ; 3933
LDF    3724         ;  @addPointKeyAll ; 3934
AP     1             ; 3935
LDF    1317         ;  @sorted_map_assoc_all ; 3936
AP     2             ; 3937
ST     0 7           ; 3938
LDC    4000007      ; just constant from code ; 3939
DBUG                 ; 3940
LDC    0            ; NULL literal ; 3941
LDC    0            ; just constant from code ; 3942
CONS                 ; 3943
LD     0 6          ; var junctionsList ; 3944
LDF    3724         ;  @addPointKeyAll ; 3945
AP     1             ; 3946
LDF    1317         ;  @sorted_map_assoc_all ; 3947
AP     2             ; 3948
ST     0 8           ; 3949
LDC    4000008      ; just constant from code ; 3950
DBUG                 ; 3951
LD     0 6          ; var junctionsList ; 3952
LDF    10296        ;  @lambda_1013 ; 3953
LDF    69           ;  @map ; 3954
AP     2             ; 3955
LDF    118          ;  @concat ; 3956
AP     1             ; 3957
ST     0 9           ; 3958
LDC    4000009      ; just constant from code ; 3959
DBUG                 ; 3960
LD     0 9          ; var allParsedEdges ; 3961
LDC    0            ; just constant from code ; 3962
LDF    10305        ;  @lambda_1014 ; 3963
LDF    86           ;  @mapi ; 3964
AP     3             ; 3965
ST     0 10          ; 3966
LDC    4000010      ; just constant from code ; 3967
DBUG                 ; 3968
LD     0 10         ; var allParsedEdges2 ; 3969
LDC    0            ; just constant from code ; 3970
LDF    10343        ;  @lambda_1015 ; 3971
LDF    86           ;  @mapi ; 3972
AP     3             ; 3973
ST     0 11          ; 3974
LDC    4000011      ; just constant from code ; 3975
DBUG                 ; 3976
LD     0 0          ; var m ; 3977
LDF    532          ;  @length ; 3978
AP     1             ; 3979
LDC 0               ; local var space ; 3980
LDC 0               ; local var space ; 3981
LDF    9048         ;  @emptyEdgesArrayForMap ; 3982
AP     3             ; 3983
ST     0 12          ; 3984
LD     0 11         ; var allParsedEdges3 ; 3985
LDF    10408        ;  @lambda_1017 ; 3986
LDF    69           ;  @map ; 3987
AP     2             ; 3988
ST     0 13          ; 3989
LD     0 12         ; var edgesForPoint ; 3990
LDF    9046         ;  @toReadOnlyAccessor ; 3991
AP     1             ; 3992
ST     0 14          ; 3993
LD     0 7          ; var walkable ; 3994
LD     0 8          ; var junctions ; 3995
LD     0 11         ; var allParsedEdges3 ; 3996
LDC    0            ; NULL literal ; 3997
LDC    0            ; NULL literal ; 3998
LD     0 1          ; var accessors ; 3999
LD     0 14         ; var readOnlyEdgesForPoint ; 4000
CONS                 ; 4001
CONS                 ; 4002
CONS                 ; 4003
CONS                 ; 4004
CONS                 ; 4005
CONS                 ; 4006
RTN                  ; 4007
LD     0 2          ;  <== findEdge  [Point a, Point b, ListCons<ParsedEdge> edges] (as blk) ; 4008
LDF    11055        ;  @lambda_1067 ; 4009
LDF    537          ;  @filter ; 4010
AP     2             ; 4011
CAR                  ; 4012
RTN                  ; 4013
LD     0 0          ;  <== edgeNumber  [ParsedEdge edge] (as blk) ; 4014
CDR                 ; generateTupleAccess total=8 pos=5 ; 4015
CDR                  ; 4016
CDR                  ; 4017
CDR                  ; 4018
CDR                  ; 4019
CAR                  ; 4020
RTN                  ; 4021
LD     0 0          ;  <== my_cat_maybes  [ListCons<Maybe<Point>> maybeListCons] (as blk) ; 4022
LDC 0               ; local var space ; 4023
LDC 0               ; local var space ; 4024
LDF    107          ;  @cat_maybes ; 4025
AP     3             ; 4026
ST     0 1           ; 4027
LD     0 1          ; var rv ; 4028
RTN                  ; 4029
LD     0 0          ;  <== collectWalkableXY  [ListCons<Integer> row, Integer rowy] (as blk) ; 4030
LDC    0            ; just constant from code ; 4031
LDF    11068        ;  @lambda_1068 ; 4032
LDF    86           ;  @mapi ; 4033
AP     3             ; 4034
RTN                  ; 4035
LD     0 0          ;  <== parseStaticMap  [ListCons<ListCons<Integer>> map] (as blk) ; 4036
LDC 0               ; local var space ; 4037
LDC 0               ; local var space ; 4038
LDC 0               ; local var space ; 4039
LDC 0               ; local var space ; 4040
LDC 0               ; local var space ; 4041
LDC 0               ; local var space ; 4042
LDC 0               ; local var space ; 4043
LDC 0               ; local var space ; 4044
LDC 0               ; local var space ; 4045
LDC 0               ; local var space ; 4046
LDC 0               ; local var space ; 4047
LDC 0               ; local var space ; 4048
LDC 0               ; local var space ; 4049
LDC 0               ; local var space ; 4050
LDF    3887         ;  @parseMap ; 4051
AP     15            ; 4052
RTN                  ; 4053
LDF    403          ;  <== test2  [] (as blk), ALSO: @queue_new ; 4054
AP     0             ; 4055
LDC    1            ; just constant from code ; 4056
LDF    407          ;  @queue_enqueue ; 4057
AP     2             ; 4058
LDC    2            ; just constant from code ; 4059
LDF    407          ;  @queue_enqueue ; 4060
AP     2             ; 4061
LDC    3            ; just constant from code ; 4062
LDF    407          ;  @queue_enqueue ; 4063
AP     2             ; 4064
ST     0 0           ; 4065
LD     0 0          ; var queue ; 4066
LDC 0               ; local var space ; 4067
LDF    492          ;  @queue_dequeue ; 4068
AP     2             ; 4069
ST     0 1           ; 4070
LD     0 1          ; var q1 ; 4071
CDR                 ; generateTupleAccess total=2 pos=1 ; 4072
LDC 0               ; local var space ; 4073
LDF    492          ;  @queue_dequeue ; 4074
AP     2             ; 4075
ST     0 1           ; 4076
LD     0 1          ; var q1 ; 4077
CDR                 ; generateTupleAccess total=2 pos=1 ; 4078
LDC 0               ; local var space ; 4079
LDF    492          ;  @queue_dequeue ; 4080
AP     2             ; 4081
ST     0 1           ; 4082
LDC    1            ; just constant from code ; 4083
RTN                  ; 4084
LDC    0            ;  <== test3  [] (as blk) ; 4085
LDC    0            ; just constant from code ; 4086
CONS                 ; 4087
ST     0 0           ; 4088
LD     0 0          ; var map ; 4089
LDC    30           ; just constant from code ; 4090
LDC    31           ; just constant from code ; 4091
LDF    1308         ;  @sorted_map_assoc ; 4092
AP     3             ; 4093
LDC    20           ; just constant from code ; 4094
LDC    21           ; just constant from code ; 4095
LDF    1308         ;  @sorted_map_assoc ; 4096
AP     3             ; 4097
LDC    10           ; just constant from code ; 4098
LDC    11           ; just constant from code ; 4099
LDF    1308         ;  @sorted_map_assoc ; 4100
AP     3             ; 4101
ST     0 1           ; 4102
LD     0 1          ; var new_map2 ; 4103
LDC    20           ; just constant from code ; 4104
LDC    33           ; just constant from code ; 4105
LDF    1308         ;  @sorted_map_assoc ; 4106
AP     3             ; 4107
LDC    20           ; just constant from code ; 4108
LDC    88           ; just constant from code ; 4109
LDF    1292         ;  @sorted_map_get ; 4110
AP     3             ; 4111
RTN                  ; 4112
LDC    0            ;  <== getMapItem  [ListCons<ListCons<Integer>> map, int y, int x] (as blk) ; 4113
LD     0 1          ; var y ; 4114
CGT                  ; 4115
LDC    0            ; just constant from code ; 4116
LD     0 2          ; var x ; 4117
CGT                  ; 4118
ADD                  ; 4119
SEL    4122 4124    ; IF? 65 ; 4120
RTN                  ; 4121
LDC    0            ; THEN: 65 ; 4122
JOIN                 ; 4123
LD     0 0          ; ELSE: 65 ; 4124
LD     0 1          ; var y ; 4125
LDC    0            ; just constant from code ; 4126
LDF    469          ;  @list_item_def ; 4127
AP     3             ; 4128
LD     0 2          ; var x ; 4129
LDC    0            ; just constant from code ; 4130
LDF    469          ;  @list_item_def ; 4131
AP     3             ; 4132
JOIN                 ; 4133
LDF    9091         ; generated from native: array_256, ALSO: @array_256_impl ; 4134
AP     0             ; 4135
RTN                  ; 4136
LDC 0                ; 4137
LDC 0                ; 4138
LDC 0                ; 4139
LDC 0                ; 4140
LDC 0                ; 4141
LDC 0                ; 4142
LDC 0                ; 4143
LDC 0                ; 4144
LDC 0                ; 4145
LDC 0                ; 4146
LDC 0                ; 4147
LDC 0                ; 4148
LDC 0                ; 4149
LDC 0                ; 4150
LDC 0                ; 4151
LDC 0                ; 4152
LDC 0                ; 4153
LDC 0                ; 4154
LDC 0                ; 4155
LDC 0                ; 4156
LDC 0                ; 4157
LDC 0                ; 4158
LDC 0                ; 4159
LDC 0                ; 4160
LDC 0                ; 4161
LDC 0                ; 4162
LDC 0                ; 4163
LDC 0                ; 4164
LDC 0                ; 4165
LDC 0                ; 4166
LDC 0                ; 4167
LDC 0                ; 4168
LDC 0                ; 4169
LDC 0                ; 4170
LDC 0                ; 4171
LDC 0                ; 4172
LDC 0                ; 4173
LDC 0                ; 4174
LDC 0                ; 4175
LDC 0                ; 4176
LDC 0                ; 4177
LDC 0                ; 4178
LDC 0                ; 4179
LDC 0                ; 4180
LDC 0                ; 4181
LDC 0                ; 4182
LDC 0                ; 4183
LDC 0                ; 4184
LDC 0                ; 4185
LDC 0                ; 4186
LDC 0                ; 4187
LDC 0                ; 4188
LDC 0                ; 4189
LDC 0                ; 4190
LDC 0                ; 4191
LDC 0                ; 4192
LDC 0                ; 4193
LDC 0                ; 4194
LDC 0                ; 4195
LDC 0                ; 4196
LDC 0                ; 4197
LDC 0                ; 4198
LDC 0                ; 4199
LDC 0                ; 4200
LDC 0                ; 4201
LDC 0                ; 4202
LDC 0                ; 4203
LDC 0                ; 4204
LDC 0                ; 4205
LDC 0                ; 4206
LDC 0                ; 4207
LDC 0                ; 4208
LDC 0                ; 4209
LDC 0                ; 4210
LDC 0                ; 4211
LDC 0                ; 4212
LDC 0                ; 4213
LDC 0                ; 4214
LDC 0                ; 4215
LDC 0                ; 4216
LDC 0                ; 4217
LDC 0                ; 4218
LDC 0                ; 4219
LDC 0                ; 4220
LDC 0                ; 4221
LDC 0                ; 4222
LDC 0                ; 4223
LDC 0                ; 4224
LDC 0                ; 4225
LDC 0                ; 4226
LDC 0                ; 4227
LDC 0                ; 4228
LDC 0                ; 4229
LDC 0                ; 4230
LDC 0                ; 4231
LDC 0                ; 4232
LDC 0                ; 4233
LDC 0                ; 4234
LDC 0                ; 4235
LDC 0                ; 4236
LDC 0                ; 4237
LDC 0                ; 4238
LDC 0                ; 4239
LDC 0                ; 4240
LDC 0                ; 4241
LDC 0                ; 4242
LDC 0                ; 4243
LDC 0                ; 4244
LDC 0                ; 4245
LDC 0                ; 4246
LDC 0                ; 4247
LDC 0                ; 4248
LDC 0                ; 4249
LDC 0                ; 4250
LDC 0                ; 4251
LDC 0                ; 4252
LDC 0                ; 4253
LDC 0                ; 4254
LDC 0                ; 4255
LDC 0                ; 4256
LDC 0                ; 4257
LDC 0                ; 4258
LDC 0                ; 4259
LDC 0                ; 4260
LDC 0                ; 4261
LDC 0                ; 4262
LDC 0                ; 4263
LDC 0                ; 4264
LDC 0                ; 4265
LDC 0                ; 4266
LDC 0                ; 4267
LDC 0                ; 4268
LDC 0                ; 4269
LDC 0                ; 4270
LDC 0                ; 4271
LDC 0                ; 4272
LDC 0                ; 4273
LDC 0                ; 4274
LDC 0                ; 4275
LDC 0                ; 4276
LDC 0                ; 4277
LDC 0                ; 4278
LDC 0                ; 4279
LDC 0                ; 4280
LDC 0                ; 4281
LDC 0                ; 4282
LDC 0                ; 4283
LDC 0                ; 4284
LDC 0                ; 4285
LDC 0                ; 4286
LDC 0                ; 4287
LDC 0                ; 4288
LDC 0                ; 4289
LDC 0                ; 4290
LDC 0                ; 4291
LDC 0                ; 4292
LDC 0                ; 4293
LDC 0                ; 4294
LDC 0                ; 4295
LDC 0                ; 4296
LDC 0                ; 4297
LDC 0                ; 4298
LDC 0                ; 4299
LDC 0                ; 4300
LDC 0                ; 4301
LDC 0                ; 4302
LDC 0                ; 4303
LDC 0                ; 4304
LDC 0                ; 4305
LDC 0                ; 4306
LDC 0                ; 4307
LDC 0                ; 4308
LDC 0                ; 4309
LDC 0                ; 4310
LDC 0                ; 4311
LDC 0                ; 4312
LDC 0                ; 4313
LDC 0                ; 4314
LDC 0                ; 4315
LDC 0                ; 4316
LDC 0                ; 4317
LDC 0                ; 4318
LDC 0                ; 4319
LDC 0                ; 4320
LDC 0                ; 4321
LDC 0                ; 4322
LDC 0                ; 4323
LDC 0                ; 4324
LDC 0                ; 4325
LDC 0                ; 4326
LDC 0                ; 4327
LDC 0                ; 4328
LDC 0                ; 4329
LDC 0                ; 4330
LDC 0                ; 4331
LDC 0                ; 4332
LDC 0                ; 4333
LDC 0                ; 4334
LDC 0                ; 4335
LDC 0                ; 4336
LDC 0                ; 4337
LDC 0                ; 4338
LDC 0                ; 4339
LDC 0                ; 4340
LDC 0                ; 4341
LDC 0                ; 4342
LDC 0                ; 4343
LDC 0                ; 4344
LDC 0                ; 4345
LDC 0                ; 4346
LDC 0                ; 4347
LDC 0                ; 4348
LDC 0                ; 4349
LDC 0                ; 4350
LDC 0                ; 4351
LDC 0                ; 4352
LDC 0                ; 4353
LDC 0                ; 4354
LDC 0                ; 4355
LDC 0                ; 4356
LDC 0                ; 4357
LDC 0                ; 4358
LDC 0                ; 4359
LDC 0                ; 4360
LDC 0                ; 4361
LDC 0                ; 4362
LDC 0                ; 4363
LDC 0                ; 4364
LDC 0                ; 4365
LDC 0                ; 4366
LDC 0                ; 4367
LDC 0                ; 4368
LDC 0                ; 4369
LDC 0                ; 4370
LDC 0                ; 4371
LDC 0                ; 4372
LDC 0                ; 4373
LDC 0                ; 4374
LDC 0                ; 4375
LDC 0                ; 4376
LDC 0                ; 4377
LDC 0                ; 4378
LDC 0                ; 4379
LDC 0                ; 4380
LDC 0                ; 4381
LDC 0                ; 4382
LDC 0                ; 4383
LDC 0                ; 4384
LDC 0                ; 4385
LDC 0                ; 4386
LDC 0                ; 4387
LDC 0                ; 4388
LDC 0                ; 4389
LDC 0                ; 4390
LDC 0                ; 4391
LDC 0                ; 4392
LDF 4393             ; 4393
AP 256               ; 4394
RTN                  ; 4395
LDF  4395            ; 4396
RTN                  ; 4397
LD  0   0            ; 4398
LDC 100              ; 4399
CEQ                  ; 4400
TSEL    4399 5425    ; 4401
LD  0   1            ; 4402
LDC 0                ; 4403
CEQ                  ; 4404
TSEL    6453 4403    ; 4405
LD  0   1            ; 4406
LDC 1                ; 4407
CEQ                  ; 4408
TSEL    6463 4407    ; 4409
LD  0   1            ; 4410
LDC 2                ; 4411
CEQ                  ; 4412
TSEL    6473 4411    ; 4413
LD  0   1            ; 4414
LDC 3                ; 4415
CEQ                  ; 4416
TSEL    6483 4415    ; 4417
LD  0   1            ; 4418
LDC 4                ; 4419
CEQ                  ; 4420
TSEL    6493 4419    ; 4421
LD  0   1            ; 4422
LDC 5                ; 4423
CEQ                  ; 4424
TSEL    6503 4423    ; 4425
LD  0   1            ; 4426
LDC 6                ; 4427
CEQ                  ; 4428
TSEL    6513 4427    ; 4429
LD  0   1            ; 4430
LDC 7                ; 4431
CEQ                  ; 4432
TSEL    6523 4431    ; 4433
LD  0   1            ; 4434
LDC 8                ; 4435
CEQ                  ; 4436
TSEL    6533 4435    ; 4437
LD  0   1            ; 4438
LDC 9                ; 4439
CEQ                  ; 4440
TSEL    6543 4439    ; 4441
LD  0   1            ; 4442
LDC 10               ; 4443
CEQ                  ; 4444
TSEL    6553 4443    ; 4445
LD  0   1            ; 4446
LDC 11               ; 4447
CEQ                  ; 4448
TSEL    6563 4447    ; 4449
LD  0   1            ; 4450
LDC 12               ; 4451
CEQ                  ; 4452
TSEL    6573 4451    ; 4453
LD  0   1            ; 4454
LDC 13               ; 4455
CEQ                  ; 4456
TSEL    6583 4455    ; 4457
LD  0   1            ; 4458
LDC 14               ; 4459
CEQ                  ; 4460
TSEL    6593 4459    ; 4461
LD  0   1            ; 4462
LDC 15               ; 4463
CEQ                  ; 4464
TSEL    6603 4463    ; 4465
LD  0   1            ; 4466
LDC 16               ; 4467
CEQ                  ; 4468
TSEL    6613 4467    ; 4469
LD  0   1            ; 4470
LDC 17               ; 4471
CEQ                  ; 4472
TSEL    6623 4471    ; 4473
LD  0   1            ; 4474
LDC 18               ; 4475
CEQ                  ; 4476
TSEL    6633 4475    ; 4477
LD  0   1            ; 4478
LDC 19               ; 4479
CEQ                  ; 4480
TSEL    6643 4479    ; 4481
LD  0   1            ; 4482
LDC 20               ; 4483
CEQ                  ; 4484
TSEL    6653 4483    ; 4485
LD  0   1            ; 4486
LDC 21               ; 4487
CEQ                  ; 4488
TSEL    6663 4487    ; 4489
LD  0   1            ; 4490
LDC 22               ; 4491
CEQ                  ; 4492
TSEL    6673 4491    ; 4493
LD  0   1            ; 4494
LDC 23               ; 4495
CEQ                  ; 4496
TSEL    6683 4495    ; 4497
LD  0   1            ; 4498
LDC 24               ; 4499
CEQ                  ; 4500
TSEL    6693 4499    ; 4501
LD  0   1            ; 4502
LDC 25               ; 4503
CEQ                  ; 4504
TSEL    6703 4503    ; 4505
LD  0   1            ; 4506
LDC 26               ; 4507
CEQ                  ; 4508
TSEL    6713 4507    ; 4509
LD  0   1            ; 4510
LDC 27               ; 4511
CEQ                  ; 4512
TSEL    6723 4511    ; 4513
LD  0   1            ; 4514
LDC 28               ; 4515
CEQ                  ; 4516
TSEL    6733 4515    ; 4517
LD  0   1            ; 4518
LDC 29               ; 4519
CEQ                  ; 4520
TSEL    6743 4519    ; 4521
LD  0   1            ; 4522
LDC 30               ; 4523
CEQ                  ; 4524
TSEL    6753 4523    ; 4525
LD  0   1            ; 4526
LDC 31               ; 4527
CEQ                  ; 4528
TSEL    6763 4527    ; 4529
LD  0   1            ; 4530
LDC 32               ; 4531
CEQ                  ; 4532
TSEL    6773 4531    ; 4533
LD  0   1            ; 4534
LDC 33               ; 4535
CEQ                  ; 4536
TSEL    6783 4535    ; 4537
LD  0   1            ; 4538
LDC 34               ; 4539
CEQ                  ; 4540
TSEL    6793 4539    ; 4541
LD  0   1            ; 4542
LDC 35               ; 4543
CEQ                  ; 4544
TSEL    6803 4543    ; 4545
LD  0   1            ; 4546
LDC 36               ; 4547
CEQ                  ; 4548
TSEL    6813 4547    ; 4549
LD  0   1            ; 4550
LDC 37               ; 4551
CEQ                  ; 4552
TSEL    6823 4551    ; 4553
LD  0   1            ; 4554
LDC 38               ; 4555
CEQ                  ; 4556
TSEL    6833 4555    ; 4557
LD  0   1            ; 4558
LDC 39               ; 4559
CEQ                  ; 4560
TSEL    6843 4559    ; 4561
LD  0   1            ; 4562
LDC 40               ; 4563
CEQ                  ; 4564
TSEL    6853 4563    ; 4565
LD  0   1            ; 4566
LDC 41               ; 4567
CEQ                  ; 4568
TSEL    6863 4567    ; 4569
LD  0   1            ; 4570
LDC 42               ; 4571
CEQ                  ; 4572
TSEL    6873 4571    ; 4573
LD  0   1            ; 4574
LDC 43               ; 4575
CEQ                  ; 4576
TSEL    6883 4575    ; 4577
LD  0   1            ; 4578
LDC 44               ; 4579
CEQ                  ; 4580
TSEL    6893 4579    ; 4581
LD  0   1            ; 4582
LDC 45               ; 4583
CEQ                  ; 4584
TSEL    6903 4583    ; 4585
LD  0   1            ; 4586
LDC 46               ; 4587
CEQ                  ; 4588
TSEL    6913 4587    ; 4589
LD  0   1            ; 4590
LDC 47               ; 4591
CEQ                  ; 4592
TSEL    6923 4591    ; 4593
LD  0   1            ; 4594
LDC 48               ; 4595
CEQ                  ; 4596
TSEL    6933 4595    ; 4597
LD  0   1            ; 4598
LDC 49               ; 4599
CEQ                  ; 4600
TSEL    6943 4599    ; 4601
LD  0   1            ; 4602
LDC 50               ; 4603
CEQ                  ; 4604
TSEL    6953 4603    ; 4605
LD  0   1            ; 4606
LDC 51               ; 4607
CEQ                  ; 4608
TSEL    6963 4607    ; 4609
LD  0   1            ; 4610
LDC 52               ; 4611
CEQ                  ; 4612
TSEL    6973 4611    ; 4613
LD  0   1            ; 4614
LDC 53               ; 4615
CEQ                  ; 4616
TSEL    6983 4615    ; 4617
LD  0   1            ; 4618
LDC 54               ; 4619
CEQ                  ; 4620
TSEL    6993 4619    ; 4621
LD  0   1            ; 4622
LDC 55               ; 4623
CEQ                  ; 4624
TSEL    7003 4623    ; 4625
LD  0   1            ; 4626
LDC 56               ; 4627
CEQ                  ; 4628
TSEL    7013 4627    ; 4629
LD  0   1            ; 4630
LDC 57               ; 4631
CEQ                  ; 4632
TSEL    7023 4631    ; 4633
LD  0   1            ; 4634
LDC 58               ; 4635
CEQ                  ; 4636
TSEL    7033 4635    ; 4637
LD  0   1            ; 4638
LDC 59               ; 4639
CEQ                  ; 4640
TSEL    7043 4639    ; 4641
LD  0   1            ; 4642
LDC 60               ; 4643
CEQ                  ; 4644
TSEL    7053 4643    ; 4645
LD  0   1            ; 4646
LDC 61               ; 4647
CEQ                  ; 4648
TSEL    7063 4647    ; 4649
LD  0   1            ; 4650
LDC 62               ; 4651
CEQ                  ; 4652
TSEL    7073 4651    ; 4653
LD  0   1            ; 4654
LDC 63               ; 4655
CEQ                  ; 4656
TSEL    7083 4655    ; 4657
LD  0   1            ; 4658
LDC 64               ; 4659
CEQ                  ; 4660
TSEL    7093 4659    ; 4661
LD  0   1            ; 4662
LDC 65               ; 4663
CEQ                  ; 4664
TSEL    7103 4663    ; 4665
LD  0   1            ; 4666
LDC 66               ; 4667
CEQ                  ; 4668
TSEL    7113 4667    ; 4669
LD  0   1            ; 4670
LDC 67               ; 4671
CEQ                  ; 4672
TSEL    7123 4671    ; 4673
LD  0   1            ; 4674
LDC 68               ; 4675
CEQ                  ; 4676
TSEL    7133 4675    ; 4677
LD  0   1            ; 4678
LDC 69               ; 4679
CEQ                  ; 4680
TSEL    7143 4679    ; 4681
LD  0   1            ; 4682
LDC 70               ; 4683
CEQ                  ; 4684
TSEL    7153 4683    ; 4685
LD  0   1            ; 4686
LDC 71               ; 4687
CEQ                  ; 4688
TSEL    7163 4687    ; 4689
LD  0   1            ; 4690
LDC 72               ; 4691
CEQ                  ; 4692
TSEL    7173 4691    ; 4693
LD  0   1            ; 4694
LDC 73               ; 4695
CEQ                  ; 4696
TSEL    7183 4695    ; 4697
LD  0   1            ; 4698
LDC 74               ; 4699
CEQ                  ; 4700
TSEL    7193 4699    ; 4701
LD  0   1            ; 4702
LDC 75               ; 4703
CEQ                  ; 4704
TSEL    7203 4703    ; 4705
LD  0   1            ; 4706
LDC 76               ; 4707
CEQ                  ; 4708
TSEL    7213 4707    ; 4709
LD  0   1            ; 4710
LDC 77               ; 4711
CEQ                  ; 4712
TSEL    7223 4711    ; 4713
LD  0   1            ; 4714
LDC 78               ; 4715
CEQ                  ; 4716
TSEL    7233 4715    ; 4717
LD  0   1            ; 4718
LDC 79               ; 4719
CEQ                  ; 4720
TSEL    7243 4719    ; 4721
LD  0   1            ; 4722
LDC 80               ; 4723
CEQ                  ; 4724
TSEL    7253 4723    ; 4725
LD  0   1            ; 4726
LDC 81               ; 4727
CEQ                  ; 4728
TSEL    7263 4727    ; 4729
LD  0   1            ; 4730
LDC 82               ; 4731
CEQ                  ; 4732
TSEL    7273 4731    ; 4733
LD  0   1            ; 4734
LDC 83               ; 4735
CEQ                  ; 4736
TSEL    7283 4735    ; 4737
LD  0   1            ; 4738
LDC 84               ; 4739
CEQ                  ; 4740
TSEL    7293 4739    ; 4741
LD  0   1            ; 4742
LDC 85               ; 4743
CEQ                  ; 4744
TSEL    7303 4743    ; 4745
LD  0   1            ; 4746
LDC 86               ; 4747
CEQ                  ; 4748
TSEL    7313 4747    ; 4749
LD  0   1            ; 4750
LDC 87               ; 4751
CEQ                  ; 4752
TSEL    7323 4751    ; 4753
LD  0   1            ; 4754
LDC 88               ; 4755
CEQ                  ; 4756
TSEL    7333 4755    ; 4757
LD  0   1            ; 4758
LDC 89               ; 4759
CEQ                  ; 4760
TSEL    7343 4759    ; 4761
LD  0   1            ; 4762
LDC 90               ; 4763
CEQ                  ; 4764
TSEL    7353 4763    ; 4765
LD  0   1            ; 4766
LDC 91               ; 4767
CEQ                  ; 4768
TSEL    7363 4767    ; 4769
LD  0   1            ; 4770
LDC 92               ; 4771
CEQ                  ; 4772
TSEL    7373 4771    ; 4773
LD  0   1            ; 4774
LDC 93               ; 4775
CEQ                  ; 4776
TSEL    7383 4775    ; 4777
LD  0   1            ; 4778
LDC 94               ; 4779
CEQ                  ; 4780
TSEL    7393 4779    ; 4781
LD  0   1            ; 4782
LDC 95               ; 4783
CEQ                  ; 4784
TSEL    7403 4783    ; 4785
LD  0   1            ; 4786
LDC 96               ; 4787
CEQ                  ; 4788
TSEL    7413 4787    ; 4789
LD  0   1            ; 4790
LDC 97               ; 4791
CEQ                  ; 4792
TSEL    7423 4791    ; 4793
LD  0   1            ; 4794
LDC 98               ; 4795
CEQ                  ; 4796
TSEL    7433 4795    ; 4797
LD  0   1            ; 4798
LDC 99               ; 4799
CEQ                  ; 4800
TSEL    7443 4799    ; 4801
LD  0   1            ; 4802
LDC 100              ; 4803
CEQ                  ; 4804
TSEL    7453 4803    ; 4805
LD  0   1            ; 4806
LDC 101              ; 4807
CEQ                  ; 4808
TSEL    7463 4807    ; 4809
LD  0   1            ; 4810
LDC 102              ; 4811
CEQ                  ; 4812
TSEL    7473 4811    ; 4813
LD  0   1            ; 4814
LDC 103              ; 4815
CEQ                  ; 4816
TSEL    7483 4815    ; 4817
LD  0   1            ; 4818
LDC 104              ; 4819
CEQ                  ; 4820
TSEL    7493 4819    ; 4821
LD  0   1            ; 4822
LDC 105              ; 4823
CEQ                  ; 4824
TSEL    7503 4823    ; 4825
LD  0   1            ; 4826
LDC 106              ; 4827
CEQ                  ; 4828
TSEL    7513 4827    ; 4829
LD  0   1            ; 4830
LDC 107              ; 4831
CEQ                  ; 4832
TSEL    7523 4831    ; 4833
LD  0   1            ; 4834
LDC 108              ; 4835
CEQ                  ; 4836
TSEL    7533 4835    ; 4837
LD  0   1            ; 4838
LDC 109              ; 4839
CEQ                  ; 4840
TSEL    7543 4839    ; 4841
LD  0   1            ; 4842
LDC 110              ; 4843
CEQ                  ; 4844
TSEL    7553 4843    ; 4845
LD  0   1            ; 4846
LDC 111              ; 4847
CEQ                  ; 4848
TSEL    7563 4847    ; 4849
LD  0   1            ; 4850
LDC 112              ; 4851
CEQ                  ; 4852
TSEL    7573 4851    ; 4853
LD  0   1            ; 4854
LDC 113              ; 4855
CEQ                  ; 4856
TSEL    7583 4855    ; 4857
LD  0   1            ; 4858
LDC 114              ; 4859
CEQ                  ; 4860
TSEL    7593 4859    ; 4861
LD  0   1            ; 4862
LDC 115              ; 4863
CEQ                  ; 4864
TSEL    7603 4863    ; 4865
LD  0   1            ; 4866
LDC 116              ; 4867
CEQ                  ; 4868
TSEL    7613 4867    ; 4869
LD  0   1            ; 4870
LDC 117              ; 4871
CEQ                  ; 4872
TSEL    7623 4871    ; 4873
LD  0   1            ; 4874
LDC 118              ; 4875
CEQ                  ; 4876
TSEL    7633 4875    ; 4877
LD  0   1            ; 4878
LDC 119              ; 4879
CEQ                  ; 4880
TSEL    7643 4879    ; 4881
LD  0   1            ; 4882
LDC 120              ; 4883
CEQ                  ; 4884
TSEL    7653 4883    ; 4885
LD  0   1            ; 4886
LDC 121              ; 4887
CEQ                  ; 4888
TSEL    7663 4887    ; 4889
LD  0   1            ; 4890
LDC 122              ; 4891
CEQ                  ; 4892
TSEL    7673 4891    ; 4893
LD  0   1            ; 4894
LDC 123              ; 4895
CEQ                  ; 4896
TSEL    7683 4895    ; 4897
LD  0   1            ; 4898
LDC 124              ; 4899
CEQ                  ; 4900
TSEL    7693 4899    ; 4901
LD  0   1            ; 4902
LDC 125              ; 4903
CEQ                  ; 4904
TSEL    7703 4903    ; 4905
LD  0   1            ; 4906
LDC 126              ; 4907
CEQ                  ; 4908
TSEL    7713 4907    ; 4909
LD  0   1            ; 4910
LDC 127              ; 4911
CEQ                  ; 4912
TSEL    7723 4911    ; 4913
LD  0   1            ; 4914
LDC 128              ; 4915
CEQ                  ; 4916
TSEL    7733 4915    ; 4917
LD  0   1            ; 4918
LDC 129              ; 4919
CEQ                  ; 4920
TSEL    7743 4919    ; 4921
LD  0   1            ; 4922
LDC 130              ; 4923
CEQ                  ; 4924
TSEL    7753 4923    ; 4925
LD  0   1            ; 4926
LDC 131              ; 4927
CEQ                  ; 4928
TSEL    7763 4927    ; 4929
LD  0   1            ; 4930
LDC 132              ; 4931
CEQ                  ; 4932
TSEL    7773 4931    ; 4933
LD  0   1            ; 4934
LDC 133              ; 4935
CEQ                  ; 4936
TSEL    7783 4935    ; 4937
LD  0   1            ; 4938
LDC 134              ; 4939
CEQ                  ; 4940
TSEL    7793 4939    ; 4941
LD  0   1            ; 4942
LDC 135              ; 4943
CEQ                  ; 4944
TSEL    7803 4943    ; 4945
LD  0   1            ; 4946
LDC 136              ; 4947
CEQ                  ; 4948
TSEL    7813 4947    ; 4949
LD  0   1            ; 4950
LDC 137              ; 4951
CEQ                  ; 4952
TSEL    7823 4951    ; 4953
LD  0   1            ; 4954
LDC 138              ; 4955
CEQ                  ; 4956
TSEL    7833 4955    ; 4957
LD  0   1            ; 4958
LDC 139              ; 4959
CEQ                  ; 4960
TSEL    7843 4959    ; 4961
LD  0   1            ; 4962
LDC 140              ; 4963
CEQ                  ; 4964
TSEL    7853 4963    ; 4965
LD  0   1            ; 4966
LDC 141              ; 4967
CEQ                  ; 4968
TSEL    7863 4967    ; 4969
LD  0   1            ; 4970
LDC 142              ; 4971
CEQ                  ; 4972
TSEL    7873 4971    ; 4973
LD  0   1            ; 4974
LDC 143              ; 4975
CEQ                  ; 4976
TSEL    7883 4975    ; 4977
LD  0   1            ; 4978
LDC 144              ; 4979
CEQ                  ; 4980
TSEL    7893 4979    ; 4981
LD  0   1            ; 4982
LDC 145              ; 4983
CEQ                  ; 4984
TSEL    7903 4983    ; 4985
LD  0   1            ; 4986
LDC 146              ; 4987
CEQ                  ; 4988
TSEL    7913 4987    ; 4989
LD  0   1            ; 4990
LDC 147              ; 4991
CEQ                  ; 4992
TSEL    7923 4991    ; 4993
LD  0   1            ; 4994
LDC 148              ; 4995
CEQ                  ; 4996
TSEL    7933 4995    ; 4997
LD  0   1            ; 4998
LDC 149              ; 4999
CEQ                  ; 5000
TSEL    7943 4999    ; 5001
LD  0   1            ; 5002
LDC 150              ; 5003
CEQ                  ; 5004
TSEL    7953 5003    ; 5005
LD  0   1            ; 5006
LDC 151              ; 5007
CEQ                  ; 5008
TSEL    7963 5007    ; 5009
LD  0   1            ; 5010
LDC 152              ; 5011
CEQ                  ; 5012
TSEL    7973 5011    ; 5013
LD  0   1            ; 5014
LDC 153              ; 5015
CEQ                  ; 5016
TSEL    7983 5015    ; 5017
LD  0   1            ; 5018
LDC 154              ; 5019
CEQ                  ; 5020
TSEL    7993 5019    ; 5021
LD  0   1            ; 5022
LDC 155              ; 5023
CEQ                  ; 5024
TSEL    8003 5023    ; 5025
LD  0   1            ; 5026
LDC 156              ; 5027
CEQ                  ; 5028
TSEL    8013 5027    ; 5029
LD  0   1            ; 5030
LDC 157              ; 5031
CEQ                  ; 5032
TSEL    8023 5031    ; 5033
LD  0   1            ; 5034
LDC 158              ; 5035
CEQ                  ; 5036
TSEL    8033 5035    ; 5037
LD  0   1            ; 5038
LDC 159              ; 5039
CEQ                  ; 5040
TSEL    8043 5039    ; 5041
LD  0   1            ; 5042
LDC 160              ; 5043
CEQ                  ; 5044
TSEL    8053 5043    ; 5045
LD  0   1            ; 5046
LDC 161              ; 5047
CEQ                  ; 5048
TSEL    8063 5047    ; 5049
LD  0   1            ; 5050
LDC 162              ; 5051
CEQ                  ; 5052
TSEL    8073 5051    ; 5053
LD  0   1            ; 5054
LDC 163              ; 5055
CEQ                  ; 5056
TSEL    8083 5055    ; 5057
LD  0   1            ; 5058
LDC 164              ; 5059
CEQ                  ; 5060
TSEL    8093 5059    ; 5061
LD  0   1            ; 5062
LDC 165              ; 5063
CEQ                  ; 5064
TSEL    8103 5063    ; 5065
LD  0   1            ; 5066
LDC 166              ; 5067
CEQ                  ; 5068
TSEL    8113 5067    ; 5069
LD  0   1            ; 5070
LDC 167              ; 5071
CEQ                  ; 5072
TSEL    8123 5071    ; 5073
LD  0   1            ; 5074
LDC 168              ; 5075
CEQ                  ; 5076
TSEL    8133 5075    ; 5077
LD  0   1            ; 5078
LDC 169              ; 5079
CEQ                  ; 5080
TSEL    8143 5079    ; 5081
LD  0   1            ; 5082
LDC 170              ; 5083
CEQ                  ; 5084
TSEL    8153 5083    ; 5085
LD  0   1            ; 5086
LDC 171              ; 5087
CEQ                  ; 5088
TSEL    8163 5087    ; 5089
LD  0   1            ; 5090
LDC 172              ; 5091
CEQ                  ; 5092
TSEL    8173 5091    ; 5093
LD  0   1            ; 5094
LDC 173              ; 5095
CEQ                  ; 5096
TSEL    8183 5095    ; 5097
LD  0   1            ; 5098
LDC 174              ; 5099
CEQ                  ; 5100
TSEL    8193 5099    ; 5101
LD  0   1            ; 5102
LDC 175              ; 5103
CEQ                  ; 5104
TSEL    8203 5103    ; 5105
LD  0   1            ; 5106
LDC 176              ; 5107
CEQ                  ; 5108
TSEL    8213 5107    ; 5109
LD  0   1            ; 5110
LDC 177              ; 5111
CEQ                  ; 5112
TSEL    8223 5111    ; 5113
LD  0   1            ; 5114
LDC 178              ; 5115
CEQ                  ; 5116
TSEL    8233 5115    ; 5117
LD  0   1            ; 5118
LDC 179              ; 5119
CEQ                  ; 5120
TSEL    8243 5119    ; 5121
LD  0   1            ; 5122
LDC 180              ; 5123
CEQ                  ; 5124
TSEL    8253 5123    ; 5125
LD  0   1            ; 5126
LDC 181              ; 5127
CEQ                  ; 5128
TSEL    8263 5127    ; 5129
LD  0   1            ; 5130
LDC 182              ; 5131
CEQ                  ; 5132
TSEL    8273 5131    ; 5133
LD  0   1            ; 5134
LDC 183              ; 5135
CEQ                  ; 5136
TSEL    8283 5135    ; 5137
LD  0   1            ; 5138
LDC 184              ; 5139
CEQ                  ; 5140
TSEL    8293 5139    ; 5141
LD  0   1            ; 5142
LDC 185              ; 5143
CEQ                  ; 5144
TSEL    8303 5143    ; 5145
LD  0   1            ; 5146
LDC 186              ; 5147
CEQ                  ; 5148
TSEL    8313 5147    ; 5149
LD  0   1            ; 5150
LDC 187              ; 5151
CEQ                  ; 5152
TSEL    8323 5151    ; 5153
LD  0   1            ; 5154
LDC 188              ; 5155
CEQ                  ; 5156
TSEL    8333 5155    ; 5157
LD  0   1            ; 5158
LDC 189              ; 5159
CEQ                  ; 5160
TSEL    8343 5159    ; 5161
LD  0   1            ; 5162
LDC 190              ; 5163
CEQ                  ; 5164
TSEL    8353 5163    ; 5165
LD  0   1            ; 5166
LDC 191              ; 5167
CEQ                  ; 5168
TSEL    8363 5167    ; 5169
LD  0   1            ; 5170
LDC 192              ; 5171
CEQ                  ; 5172
TSEL    8373 5171    ; 5173
LD  0   1            ; 5174
LDC 193              ; 5175
CEQ                  ; 5176
TSEL    8383 5175    ; 5177
LD  0   1            ; 5178
LDC 194              ; 5179
CEQ                  ; 5180
TSEL    8393 5179    ; 5181
LD  0   1            ; 5182
LDC 195              ; 5183
CEQ                  ; 5184
TSEL    8403 5183    ; 5185
LD  0   1            ; 5186
LDC 196              ; 5187
CEQ                  ; 5188
TSEL    8413 5187    ; 5189
LD  0   1            ; 5190
LDC 197              ; 5191
CEQ                  ; 5192
TSEL    8423 5191    ; 5193
LD  0   1            ; 5194
LDC 198              ; 5195
CEQ                  ; 5196
TSEL    8433 5195    ; 5197
LD  0   1            ; 5198
LDC 199              ; 5199
CEQ                  ; 5200
TSEL    8443 5199    ; 5201
LD  0   1            ; 5202
LDC 200              ; 5203
CEQ                  ; 5204
TSEL    8453 5203    ; 5205
LD  0   1            ; 5206
LDC 201              ; 5207
CEQ                  ; 5208
TSEL    8463 5207    ; 5209
LD  0   1            ; 5210
LDC 202              ; 5211
CEQ                  ; 5212
TSEL    8473 5211    ; 5213
LD  0   1            ; 5214
LDC 203              ; 5215
CEQ                  ; 5216
TSEL    8483 5215    ; 5217
LD  0   1            ; 5218
LDC 204              ; 5219
CEQ                  ; 5220
TSEL    8493 5219    ; 5221
LD  0   1            ; 5222
LDC 205              ; 5223
CEQ                  ; 5224
TSEL    8503 5223    ; 5225
LD  0   1            ; 5226
LDC 206              ; 5227
CEQ                  ; 5228
TSEL    8513 5227    ; 5229
LD  0   1            ; 5230
LDC 207              ; 5231
CEQ                  ; 5232
TSEL    8523 5231    ; 5233
LD  0   1            ; 5234
LDC 208              ; 5235
CEQ                  ; 5236
TSEL    8533 5235    ; 5237
LD  0   1            ; 5238
LDC 209              ; 5239
CEQ                  ; 5240
TSEL    8543 5239    ; 5241
LD  0   1            ; 5242
LDC 210              ; 5243
CEQ                  ; 5244
TSEL    8553 5243    ; 5245
LD  0   1            ; 5246
LDC 211              ; 5247
CEQ                  ; 5248
TSEL    8563 5247    ; 5249
LD  0   1            ; 5250
LDC 212              ; 5251
CEQ                  ; 5252
TSEL    8573 5251    ; 5253
LD  0   1            ; 5254
LDC 213              ; 5255
CEQ                  ; 5256
TSEL    8583 5255    ; 5257
LD  0   1            ; 5258
LDC 214              ; 5259
CEQ                  ; 5260
TSEL    8593 5259    ; 5261
LD  0   1            ; 5262
LDC 215              ; 5263
CEQ                  ; 5264
TSEL    8603 5263    ; 5265
LD  0   1            ; 5266
LDC 216              ; 5267
CEQ                  ; 5268
TSEL    8613 5267    ; 5269
LD  0   1            ; 5270
LDC 217              ; 5271
CEQ                  ; 5272
TSEL    8623 5271    ; 5273
LD  0   1            ; 5274
LDC 218              ; 5275
CEQ                  ; 5276
TSEL    8633 5275    ; 5277
LD  0   1            ; 5278
LDC 219              ; 5279
CEQ                  ; 5280
TSEL    8643 5279    ; 5281
LD  0   1            ; 5282
LDC 220              ; 5283
CEQ                  ; 5284
TSEL    8653 5283    ; 5285
LD  0   1            ; 5286
LDC 221              ; 5287
CEQ                  ; 5288
TSEL    8663 5287    ; 5289
LD  0   1            ; 5290
LDC 222              ; 5291
CEQ                  ; 5292
TSEL    8673 5291    ; 5293
LD  0   1            ; 5294
LDC 223              ; 5295
CEQ                  ; 5296
TSEL    8683 5295    ; 5297
LD  0   1            ; 5298
LDC 224              ; 5299
CEQ                  ; 5300
TSEL    8693 5299    ; 5301
LD  0   1            ; 5302
LDC 225              ; 5303
CEQ                  ; 5304
TSEL    8703 5303    ; 5305
LD  0   1            ; 5306
LDC 226              ; 5307
CEQ                  ; 5308
TSEL    8713 5307    ; 5309
LD  0   1            ; 5310
LDC 227              ; 5311
CEQ                  ; 5312
TSEL    8723 5311    ; 5313
LD  0   1            ; 5314
LDC 228              ; 5315
CEQ                  ; 5316
TSEL    8733 5315    ; 5317
LD  0   1            ; 5318
LDC 229              ; 5319
CEQ                  ; 5320
TSEL    8743 5319    ; 5321
LD  0   1            ; 5322
LDC 230              ; 5323
CEQ                  ; 5324
TSEL    8753 5323    ; 5325
LD  0   1            ; 5326
LDC 231              ; 5327
CEQ                  ; 5328
TSEL    8763 5327    ; 5329
LD  0   1            ; 5330
LDC 232              ; 5331
CEQ                  ; 5332
TSEL    8773 5331    ; 5333
LD  0   1            ; 5334
LDC 233              ; 5335
CEQ                  ; 5336
TSEL    8783 5335    ; 5337
LD  0   1            ; 5338
LDC 234              ; 5339
CEQ                  ; 5340
TSEL    8793 5339    ; 5341
LD  0   1            ; 5342
LDC 235              ; 5343
CEQ                  ; 5344
TSEL    8803 5343    ; 5345
LD  0   1            ; 5346
LDC 236              ; 5347
CEQ                  ; 5348
TSEL    8813 5347    ; 5349
LD  0   1            ; 5350
LDC 237              ; 5351
CEQ                  ; 5352
TSEL    8823 5351    ; 5353
LD  0   1            ; 5354
LDC 238              ; 5355
CEQ                  ; 5356
TSEL    8833 5355    ; 5357
LD  0   1            ; 5358
LDC 239              ; 5359
CEQ                  ; 5360
TSEL    8843 5359    ; 5361
LD  0   1            ; 5362
LDC 240              ; 5363
CEQ                  ; 5364
TSEL    8853 5363    ; 5365
LD  0   1            ; 5366
LDC 241              ; 5367
CEQ                  ; 5368
TSEL    8863 5367    ; 5369
LD  0   1            ; 5370
LDC 242              ; 5371
CEQ                  ; 5372
TSEL    8873 5371    ; 5373
LD  0   1            ; 5374
LDC 243              ; 5375
CEQ                  ; 5376
TSEL    8883 5375    ; 5377
LD  0   1            ; 5378
LDC 244              ; 5379
CEQ                  ; 5380
TSEL    8893 5379    ; 5381
LD  0   1            ; 5382
LDC 245              ; 5383
CEQ                  ; 5384
TSEL    8903 5383    ; 5385
LD  0   1            ; 5386
LDC 246              ; 5387
CEQ                  ; 5388
TSEL    8913 5387    ; 5389
LD  0   1            ; 5390
LDC 247              ; 5391
CEQ                  ; 5392
TSEL    8923 5391    ; 5393
LD  0   1            ; 5394
LDC 248              ; 5395
CEQ                  ; 5396
TSEL    8933 5395    ; 5397
LD  0   1            ; 5398
LDC 249              ; 5399
CEQ                  ; 5400
TSEL    8943 5399    ; 5401
LD  0   1            ; 5402
LDC 250              ; 5403
CEQ                  ; 5404
TSEL    8953 5403    ; 5405
LD  0   1            ; 5406
LDC 251              ; 5407
CEQ                  ; 5408
TSEL    8963 5407    ; 5409
LD  0   1            ; 5410
LDC 252              ; 5411
CEQ                  ; 5412
TSEL    8973 5411    ; 5413
LD  0   1            ; 5414
LDC 253              ; 5415
CEQ                  ; 5416
TSEL    8983 5415    ; 5417
LD  0   1            ; 5418
LDC 254              ; 5419
CEQ                  ; 5420
TSEL    8993 5419    ; 5421
LD  0   1            ; 5422
LDC 255              ; 5423
CEQ                  ; 5424
TSEL    9003 5423    ; 5425
LDC  0               ; 5426
RTN                  ; 5427
LD  0   1            ; 5428
LDC 0                ; 5429
CEQ                  ; 5430
TSEL    6459 5429    ; 5431
LD  0   1            ; 5432
LDC 1                ; 5433
CEQ                  ; 5434
TSEL    6469 5433    ; 5435
LD  0   1            ; 5436
LDC 2                ; 5437
CEQ                  ; 5438
TSEL    6479 5437    ; 5439
LD  0   1            ; 5440
LDC 3                ; 5441
CEQ                  ; 5442
TSEL    6489 5441    ; 5443
LD  0   1            ; 5444
LDC 4                ; 5445
CEQ                  ; 5446
TSEL    6499 5445    ; 5447
LD  0   1            ; 5448
LDC 5                ; 5449
CEQ                  ; 5450
TSEL    6509 5449    ; 5451
LD  0   1            ; 5452
LDC 6                ; 5453
CEQ                  ; 5454
TSEL    6519 5453    ; 5455
LD  0   1            ; 5456
LDC 7                ; 5457
CEQ                  ; 5458
TSEL    6529 5457    ; 5459
LD  0   1            ; 5460
LDC 8                ; 5461
CEQ                  ; 5462
TSEL    6539 5461    ; 5463
LD  0   1            ; 5464
LDC 9                ; 5465
CEQ                  ; 5466
TSEL    6549 5465    ; 5467
LD  0   1            ; 5468
LDC 10               ; 5469
CEQ                  ; 5470
TSEL    6559 5469    ; 5471
LD  0   1            ; 5472
LDC 11               ; 5473
CEQ                  ; 5474
TSEL    6569 5473    ; 5475
LD  0   1            ; 5476
LDC 12               ; 5477
CEQ                  ; 5478
TSEL    6579 5477    ; 5479
LD  0   1            ; 5480
LDC 13               ; 5481
CEQ                  ; 5482
TSEL    6589 5481    ; 5483
LD  0   1            ; 5484
LDC 14               ; 5485
CEQ                  ; 5486
TSEL    6599 5485    ; 5487
LD  0   1            ; 5488
LDC 15               ; 5489
CEQ                  ; 5490
TSEL    6609 5489    ; 5491
LD  0   1            ; 5492
LDC 16               ; 5493
CEQ                  ; 5494
TSEL    6619 5493    ; 5495
LD  0   1            ; 5496
LDC 17               ; 5497
CEQ                  ; 5498
TSEL    6629 5497    ; 5499
LD  0   1            ; 5500
LDC 18               ; 5501
CEQ                  ; 5502
TSEL    6639 5501    ; 5503
LD  0   1            ; 5504
LDC 19               ; 5505
CEQ                  ; 5506
TSEL    6649 5505    ; 5507
LD  0   1            ; 5508
LDC 20               ; 5509
CEQ                  ; 5510
TSEL    6659 5509    ; 5511
LD  0   1            ; 5512
LDC 21               ; 5513
CEQ                  ; 5514
TSEL    6669 5513    ; 5515
LD  0   1            ; 5516
LDC 22               ; 5517
CEQ                  ; 5518
TSEL    6679 5517    ; 5519
LD  0   1            ; 5520
LDC 23               ; 5521
CEQ                  ; 5522
TSEL    6689 5521    ; 5523
LD  0   1            ; 5524
LDC 24               ; 5525
CEQ                  ; 5526
TSEL    6699 5525    ; 5527
LD  0   1            ; 5528
LDC 25               ; 5529
CEQ                  ; 5530
TSEL    6709 5529    ; 5531
LD  0   1            ; 5532
LDC 26               ; 5533
CEQ                  ; 5534
TSEL    6719 5533    ; 5535
LD  0   1            ; 5536
LDC 27               ; 5537
CEQ                  ; 5538
TSEL    6729 5537    ; 5539
LD  0   1            ; 5540
LDC 28               ; 5541
CEQ                  ; 5542
TSEL    6739 5541    ; 5543
LD  0   1            ; 5544
LDC 29               ; 5545
CEQ                  ; 5546
TSEL    6749 5545    ; 5547
LD  0   1            ; 5548
LDC 30               ; 5549
CEQ                  ; 5550
TSEL    6759 5549    ; 5551
LD  0   1            ; 5552
LDC 31               ; 5553
CEQ                  ; 5554
TSEL    6769 5553    ; 5555
LD  0   1            ; 5556
LDC 32               ; 5557
CEQ                  ; 5558
TSEL    6779 5557    ; 5559
LD  0   1            ; 5560
LDC 33               ; 5561
CEQ                  ; 5562
TSEL    6789 5561    ; 5563
LD  0   1            ; 5564
LDC 34               ; 5565
CEQ                  ; 5566
TSEL    6799 5565    ; 5567
LD  0   1            ; 5568
LDC 35               ; 5569
CEQ                  ; 5570
TSEL    6809 5569    ; 5571
LD  0   1            ; 5572
LDC 36               ; 5573
CEQ                  ; 5574
TSEL    6819 5573    ; 5575
LD  0   1            ; 5576
LDC 37               ; 5577
CEQ                  ; 5578
TSEL    6829 5577    ; 5579
LD  0   1            ; 5580
LDC 38               ; 5581
CEQ                  ; 5582
TSEL    6839 5581    ; 5583
LD  0   1            ; 5584
LDC 39               ; 5585
CEQ                  ; 5586
TSEL    6849 5585    ; 5587
LD  0   1            ; 5588
LDC 40               ; 5589
CEQ                  ; 5590
TSEL    6859 5589    ; 5591
LD  0   1            ; 5592
LDC 41               ; 5593
CEQ                  ; 5594
TSEL    6869 5593    ; 5595
LD  0   1            ; 5596
LDC 42               ; 5597
CEQ                  ; 5598
TSEL    6879 5597    ; 5599
LD  0   1            ; 5600
LDC 43               ; 5601
CEQ                  ; 5602
TSEL    6889 5601    ; 5603
LD  0   1            ; 5604
LDC 44               ; 5605
CEQ                  ; 5606
TSEL    6899 5605    ; 5607
LD  0   1            ; 5608
LDC 45               ; 5609
CEQ                  ; 5610
TSEL    6909 5609    ; 5611
LD  0   1            ; 5612
LDC 46               ; 5613
CEQ                  ; 5614
TSEL    6919 5613    ; 5615
LD  0   1            ; 5616
LDC 47               ; 5617
CEQ                  ; 5618
TSEL    6929 5617    ; 5619
LD  0   1            ; 5620
LDC 48               ; 5621
CEQ                  ; 5622
TSEL    6939 5621    ; 5623
LD  0   1            ; 5624
LDC 49               ; 5625
CEQ                  ; 5626
TSEL    6949 5625    ; 5627
LD  0   1            ; 5628
LDC 50               ; 5629
CEQ                  ; 5630
TSEL    6959 5629    ; 5631
LD  0   1            ; 5632
LDC 51               ; 5633
CEQ                  ; 5634
TSEL    6969 5633    ; 5635
LD  0   1            ; 5636
LDC 52               ; 5637
CEQ                  ; 5638
TSEL    6979 5637    ; 5639
LD  0   1            ; 5640
LDC 53               ; 5641
CEQ                  ; 5642
TSEL    6989 5641    ; 5643
LD  0   1            ; 5644
LDC 54               ; 5645
CEQ                  ; 5646
TSEL    6999 5645    ; 5647
LD  0   1            ; 5648
LDC 55               ; 5649
CEQ                  ; 5650
TSEL    7009 5649    ; 5651
LD  0   1            ; 5652
LDC 56               ; 5653
CEQ                  ; 5654
TSEL    7019 5653    ; 5655
LD  0   1            ; 5656
LDC 57               ; 5657
CEQ                  ; 5658
TSEL    7029 5657    ; 5659
LD  0   1            ; 5660
LDC 58               ; 5661
CEQ                  ; 5662
TSEL    7039 5661    ; 5663
LD  0   1            ; 5664
LDC 59               ; 5665
CEQ                  ; 5666
TSEL    7049 5665    ; 5667
LD  0   1            ; 5668
LDC 60               ; 5669
CEQ                  ; 5670
TSEL    7059 5669    ; 5671
LD  0   1            ; 5672
LDC 61               ; 5673
CEQ                  ; 5674
TSEL    7069 5673    ; 5675
LD  0   1            ; 5676
LDC 62               ; 5677
CEQ                  ; 5678
TSEL    7079 5677    ; 5679
LD  0   1            ; 5680
LDC 63               ; 5681
CEQ                  ; 5682
TSEL    7089 5681    ; 5683
LD  0   1            ; 5684
LDC 64               ; 5685
CEQ                  ; 5686
TSEL    7099 5685    ; 5687
LD  0   1            ; 5688
LDC 65               ; 5689
CEQ                  ; 5690
TSEL    7109 5689    ; 5691
LD  0   1            ; 5692
LDC 66               ; 5693
CEQ                  ; 5694
TSEL    7119 5693    ; 5695
LD  0   1            ; 5696
LDC 67               ; 5697
CEQ                  ; 5698
TSEL    7129 5697    ; 5699
LD  0   1            ; 5700
LDC 68               ; 5701
CEQ                  ; 5702
TSEL    7139 5701    ; 5703
LD  0   1            ; 5704
LDC 69               ; 5705
CEQ                  ; 5706
TSEL    7149 5705    ; 5707
LD  0   1            ; 5708
LDC 70               ; 5709
CEQ                  ; 5710
TSEL    7159 5709    ; 5711
LD  0   1            ; 5712
LDC 71               ; 5713
CEQ                  ; 5714
TSEL    7169 5713    ; 5715
LD  0   1            ; 5716
LDC 72               ; 5717
CEQ                  ; 5718
TSEL    7179 5717    ; 5719
LD  0   1            ; 5720
LDC 73               ; 5721
CEQ                  ; 5722
TSEL    7189 5721    ; 5723
LD  0   1            ; 5724
LDC 74               ; 5725
CEQ                  ; 5726
TSEL    7199 5725    ; 5727
LD  0   1            ; 5728
LDC 75               ; 5729
CEQ                  ; 5730
TSEL    7209 5729    ; 5731
LD  0   1            ; 5732
LDC 76               ; 5733
CEQ                  ; 5734
TSEL    7219 5733    ; 5735
LD  0   1            ; 5736
LDC 77               ; 5737
CEQ                  ; 5738
TSEL    7229 5737    ; 5739
LD  0   1            ; 5740
LDC 78               ; 5741
CEQ                  ; 5742
TSEL    7239 5741    ; 5743
LD  0   1            ; 5744
LDC 79               ; 5745
CEQ                  ; 5746
TSEL    7249 5745    ; 5747
LD  0   1            ; 5748
LDC 80               ; 5749
CEQ                  ; 5750
TSEL    7259 5749    ; 5751
LD  0   1            ; 5752
LDC 81               ; 5753
CEQ                  ; 5754
TSEL    7269 5753    ; 5755
LD  0   1            ; 5756
LDC 82               ; 5757
CEQ                  ; 5758
TSEL    7279 5757    ; 5759
LD  0   1            ; 5760
LDC 83               ; 5761
CEQ                  ; 5762
TSEL    7289 5761    ; 5763
LD  0   1            ; 5764
LDC 84               ; 5765
CEQ                  ; 5766
TSEL    7299 5765    ; 5767
LD  0   1            ; 5768
LDC 85               ; 5769
CEQ                  ; 5770
TSEL    7309 5769    ; 5771
LD  0   1            ; 5772
LDC 86               ; 5773
CEQ                  ; 5774
TSEL    7319 5773    ; 5775
LD  0   1            ; 5776
LDC 87               ; 5777
CEQ                  ; 5778
TSEL    7329 5777    ; 5779
LD  0   1            ; 5780
LDC 88               ; 5781
CEQ                  ; 5782
TSEL    7339 5781    ; 5783
LD  0   1            ; 5784
LDC 89               ; 5785
CEQ                  ; 5786
TSEL    7349 5785    ; 5787
LD  0   1            ; 5788
LDC 90               ; 5789
CEQ                  ; 5790
TSEL    7359 5789    ; 5791
LD  0   1            ; 5792
LDC 91               ; 5793
CEQ                  ; 5794
TSEL    7369 5793    ; 5795
LD  0   1            ; 5796
LDC 92               ; 5797
CEQ                  ; 5798
TSEL    7379 5797    ; 5799
LD  0   1            ; 5800
LDC 93               ; 5801
CEQ                  ; 5802
TSEL    7389 5801    ; 5803
LD  0   1            ; 5804
LDC 94               ; 5805
CEQ                  ; 5806
TSEL    7399 5805    ; 5807
LD  0   1            ; 5808
LDC 95               ; 5809
CEQ                  ; 5810
TSEL    7409 5809    ; 5811
LD  0   1            ; 5812
LDC 96               ; 5813
CEQ                  ; 5814
TSEL    7419 5813    ; 5815
LD  0   1            ; 5816
LDC 97               ; 5817
CEQ                  ; 5818
TSEL    7429 5817    ; 5819
LD  0   1            ; 5820
LDC 98               ; 5821
CEQ                  ; 5822
TSEL    7439 5821    ; 5823
LD  0   1            ; 5824
LDC 99               ; 5825
CEQ                  ; 5826
TSEL    7449 5825    ; 5827
LD  0   1            ; 5828
LDC 100              ; 5829
CEQ                  ; 5830
TSEL    7459 5829    ; 5831
LD  0   1            ; 5832
LDC 101              ; 5833
CEQ                  ; 5834
TSEL    7469 5833    ; 5835
LD  0   1            ; 5836
LDC 102              ; 5837
CEQ                  ; 5838
TSEL    7479 5837    ; 5839
LD  0   1            ; 5840
LDC 103              ; 5841
CEQ                  ; 5842
TSEL    7489 5841    ; 5843
LD  0   1            ; 5844
LDC 104              ; 5845
CEQ                  ; 5846
TSEL    7499 5845    ; 5847
LD  0   1            ; 5848
LDC 105              ; 5849
CEQ                  ; 5850
TSEL    7509 5849    ; 5851
LD  0   1            ; 5852
LDC 106              ; 5853
CEQ                  ; 5854
TSEL    7519 5853    ; 5855
LD  0   1            ; 5856
LDC 107              ; 5857
CEQ                  ; 5858
TSEL    7529 5857    ; 5859
LD  0   1            ; 5860
LDC 108              ; 5861
CEQ                  ; 5862
TSEL    7539 5861    ; 5863
LD  0   1            ; 5864
LDC 109              ; 5865
CEQ                  ; 5866
TSEL    7549 5865    ; 5867
LD  0   1            ; 5868
LDC 110              ; 5869
CEQ                  ; 5870
TSEL    7559 5869    ; 5871
LD  0   1            ; 5872
LDC 111              ; 5873
CEQ                  ; 5874
TSEL    7569 5873    ; 5875
LD  0   1            ; 5876
LDC 112              ; 5877
CEQ                  ; 5878
TSEL    7579 5877    ; 5879
LD  0   1            ; 5880
LDC 113              ; 5881
CEQ                  ; 5882
TSEL    7589 5881    ; 5883
LD  0   1            ; 5884
LDC 114              ; 5885
CEQ                  ; 5886
TSEL    7599 5885    ; 5887
LD  0   1            ; 5888
LDC 115              ; 5889
CEQ                  ; 5890
TSEL    7609 5889    ; 5891
LD  0   1            ; 5892
LDC 116              ; 5893
CEQ                  ; 5894
TSEL    7619 5893    ; 5895
LD  0   1            ; 5896
LDC 117              ; 5897
CEQ                  ; 5898
TSEL    7629 5897    ; 5899
LD  0   1            ; 5900
LDC 118              ; 5901
CEQ                  ; 5902
TSEL    7639 5901    ; 5903
LD  0   1            ; 5904
LDC 119              ; 5905
CEQ                  ; 5906
TSEL    7649 5905    ; 5907
LD  0   1            ; 5908
LDC 120              ; 5909
CEQ                  ; 5910
TSEL    7659 5909    ; 5911
LD  0   1            ; 5912
LDC 121              ; 5913
CEQ                  ; 5914
TSEL    7669 5913    ; 5915
LD  0   1            ; 5916
LDC 122              ; 5917
CEQ                  ; 5918
TSEL    7679 5917    ; 5919
LD  0   1            ; 5920
LDC 123              ; 5921
CEQ                  ; 5922
TSEL    7689 5921    ; 5923
LD  0   1            ; 5924
LDC 124              ; 5925
CEQ                  ; 5926
TSEL    7699 5925    ; 5927
LD  0   1            ; 5928
LDC 125              ; 5929
CEQ                  ; 5930
TSEL    7709 5929    ; 5931
LD  0   1            ; 5932
LDC 126              ; 5933
CEQ                  ; 5934
TSEL    7719 5933    ; 5935
LD  0   1            ; 5936
LDC 127              ; 5937
CEQ                  ; 5938
TSEL    7729 5937    ; 5939
LD  0   1            ; 5940
LDC 128              ; 5941
CEQ                  ; 5942
TSEL    7739 5941    ; 5943
LD  0   1            ; 5944
LDC 129              ; 5945
CEQ                  ; 5946
TSEL    7749 5945    ; 5947
LD  0   1            ; 5948
LDC 130              ; 5949
CEQ                  ; 5950
TSEL    7759 5949    ; 5951
LD  0   1            ; 5952
LDC 131              ; 5953
CEQ                  ; 5954
TSEL    7769 5953    ; 5955
LD  0   1            ; 5956
LDC 132              ; 5957
CEQ                  ; 5958
TSEL    7779 5957    ; 5959
LD  0   1            ; 5960
LDC 133              ; 5961
CEQ                  ; 5962
TSEL    7789 5961    ; 5963
LD  0   1            ; 5964
LDC 134              ; 5965
CEQ                  ; 5966
TSEL    7799 5965    ; 5967
LD  0   1            ; 5968
LDC 135              ; 5969
CEQ                  ; 5970
TSEL    7809 5969    ; 5971
LD  0   1            ; 5972
LDC 136              ; 5973
CEQ                  ; 5974
TSEL    7819 5973    ; 5975
LD  0   1            ; 5976
LDC 137              ; 5977
CEQ                  ; 5978
TSEL    7829 5977    ; 5979
LD  0   1            ; 5980
LDC 138              ; 5981
CEQ                  ; 5982
TSEL    7839 5981    ; 5983
LD  0   1            ; 5984
LDC 139              ; 5985
CEQ                  ; 5986
TSEL    7849 5985    ; 5987
LD  0   1            ; 5988
LDC 140              ; 5989
CEQ                  ; 5990
TSEL    7859 5989    ; 5991
LD  0   1            ; 5992
LDC 141              ; 5993
CEQ                  ; 5994
TSEL    7869 5993    ; 5995
LD  0   1            ; 5996
LDC 142              ; 5997
CEQ                  ; 5998
TSEL    7879 5997    ; 5999
LD  0   1            ; 6000
LDC 143              ; 6001
CEQ                  ; 6002
TSEL    7889 6001    ; 6003
LD  0   1            ; 6004
LDC 144              ; 6005
CEQ                  ; 6006
TSEL    7899 6005    ; 6007
LD  0   1            ; 6008
LDC 145              ; 6009
CEQ                  ; 6010
TSEL    7909 6009    ; 6011
LD  0   1            ; 6012
LDC 146              ; 6013
CEQ                  ; 6014
TSEL    7919 6013    ; 6015
LD  0   1            ; 6016
LDC 147              ; 6017
CEQ                  ; 6018
TSEL    7929 6017    ; 6019
LD  0   1            ; 6020
LDC 148              ; 6021
CEQ                  ; 6022
TSEL    7939 6021    ; 6023
LD  0   1            ; 6024
LDC 149              ; 6025
CEQ                  ; 6026
TSEL    7949 6025    ; 6027
LD  0   1            ; 6028
LDC 150              ; 6029
CEQ                  ; 6030
TSEL    7959 6029    ; 6031
LD  0   1            ; 6032
LDC 151              ; 6033
CEQ                  ; 6034
TSEL    7969 6033    ; 6035
LD  0   1            ; 6036
LDC 152              ; 6037
CEQ                  ; 6038
TSEL    7979 6037    ; 6039
LD  0   1            ; 6040
LDC 153              ; 6041
CEQ                  ; 6042
TSEL    7989 6041    ; 6043
LD  0   1            ; 6044
LDC 154              ; 6045
CEQ                  ; 6046
TSEL    7999 6045    ; 6047
LD  0   1            ; 6048
LDC 155              ; 6049
CEQ                  ; 6050
TSEL    8009 6049    ; 6051
LD  0   1            ; 6052
LDC 156              ; 6053
CEQ                  ; 6054
TSEL    8019 6053    ; 6055
LD  0   1            ; 6056
LDC 157              ; 6057
CEQ                  ; 6058
TSEL    8029 6057    ; 6059
LD  0   1            ; 6060
LDC 158              ; 6061
CEQ                  ; 6062
TSEL    8039 6061    ; 6063
LD  0   1            ; 6064
LDC 159              ; 6065
CEQ                  ; 6066
TSEL    8049 6065    ; 6067
LD  0   1            ; 6068
LDC 160              ; 6069
CEQ                  ; 6070
TSEL    8059 6069    ; 6071
LD  0   1            ; 6072
LDC 161              ; 6073
CEQ                  ; 6074
TSEL    8069 6073    ; 6075
LD  0   1            ; 6076
LDC 162              ; 6077
CEQ                  ; 6078
TSEL    8079 6077    ; 6079
LD  0   1            ; 6080
LDC 163              ; 6081
CEQ                  ; 6082
TSEL    8089 6081    ; 6083
LD  0   1            ; 6084
LDC 164              ; 6085
CEQ                  ; 6086
TSEL    8099 6085    ; 6087
LD  0   1            ; 6088
LDC 165              ; 6089
CEQ                  ; 6090
TSEL    8109 6089    ; 6091
LD  0   1            ; 6092
LDC 166              ; 6093
CEQ                  ; 6094
TSEL    8119 6093    ; 6095
LD  0   1            ; 6096
LDC 167              ; 6097
CEQ                  ; 6098
TSEL    8129 6097    ; 6099
LD  0   1            ; 6100
LDC 168              ; 6101
CEQ                  ; 6102
TSEL    8139 6101    ; 6103
LD  0   1            ; 6104
LDC 169              ; 6105
CEQ                  ; 6106
TSEL    8149 6105    ; 6107
LD  0   1            ; 6108
LDC 170              ; 6109
CEQ                  ; 6110
TSEL    8159 6109    ; 6111
LD  0   1            ; 6112
LDC 171              ; 6113
CEQ                  ; 6114
TSEL    8169 6113    ; 6115
LD  0   1            ; 6116
LDC 172              ; 6117
CEQ                  ; 6118
TSEL    8179 6117    ; 6119
LD  0   1            ; 6120
LDC 173              ; 6121
CEQ                  ; 6122
TSEL    8189 6121    ; 6123
LD  0   1            ; 6124
LDC 174              ; 6125
CEQ                  ; 6126
TSEL    8199 6125    ; 6127
LD  0   1            ; 6128
LDC 175              ; 6129
CEQ                  ; 6130
TSEL    8209 6129    ; 6131
LD  0   1            ; 6132
LDC 176              ; 6133
CEQ                  ; 6134
TSEL    8219 6133    ; 6135
LD  0   1            ; 6136
LDC 177              ; 6137
CEQ                  ; 6138
TSEL    8229 6137    ; 6139
LD  0   1            ; 6140
LDC 178              ; 6141
CEQ                  ; 6142
TSEL    8239 6141    ; 6143
LD  0   1            ; 6144
LDC 179              ; 6145
CEQ                  ; 6146
TSEL    8249 6145    ; 6147
LD  0   1            ; 6148
LDC 180              ; 6149
CEQ                  ; 6150
TSEL    8259 6149    ; 6151
LD  0   1            ; 6152
LDC 181              ; 6153
CEQ                  ; 6154
TSEL    8269 6153    ; 6155
LD  0   1            ; 6156
LDC 182              ; 6157
CEQ                  ; 6158
TSEL    8279 6157    ; 6159
LD  0   1            ; 6160
LDC 183              ; 6161
CEQ                  ; 6162
TSEL    8289 6161    ; 6163
LD  0   1            ; 6164
LDC 184              ; 6165
CEQ                  ; 6166
TSEL    8299 6165    ; 6167
LD  0   1            ; 6168
LDC 185              ; 6169
CEQ                  ; 6170
TSEL    8309 6169    ; 6171
LD  0   1            ; 6172
LDC 186              ; 6173
CEQ                  ; 6174
TSEL    8319 6173    ; 6175
LD  0   1            ; 6176
LDC 187              ; 6177
CEQ                  ; 6178
TSEL    8329 6177    ; 6179
LD  0   1            ; 6180
LDC 188              ; 6181
CEQ                  ; 6182
TSEL    8339 6181    ; 6183
LD  0   1            ; 6184
LDC 189              ; 6185
CEQ                  ; 6186
TSEL    8349 6185    ; 6187
LD  0   1            ; 6188
LDC 190              ; 6189
CEQ                  ; 6190
TSEL    8359 6189    ; 6191
LD  0   1            ; 6192
LDC 191              ; 6193
CEQ                  ; 6194
TSEL    8369 6193    ; 6195
LD  0   1            ; 6196
LDC 192              ; 6197
CEQ                  ; 6198
TSEL    8379 6197    ; 6199
LD  0   1            ; 6200
LDC 193              ; 6201
CEQ                  ; 6202
TSEL    8389 6201    ; 6203
LD  0   1            ; 6204
LDC 194              ; 6205
CEQ                  ; 6206
TSEL    8399 6205    ; 6207
LD  0   1            ; 6208
LDC 195              ; 6209
CEQ                  ; 6210
TSEL    8409 6209    ; 6211
LD  0   1            ; 6212
LDC 196              ; 6213
CEQ                  ; 6214
TSEL    8419 6213    ; 6215
LD  0   1            ; 6216
LDC 197              ; 6217
CEQ                  ; 6218
TSEL    8429 6217    ; 6219
LD  0   1            ; 6220
LDC 198              ; 6221
CEQ                  ; 6222
TSEL    8439 6221    ; 6223
LD  0   1            ; 6224
LDC 199              ; 6225
CEQ                  ; 6226
TSEL    8449 6225    ; 6227
LD  0   1            ; 6228
LDC 200              ; 6229
CEQ                  ; 6230
TSEL    8459 6229    ; 6231
LD  0   1            ; 6232
LDC 201              ; 6233
CEQ                  ; 6234
TSEL    8469 6233    ; 6235
LD  0   1            ; 6236
LDC 202              ; 6237
CEQ                  ; 6238
TSEL    8479 6237    ; 6239
LD  0   1            ; 6240
LDC 203              ; 6241
CEQ                  ; 6242
TSEL    8489 6241    ; 6243
LD  0   1            ; 6244
LDC 204              ; 6245
CEQ                  ; 6246
TSEL    8499 6245    ; 6247
LD  0   1            ; 6248
LDC 205              ; 6249
CEQ                  ; 6250
TSEL    8509 6249    ; 6251
LD  0   1            ; 6252
LDC 206              ; 6253
CEQ                  ; 6254
TSEL    8519 6253    ; 6255
LD  0   1            ; 6256
LDC 207              ; 6257
CEQ                  ; 6258
TSEL    8529 6257    ; 6259
LD  0   1            ; 6260
LDC 208              ; 6261
CEQ                  ; 6262
TSEL    8539 6261    ; 6263
LD  0   1            ; 6264
LDC 209              ; 6265
CEQ                  ; 6266
TSEL    8549 6265    ; 6267
LD  0   1            ; 6268
LDC 210              ; 6269
CEQ                  ; 6270
TSEL    8559 6269    ; 6271
LD  0   1            ; 6272
LDC 211              ; 6273
CEQ                  ; 6274
TSEL    8569 6273    ; 6275
LD  0   1            ; 6276
LDC 212              ; 6277
CEQ                  ; 6278
TSEL    8579 6277    ; 6279
LD  0   1            ; 6280
LDC 213              ; 6281
CEQ                  ; 6282
TSEL    8589 6281    ; 6283
LD  0   1            ; 6284
LDC 214              ; 6285
CEQ                  ; 6286
TSEL    8599 6285    ; 6287
LD  0   1            ; 6288
LDC 215              ; 6289
CEQ                  ; 6290
TSEL    8609 6289    ; 6291
LD  0   1            ; 6292
LDC 216              ; 6293
CEQ                  ; 6294
TSEL    8619 6293    ; 6295
LD  0   1            ; 6296
LDC 217              ; 6297
CEQ                  ; 6298
TSEL    8629 6297    ; 6299
LD  0   1            ; 6300
LDC 218              ; 6301
CEQ                  ; 6302
TSEL    8639 6301    ; 6303
LD  0   1            ; 6304
LDC 219              ; 6305
CEQ                  ; 6306
TSEL    8649 6305    ; 6307
LD  0   1            ; 6308
LDC 220              ; 6309
CEQ                  ; 6310
TSEL    8659 6309    ; 6311
LD  0   1            ; 6312
LDC 221              ; 6313
CEQ                  ; 6314
TSEL    8669 6313    ; 6315
LD  0   1            ; 6316
LDC 222              ; 6317
CEQ                  ; 6318
TSEL    8679 6317    ; 6319
LD  0   1            ; 6320
LDC 223              ; 6321
CEQ                  ; 6322
TSEL    8689 6321    ; 6323
LD  0   1            ; 6324
LDC 224              ; 6325
CEQ                  ; 6326
TSEL    8699 6325    ; 6327
LD  0   1            ; 6328
LDC 225              ; 6329
CEQ                  ; 6330
TSEL    8709 6329    ; 6331
LD  0   1            ; 6332
LDC 226              ; 6333
CEQ                  ; 6334
TSEL    8719 6333    ; 6335
LD  0   1            ; 6336
LDC 227              ; 6337
CEQ                  ; 6338
TSEL    8729 6337    ; 6339
LD  0   1            ; 6340
LDC 228              ; 6341
CEQ                  ; 6342
TSEL    8739 6341    ; 6343
LD  0   1            ; 6344
LDC 229              ; 6345
CEQ                  ; 6346
TSEL    8749 6345    ; 6347
LD  0   1            ; 6348
LDC 230              ; 6349
CEQ                  ; 6350
TSEL    8759 6349    ; 6351
LD  0   1            ; 6352
LDC 231              ; 6353
CEQ                  ; 6354
TSEL    8769 6353    ; 6355
LD  0   1            ; 6356
LDC 232              ; 6357
CEQ                  ; 6358
TSEL    8779 6357    ; 6359
LD  0   1            ; 6360
LDC 233              ; 6361
CEQ                  ; 6362
TSEL    8789 6361    ; 6363
LD  0   1            ; 6364
LDC 234              ; 6365
CEQ                  ; 6366
TSEL    8799 6365    ; 6367
LD  0   1            ; 6368
LDC 235              ; 6369
CEQ                  ; 6370
TSEL    8809 6369    ; 6371
LD  0   1            ; 6372
LDC 236              ; 6373
CEQ                  ; 6374
TSEL    8819 6373    ; 6375
LD  0   1            ; 6376
LDC 237              ; 6377
CEQ                  ; 6378
TSEL    8829 6377    ; 6379
LD  0   1            ; 6380
LDC 238              ; 6381
CEQ                  ; 6382
TSEL    8839 6381    ; 6383
LD  0   1            ; 6384
LDC 239              ; 6385
CEQ                  ; 6386
TSEL    8849 6385    ; 6387
LD  0   1            ; 6388
LDC 240              ; 6389
CEQ                  ; 6390
TSEL    8859 6389    ; 6391
LD  0   1            ; 6392
LDC 241              ; 6393
CEQ                  ; 6394
TSEL    8869 6393    ; 6395
LD  0   1            ; 6396
LDC 242              ; 6397
CEQ                  ; 6398
TSEL    8879 6397    ; 6399
LD  0   1            ; 6400
LDC 243              ; 6401
CEQ                  ; 6402
TSEL    8889 6401    ; 6403
LD  0   1            ; 6404
LDC 244              ; 6405
CEQ                  ; 6406
TSEL    8899 6405    ; 6407
LD  0   1            ; 6408
LDC 245              ; 6409
CEQ                  ; 6410
TSEL    8909 6409    ; 6411
LD  0   1            ; 6412
LDC 246              ; 6413
CEQ                  ; 6414
TSEL    8919 6413    ; 6415
LD  0   1            ; 6416
LDC 247              ; 6417
CEQ                  ; 6418
TSEL    8929 6417    ; 6419
LD  0   1            ; 6420
LDC 248              ; 6421
CEQ                  ; 6422
TSEL    8939 6421    ; 6423
LD  0   1            ; 6424
LDC 249              ; 6425
CEQ                  ; 6426
TSEL    8949 6425    ; 6427
LD  0   1            ; 6428
LDC 250              ; 6429
CEQ                  ; 6430
TSEL    8959 6429    ; 6431
LD  0   1            ; 6432
LDC 251              ; 6433
CEQ                  ; 6434
TSEL    8969 6433    ; 6435
LD  0   1            ; 6436
LDC 252              ; 6437
CEQ                  ; 6438
TSEL    8979 6437    ; 6439
LD  0   1            ; 6440
LDC 253              ; 6441
CEQ                  ; 6442
TSEL    8989 6441    ; 6443
LD  0   1            ; 6444
LDC 254              ; 6445
CEQ                  ; 6446
TSEL    8999 6445    ; 6447
LD  0   1            ; 6448
LDC 255              ; 6449
CEQ                  ; 6450
TSEL    9009 6449    ; 6451
LDC  0               ; 6452
RTN                  ; 6453
LD  2   0            ; 6454
RTN                  ; 6455
LDF 6451             ; 6456
RTN                  ; 6457
LD  2   0            ; 6458
LD  0   0            ; 6459
ST  2   0            ; 6460
RTN                  ; 6461
LDF 6455             ; 6462
RTN                  ; 6463
LD  2   1            ; 6464
RTN                  ; 6465
LDF 6461             ; 6466
RTN                  ; 6467
LD  2   1            ; 6468
LD  0   0            ; 6469
ST  2   1            ; 6470
RTN                  ; 6471
LDF 6465             ; 6472
RTN                  ; 6473
LD  2   2            ; 6474
RTN                  ; 6475
LDF 6471             ; 6476
RTN                  ; 6477
LD  2   2            ; 6478
LD  0   0            ; 6479
ST  2   2            ; 6480
RTN                  ; 6481
LDF 6475             ; 6482
RTN                  ; 6483
LD  2   3            ; 6484
RTN                  ; 6485
LDF 6481             ; 6486
RTN                  ; 6487
LD  2   3            ; 6488
LD  0   0            ; 6489
ST  2   3            ; 6490
RTN                  ; 6491
LDF 6485             ; 6492
RTN                  ; 6493
LD  2   4            ; 6494
RTN                  ; 6495
LDF 6491             ; 6496
RTN                  ; 6497
LD  2   4            ; 6498
LD  0   0            ; 6499
ST  2   4            ; 6500
RTN                  ; 6501
LDF 6495             ; 6502
RTN                  ; 6503
LD  2   5            ; 6504
RTN                  ; 6505
LDF 6501             ; 6506
RTN                  ; 6507
LD  2   5            ; 6508
LD  0   0            ; 6509
ST  2   5            ; 6510
RTN                  ; 6511
LDF 6505             ; 6512
RTN                  ; 6513
LD  2   6            ; 6514
RTN                  ; 6515
LDF 6511             ; 6516
RTN                  ; 6517
LD  2   6            ; 6518
LD  0   0            ; 6519
ST  2   6            ; 6520
RTN                  ; 6521
LDF 6515             ; 6522
RTN                  ; 6523
LD  2   7            ; 6524
RTN                  ; 6525
LDF 6521             ; 6526
RTN                  ; 6527
LD  2   7            ; 6528
LD  0   0            ; 6529
ST  2   7            ; 6530
RTN                  ; 6531
LDF 6525             ; 6532
RTN                  ; 6533
LD  2   8            ; 6534
RTN                  ; 6535
LDF 6531             ; 6536
RTN                  ; 6537
LD  2   8            ; 6538
LD  0   0            ; 6539
ST  2   8            ; 6540
RTN                  ; 6541
LDF 6535             ; 6542
RTN                  ; 6543
LD  2   9            ; 6544
RTN                  ; 6545
LDF 6541             ; 6546
RTN                  ; 6547
LD  2   9            ; 6548
LD  0   0            ; 6549
ST  2   9            ; 6550
RTN                  ; 6551
LDF 6545             ; 6552
RTN                  ; 6553
LD  2   10           ; 6554
RTN                  ; 6555
LDF 6551             ; 6556
RTN                  ; 6557
LD  2   10           ; 6558
LD  0   0            ; 6559
ST  2   10           ; 6560
RTN                  ; 6561
LDF 6555             ; 6562
RTN                  ; 6563
LD  2   11           ; 6564
RTN                  ; 6565
LDF 6561             ; 6566
RTN                  ; 6567
LD  2   11           ; 6568
LD  0   0            ; 6569
ST  2   11           ; 6570
RTN                  ; 6571
LDF 6565             ; 6572
RTN                  ; 6573
LD  2   12           ; 6574
RTN                  ; 6575
LDF 6571             ; 6576
RTN                  ; 6577
LD  2   12           ; 6578
LD  0   0            ; 6579
ST  2   12           ; 6580
RTN                  ; 6581
LDF 6575             ; 6582
RTN                  ; 6583
LD  2   13           ; 6584
RTN                  ; 6585
LDF 6581             ; 6586
RTN                  ; 6587
LD  2   13           ; 6588
LD  0   0            ; 6589
ST  2   13           ; 6590
RTN                  ; 6591
LDF 6585             ; 6592
RTN                  ; 6593
LD  2   14           ; 6594
RTN                  ; 6595
LDF 6591             ; 6596
RTN                  ; 6597
LD  2   14           ; 6598
LD  0   0            ; 6599
ST  2   14           ; 6600
RTN                  ; 6601
LDF 6595             ; 6602
RTN                  ; 6603
LD  2   15           ; 6604
RTN                  ; 6605
LDF 6601             ; 6606
RTN                  ; 6607
LD  2   15           ; 6608
LD  0   0            ; 6609
ST  2   15           ; 6610
RTN                  ; 6611
LDF 6605             ; 6612
RTN                  ; 6613
LD  2   16           ; 6614
RTN                  ; 6615
LDF 6611             ; 6616
RTN                  ; 6617
LD  2   16           ; 6618
LD  0   0            ; 6619
ST  2   16           ; 6620
RTN                  ; 6621
LDF 6615             ; 6622
RTN                  ; 6623
LD  2   17           ; 6624
RTN                  ; 6625
LDF 6621             ; 6626
RTN                  ; 6627
LD  2   17           ; 6628
LD  0   0            ; 6629
ST  2   17           ; 6630
RTN                  ; 6631
LDF 6625             ; 6632
RTN                  ; 6633
LD  2   18           ; 6634
RTN                  ; 6635
LDF 6631             ; 6636
RTN                  ; 6637
LD  2   18           ; 6638
LD  0   0            ; 6639
ST  2   18           ; 6640
RTN                  ; 6641
LDF 6635             ; 6642
RTN                  ; 6643
LD  2   19           ; 6644
RTN                  ; 6645
LDF 6641             ; 6646
RTN                  ; 6647
LD  2   19           ; 6648
LD  0   0            ; 6649
ST  2   19           ; 6650
RTN                  ; 6651
LDF 6645             ; 6652
RTN                  ; 6653
LD  2   20           ; 6654
RTN                  ; 6655
LDF 6651             ; 6656
RTN                  ; 6657
LD  2   20           ; 6658
LD  0   0            ; 6659
ST  2   20           ; 6660
RTN                  ; 6661
LDF 6655             ; 6662
RTN                  ; 6663
LD  2   21           ; 6664
RTN                  ; 6665
LDF 6661             ; 6666
RTN                  ; 6667
LD  2   21           ; 6668
LD  0   0            ; 6669
ST  2   21           ; 6670
RTN                  ; 6671
LDF 6665             ; 6672
RTN                  ; 6673
LD  2   22           ; 6674
RTN                  ; 6675
LDF 6671             ; 6676
RTN                  ; 6677
LD  2   22           ; 6678
LD  0   0            ; 6679
ST  2   22           ; 6680
RTN                  ; 6681
LDF 6675             ; 6682
RTN                  ; 6683
LD  2   23           ; 6684
RTN                  ; 6685
LDF 6681             ; 6686
RTN                  ; 6687
LD  2   23           ; 6688
LD  0   0            ; 6689
ST  2   23           ; 6690
RTN                  ; 6691
LDF 6685             ; 6692
RTN                  ; 6693
LD  2   24           ; 6694
RTN                  ; 6695
LDF 6691             ; 6696
RTN                  ; 6697
LD  2   24           ; 6698
LD  0   0            ; 6699
ST  2   24           ; 6700
RTN                  ; 6701
LDF 6695             ; 6702
RTN                  ; 6703
LD  2   25           ; 6704
RTN                  ; 6705
LDF 6701             ; 6706
RTN                  ; 6707
LD  2   25           ; 6708
LD  0   0            ; 6709
ST  2   25           ; 6710
RTN                  ; 6711
LDF 6705             ; 6712
RTN                  ; 6713
LD  2   26           ; 6714
RTN                  ; 6715
LDF 6711             ; 6716
RTN                  ; 6717
LD  2   26           ; 6718
LD  0   0            ; 6719
ST  2   26           ; 6720
RTN                  ; 6721
LDF 6715             ; 6722
RTN                  ; 6723
LD  2   27           ; 6724
RTN                  ; 6725
LDF 6721             ; 6726
RTN                  ; 6727
LD  2   27           ; 6728
LD  0   0            ; 6729
ST  2   27           ; 6730
RTN                  ; 6731
LDF 6725             ; 6732
RTN                  ; 6733
LD  2   28           ; 6734
RTN                  ; 6735
LDF 6731             ; 6736
RTN                  ; 6737
LD  2   28           ; 6738
LD  0   0            ; 6739
ST  2   28           ; 6740
RTN                  ; 6741
LDF 6735             ; 6742
RTN                  ; 6743
LD  2   29           ; 6744
RTN                  ; 6745
LDF 6741             ; 6746
RTN                  ; 6747
LD  2   29           ; 6748
LD  0   0            ; 6749
ST  2   29           ; 6750
RTN                  ; 6751
LDF 6745             ; 6752
RTN                  ; 6753
LD  2   30           ; 6754
RTN                  ; 6755
LDF 6751             ; 6756
RTN                  ; 6757
LD  2   30           ; 6758
LD  0   0            ; 6759
ST  2   30           ; 6760
RTN                  ; 6761
LDF 6755             ; 6762
RTN                  ; 6763
LD  2   31           ; 6764
RTN                  ; 6765
LDF 6761             ; 6766
RTN                  ; 6767
LD  2   31           ; 6768
LD  0   0            ; 6769
ST  2   31           ; 6770
RTN                  ; 6771
LDF 6765             ; 6772
RTN                  ; 6773
LD  2   32           ; 6774
RTN                  ; 6775
LDF 6771             ; 6776
RTN                  ; 6777
LD  2   32           ; 6778
LD  0   0            ; 6779
ST  2   32           ; 6780
RTN                  ; 6781
LDF 6775             ; 6782
RTN                  ; 6783
LD  2   33           ; 6784
RTN                  ; 6785
LDF 6781             ; 6786
RTN                  ; 6787
LD  2   33           ; 6788
LD  0   0            ; 6789
ST  2   33           ; 6790
RTN                  ; 6791
LDF 6785             ; 6792
RTN                  ; 6793
LD  2   34           ; 6794
RTN                  ; 6795
LDF 6791             ; 6796
RTN                  ; 6797
LD  2   34           ; 6798
LD  0   0            ; 6799
ST  2   34           ; 6800
RTN                  ; 6801
LDF 6795             ; 6802
RTN                  ; 6803
LD  2   35           ; 6804
RTN                  ; 6805
LDF 6801             ; 6806
RTN                  ; 6807
LD  2   35           ; 6808
LD  0   0            ; 6809
ST  2   35           ; 6810
RTN                  ; 6811
LDF 6805             ; 6812
RTN                  ; 6813
LD  2   36           ; 6814
RTN                  ; 6815
LDF 6811             ; 6816
RTN                  ; 6817
LD  2   36           ; 6818
LD  0   0            ; 6819
ST  2   36           ; 6820
RTN                  ; 6821
LDF 6815             ; 6822
RTN                  ; 6823
LD  2   37           ; 6824
RTN                  ; 6825
LDF 6821             ; 6826
RTN                  ; 6827
LD  2   37           ; 6828
LD  0   0            ; 6829
ST  2   37           ; 6830
RTN                  ; 6831
LDF 6825             ; 6832
RTN                  ; 6833
LD  2   38           ; 6834
RTN                  ; 6835
LDF 6831             ; 6836
RTN                  ; 6837
LD  2   38           ; 6838
LD  0   0            ; 6839
ST  2   38           ; 6840
RTN                  ; 6841
LDF 6835             ; 6842
RTN                  ; 6843
LD  2   39           ; 6844
RTN                  ; 6845
LDF 6841             ; 6846
RTN                  ; 6847
LD  2   39           ; 6848
LD  0   0            ; 6849
ST  2   39           ; 6850
RTN                  ; 6851
LDF 6845             ; 6852
RTN                  ; 6853
LD  2   40           ; 6854
RTN                  ; 6855
LDF 6851             ; 6856
RTN                  ; 6857
LD  2   40           ; 6858
LD  0   0            ; 6859
ST  2   40           ; 6860
RTN                  ; 6861
LDF 6855             ; 6862
RTN                  ; 6863
LD  2   41           ; 6864
RTN                  ; 6865
LDF 6861             ; 6866
RTN                  ; 6867
LD  2   41           ; 6868
LD  0   0            ; 6869
ST  2   41           ; 6870
RTN                  ; 6871
LDF 6865             ; 6872
RTN                  ; 6873
LD  2   42           ; 6874
RTN                  ; 6875
LDF 6871             ; 6876
RTN                  ; 6877
LD  2   42           ; 6878
LD  0   0            ; 6879
ST  2   42           ; 6880
RTN                  ; 6881
LDF 6875             ; 6882
RTN                  ; 6883
LD  2   43           ; 6884
RTN                  ; 6885
LDF 6881             ; 6886
RTN                  ; 6887
LD  2   43           ; 6888
LD  0   0            ; 6889
ST  2   43           ; 6890
RTN                  ; 6891
LDF 6885             ; 6892
RTN                  ; 6893
LD  2   44           ; 6894
RTN                  ; 6895
LDF 6891             ; 6896
RTN                  ; 6897
LD  2   44           ; 6898
LD  0   0            ; 6899
ST  2   44           ; 6900
RTN                  ; 6901
LDF 6895             ; 6902
RTN                  ; 6903
LD  2   45           ; 6904
RTN                  ; 6905
LDF 6901             ; 6906
RTN                  ; 6907
LD  2   45           ; 6908
LD  0   0            ; 6909
ST  2   45           ; 6910
RTN                  ; 6911
LDF 6905             ; 6912
RTN                  ; 6913
LD  2   46           ; 6914
RTN                  ; 6915
LDF 6911             ; 6916
RTN                  ; 6917
LD  2   46           ; 6918
LD  0   0            ; 6919
ST  2   46           ; 6920
RTN                  ; 6921
LDF 6915             ; 6922
RTN                  ; 6923
LD  2   47           ; 6924
RTN                  ; 6925
LDF 6921             ; 6926
RTN                  ; 6927
LD  2   47           ; 6928
LD  0   0            ; 6929
ST  2   47           ; 6930
RTN                  ; 6931
LDF 6925             ; 6932
RTN                  ; 6933
LD  2   48           ; 6934
RTN                  ; 6935
LDF 6931             ; 6936
RTN                  ; 6937
LD  2   48           ; 6938
LD  0   0            ; 6939
ST  2   48           ; 6940
RTN                  ; 6941
LDF 6935             ; 6942
RTN                  ; 6943
LD  2   49           ; 6944
RTN                  ; 6945
LDF 6941             ; 6946
RTN                  ; 6947
LD  2   49           ; 6948
LD  0   0            ; 6949
ST  2   49           ; 6950
RTN                  ; 6951
LDF 6945             ; 6952
RTN                  ; 6953
LD  2   50           ; 6954
RTN                  ; 6955
LDF 6951             ; 6956
RTN                  ; 6957
LD  2   50           ; 6958
LD  0   0            ; 6959
ST  2   50           ; 6960
RTN                  ; 6961
LDF 6955             ; 6962
RTN                  ; 6963
LD  2   51           ; 6964
RTN                  ; 6965
LDF 6961             ; 6966
RTN                  ; 6967
LD  2   51           ; 6968
LD  0   0            ; 6969
ST  2   51           ; 6970
RTN                  ; 6971
LDF 6965             ; 6972
RTN                  ; 6973
LD  2   52           ; 6974
RTN                  ; 6975
LDF 6971             ; 6976
RTN                  ; 6977
LD  2   52           ; 6978
LD  0   0            ; 6979
ST  2   52           ; 6980
RTN                  ; 6981
LDF 6975             ; 6982
RTN                  ; 6983
LD  2   53           ; 6984
RTN                  ; 6985
LDF 6981             ; 6986
RTN                  ; 6987
LD  2   53           ; 6988
LD  0   0            ; 6989
ST  2   53           ; 6990
RTN                  ; 6991
LDF 6985             ; 6992
RTN                  ; 6993
LD  2   54           ; 6994
RTN                  ; 6995
LDF 6991             ; 6996
RTN                  ; 6997
LD  2   54           ; 6998
LD  0   0            ; 6999
ST  2   54           ; 7000
RTN                  ; 7001
LDF 6995             ; 7002
RTN                  ; 7003
LD  2   55           ; 7004
RTN                  ; 7005
LDF 7001             ; 7006
RTN                  ; 7007
LD  2   55           ; 7008
LD  0   0            ; 7009
ST  2   55           ; 7010
RTN                  ; 7011
LDF 7005             ; 7012
RTN                  ; 7013
LD  2   56           ; 7014
RTN                  ; 7015
LDF 7011             ; 7016
RTN                  ; 7017
LD  2   56           ; 7018
LD  0   0            ; 7019
ST  2   56           ; 7020
RTN                  ; 7021
LDF 7015             ; 7022
RTN                  ; 7023
LD  2   57           ; 7024
RTN                  ; 7025
LDF 7021             ; 7026
RTN                  ; 7027
LD  2   57           ; 7028
LD  0   0            ; 7029
ST  2   57           ; 7030
RTN                  ; 7031
LDF 7025             ; 7032
RTN                  ; 7033
LD  2   58           ; 7034
RTN                  ; 7035
LDF 7031             ; 7036
RTN                  ; 7037
LD  2   58           ; 7038
LD  0   0            ; 7039
ST  2   58           ; 7040
RTN                  ; 7041
LDF 7035             ; 7042
RTN                  ; 7043
LD  2   59           ; 7044
RTN                  ; 7045
LDF 7041             ; 7046
RTN                  ; 7047
LD  2   59           ; 7048
LD  0   0            ; 7049
ST  2   59           ; 7050
RTN                  ; 7051
LDF 7045             ; 7052
RTN                  ; 7053
LD  2   60           ; 7054
RTN                  ; 7055
LDF 7051             ; 7056
RTN                  ; 7057
LD  2   60           ; 7058
LD  0   0            ; 7059
ST  2   60           ; 7060
RTN                  ; 7061
LDF 7055             ; 7062
RTN                  ; 7063
LD  2   61           ; 7064
RTN                  ; 7065
LDF 7061             ; 7066
RTN                  ; 7067
LD  2   61           ; 7068
LD  0   0            ; 7069
ST  2   61           ; 7070
RTN                  ; 7071
LDF 7065             ; 7072
RTN                  ; 7073
LD  2   62           ; 7074
RTN                  ; 7075
LDF 7071             ; 7076
RTN                  ; 7077
LD  2   62           ; 7078
LD  0   0            ; 7079
ST  2   62           ; 7080
RTN                  ; 7081
LDF 7075             ; 7082
RTN                  ; 7083
LD  2   63           ; 7084
RTN                  ; 7085
LDF 7081             ; 7086
RTN                  ; 7087
LD  2   63           ; 7088
LD  0   0            ; 7089
ST  2   63           ; 7090
RTN                  ; 7091
LDF 7085             ; 7092
RTN                  ; 7093
LD  2   64           ; 7094
RTN                  ; 7095
LDF 7091             ; 7096
RTN                  ; 7097
LD  2   64           ; 7098
LD  0   0            ; 7099
ST  2   64           ; 7100
RTN                  ; 7101
LDF 7095             ; 7102
RTN                  ; 7103
LD  2   65           ; 7104
RTN                  ; 7105
LDF 7101             ; 7106
RTN                  ; 7107
LD  2   65           ; 7108
LD  0   0            ; 7109
ST  2   65           ; 7110
RTN                  ; 7111
LDF 7105             ; 7112
RTN                  ; 7113
LD  2   66           ; 7114
RTN                  ; 7115
LDF 7111             ; 7116
RTN                  ; 7117
LD  2   66           ; 7118
LD  0   0            ; 7119
ST  2   66           ; 7120
RTN                  ; 7121
LDF 7115             ; 7122
RTN                  ; 7123
LD  2   67           ; 7124
RTN                  ; 7125
LDF 7121             ; 7126
RTN                  ; 7127
LD  2   67           ; 7128
LD  0   0            ; 7129
ST  2   67           ; 7130
RTN                  ; 7131
LDF 7125             ; 7132
RTN                  ; 7133
LD  2   68           ; 7134
RTN                  ; 7135
LDF 7131             ; 7136
RTN                  ; 7137
LD  2   68           ; 7138
LD  0   0            ; 7139
ST  2   68           ; 7140
RTN                  ; 7141
LDF 7135             ; 7142
RTN                  ; 7143
LD  2   69           ; 7144
RTN                  ; 7145
LDF 7141             ; 7146
RTN                  ; 7147
LD  2   69           ; 7148
LD  0   0            ; 7149
ST  2   69           ; 7150
RTN                  ; 7151
LDF 7145             ; 7152
RTN                  ; 7153
LD  2   70           ; 7154
RTN                  ; 7155
LDF 7151             ; 7156
RTN                  ; 7157
LD  2   70           ; 7158
LD  0   0            ; 7159
ST  2   70           ; 7160
RTN                  ; 7161
LDF 7155             ; 7162
RTN                  ; 7163
LD  2   71           ; 7164
RTN                  ; 7165
LDF 7161             ; 7166
RTN                  ; 7167
LD  2   71           ; 7168
LD  0   0            ; 7169
ST  2   71           ; 7170
RTN                  ; 7171
LDF 7165             ; 7172
RTN                  ; 7173
LD  2   72           ; 7174
RTN                  ; 7175
LDF 7171             ; 7176
RTN                  ; 7177
LD  2   72           ; 7178
LD  0   0            ; 7179
ST  2   72           ; 7180
RTN                  ; 7181
LDF 7175             ; 7182
RTN                  ; 7183
LD  2   73           ; 7184
RTN                  ; 7185
LDF 7181             ; 7186
RTN                  ; 7187
LD  2   73           ; 7188
LD  0   0            ; 7189
ST  2   73           ; 7190
RTN                  ; 7191
LDF 7185             ; 7192
RTN                  ; 7193
LD  2   74           ; 7194
RTN                  ; 7195
LDF 7191             ; 7196
RTN                  ; 7197
LD  2   74           ; 7198
LD  0   0            ; 7199
ST  2   74           ; 7200
RTN                  ; 7201
LDF 7195             ; 7202
RTN                  ; 7203
LD  2   75           ; 7204
RTN                  ; 7205
LDF 7201             ; 7206
RTN                  ; 7207
LD  2   75           ; 7208
LD  0   0            ; 7209
ST  2   75           ; 7210
RTN                  ; 7211
LDF 7205             ; 7212
RTN                  ; 7213
LD  2   76           ; 7214
RTN                  ; 7215
LDF 7211             ; 7216
RTN                  ; 7217
LD  2   76           ; 7218
LD  0   0            ; 7219
ST  2   76           ; 7220
RTN                  ; 7221
LDF 7215             ; 7222
RTN                  ; 7223
LD  2   77           ; 7224
RTN                  ; 7225
LDF 7221             ; 7226
RTN                  ; 7227
LD  2   77           ; 7228
LD  0   0            ; 7229
ST  2   77           ; 7230
RTN                  ; 7231
LDF 7225             ; 7232
RTN                  ; 7233
LD  2   78           ; 7234
RTN                  ; 7235
LDF 7231             ; 7236
RTN                  ; 7237
LD  2   78           ; 7238
LD  0   0            ; 7239
ST  2   78           ; 7240
RTN                  ; 7241
LDF 7235             ; 7242
RTN                  ; 7243
LD  2   79           ; 7244
RTN                  ; 7245
LDF 7241             ; 7246
RTN                  ; 7247
LD  2   79           ; 7248
LD  0   0            ; 7249
ST  2   79           ; 7250
RTN                  ; 7251
LDF 7245             ; 7252
RTN                  ; 7253
LD  2   80           ; 7254
RTN                  ; 7255
LDF 7251             ; 7256
RTN                  ; 7257
LD  2   80           ; 7258
LD  0   0            ; 7259
ST  2   80           ; 7260
RTN                  ; 7261
LDF 7255             ; 7262
RTN                  ; 7263
LD  2   81           ; 7264
RTN                  ; 7265
LDF 7261             ; 7266
RTN                  ; 7267
LD  2   81           ; 7268
LD  0   0            ; 7269
ST  2   81           ; 7270
RTN                  ; 7271
LDF 7265             ; 7272
RTN                  ; 7273
LD  2   82           ; 7274
RTN                  ; 7275
LDF 7271             ; 7276
RTN                  ; 7277
LD  2   82           ; 7278
LD  0   0            ; 7279
ST  2   82           ; 7280
RTN                  ; 7281
LDF 7275             ; 7282
RTN                  ; 7283
LD  2   83           ; 7284
RTN                  ; 7285
LDF 7281             ; 7286
RTN                  ; 7287
LD  2   83           ; 7288
LD  0   0            ; 7289
ST  2   83           ; 7290
RTN                  ; 7291
LDF 7285             ; 7292
RTN                  ; 7293
LD  2   84           ; 7294
RTN                  ; 7295
LDF 7291             ; 7296
RTN                  ; 7297
LD  2   84           ; 7298
LD  0   0            ; 7299
ST  2   84           ; 7300
RTN                  ; 7301
LDF 7295             ; 7302
RTN                  ; 7303
LD  2   85           ; 7304
RTN                  ; 7305
LDF 7301             ; 7306
RTN                  ; 7307
LD  2   85           ; 7308
LD  0   0            ; 7309
ST  2   85           ; 7310
RTN                  ; 7311
LDF 7305             ; 7312
RTN                  ; 7313
LD  2   86           ; 7314
RTN                  ; 7315
LDF 7311             ; 7316
RTN                  ; 7317
LD  2   86           ; 7318
LD  0   0            ; 7319
ST  2   86           ; 7320
RTN                  ; 7321
LDF 7315             ; 7322
RTN                  ; 7323
LD  2   87           ; 7324
RTN                  ; 7325
LDF 7321             ; 7326
RTN                  ; 7327
LD  2   87           ; 7328
LD  0   0            ; 7329
ST  2   87           ; 7330
RTN                  ; 7331
LDF 7325             ; 7332
RTN                  ; 7333
LD  2   88           ; 7334
RTN                  ; 7335
LDF 7331             ; 7336
RTN                  ; 7337
LD  2   88           ; 7338
LD  0   0            ; 7339
ST  2   88           ; 7340
RTN                  ; 7341
LDF 7335             ; 7342
RTN                  ; 7343
LD  2   89           ; 7344
RTN                  ; 7345
LDF 7341             ; 7346
RTN                  ; 7347
LD  2   89           ; 7348
LD  0   0            ; 7349
ST  2   89           ; 7350
RTN                  ; 7351
LDF 7345             ; 7352
RTN                  ; 7353
LD  2   90           ; 7354
RTN                  ; 7355
LDF 7351             ; 7356
RTN                  ; 7357
LD  2   90           ; 7358
LD  0   0            ; 7359
ST  2   90           ; 7360
RTN                  ; 7361
LDF 7355             ; 7362
RTN                  ; 7363
LD  2   91           ; 7364
RTN                  ; 7365
LDF 7361             ; 7366
RTN                  ; 7367
LD  2   91           ; 7368
LD  0   0            ; 7369
ST  2   91           ; 7370
RTN                  ; 7371
LDF 7365             ; 7372
RTN                  ; 7373
LD  2   92           ; 7374
RTN                  ; 7375
LDF 7371             ; 7376
RTN                  ; 7377
LD  2   92           ; 7378
LD  0   0            ; 7379
ST  2   92           ; 7380
RTN                  ; 7381
LDF 7375             ; 7382
RTN                  ; 7383
LD  2   93           ; 7384
RTN                  ; 7385
LDF 7381             ; 7386
RTN                  ; 7387
LD  2   93           ; 7388
LD  0   0            ; 7389
ST  2   93           ; 7390
RTN                  ; 7391
LDF 7385             ; 7392
RTN                  ; 7393
LD  2   94           ; 7394
RTN                  ; 7395
LDF 7391             ; 7396
RTN                  ; 7397
LD  2   94           ; 7398
LD  0   0            ; 7399
ST  2   94           ; 7400
RTN                  ; 7401
LDF 7395             ; 7402
RTN                  ; 7403
LD  2   95           ; 7404
RTN                  ; 7405
LDF 7401             ; 7406
RTN                  ; 7407
LD  2   95           ; 7408
LD  0   0            ; 7409
ST  2   95           ; 7410
RTN                  ; 7411
LDF 7405             ; 7412
RTN                  ; 7413
LD  2   96           ; 7414
RTN                  ; 7415
LDF 7411             ; 7416
RTN                  ; 7417
LD  2   96           ; 7418
LD  0   0            ; 7419
ST  2   96           ; 7420
RTN                  ; 7421
LDF 7415             ; 7422
RTN                  ; 7423
LD  2   97           ; 7424
RTN                  ; 7425
LDF 7421             ; 7426
RTN                  ; 7427
LD  2   97           ; 7428
LD  0   0            ; 7429
ST  2   97           ; 7430
RTN                  ; 7431
LDF 7425             ; 7432
RTN                  ; 7433
LD  2   98           ; 7434
RTN                  ; 7435
LDF 7431             ; 7436
RTN                  ; 7437
LD  2   98           ; 7438
LD  0   0            ; 7439
ST  2   98           ; 7440
RTN                  ; 7441
LDF 7435             ; 7442
RTN                  ; 7443
LD  2   99           ; 7444
RTN                  ; 7445
LDF 7441             ; 7446
RTN                  ; 7447
LD  2   99           ; 7448
LD  0   0            ; 7449
ST  2   99           ; 7450
RTN                  ; 7451
LDF 7445             ; 7452
RTN                  ; 7453
LD  2   100          ; 7454
RTN                  ; 7455
LDF 7451             ; 7456
RTN                  ; 7457
LD  2   100          ; 7458
LD  0   0            ; 7459
ST  2   100          ; 7460
RTN                  ; 7461
LDF 7455             ; 7462
RTN                  ; 7463
LD  2   101          ; 7464
RTN                  ; 7465
LDF 7461             ; 7466
RTN                  ; 7467
LD  2   101          ; 7468
LD  0   0            ; 7469
ST  2   101          ; 7470
RTN                  ; 7471
LDF 7465             ; 7472
RTN                  ; 7473
LD  2   102          ; 7474
RTN                  ; 7475
LDF 7471             ; 7476
RTN                  ; 7477
LD  2   102          ; 7478
LD  0   0            ; 7479
ST  2   102          ; 7480
RTN                  ; 7481
LDF 7475             ; 7482
RTN                  ; 7483
LD  2   103          ; 7484
RTN                  ; 7485
LDF 7481             ; 7486
RTN                  ; 7487
LD  2   103          ; 7488
LD  0   0            ; 7489
ST  2   103          ; 7490
RTN                  ; 7491
LDF 7485             ; 7492
RTN                  ; 7493
LD  2   104          ; 7494
RTN                  ; 7495
LDF 7491             ; 7496
RTN                  ; 7497
LD  2   104          ; 7498
LD  0   0            ; 7499
ST  2   104          ; 7500
RTN                  ; 7501
LDF 7495             ; 7502
RTN                  ; 7503
LD  2   105          ; 7504
RTN                  ; 7505
LDF 7501             ; 7506
RTN                  ; 7507
LD  2   105          ; 7508
LD  0   0            ; 7509
ST  2   105          ; 7510
RTN                  ; 7511
LDF 7505             ; 7512
RTN                  ; 7513
LD  2   106          ; 7514
RTN                  ; 7515
LDF 7511             ; 7516
RTN                  ; 7517
LD  2   106          ; 7518
LD  0   0            ; 7519
ST  2   106          ; 7520
RTN                  ; 7521
LDF 7515             ; 7522
RTN                  ; 7523
LD  2   107          ; 7524
RTN                  ; 7525
LDF 7521             ; 7526
RTN                  ; 7527
LD  2   107          ; 7528
LD  0   0            ; 7529
ST  2   107          ; 7530
RTN                  ; 7531
LDF 7525             ; 7532
RTN                  ; 7533
LD  2   108          ; 7534
RTN                  ; 7535
LDF 7531             ; 7536
RTN                  ; 7537
LD  2   108          ; 7538
LD  0   0            ; 7539
ST  2   108          ; 7540
RTN                  ; 7541
LDF 7535             ; 7542
RTN                  ; 7543
LD  2   109          ; 7544
RTN                  ; 7545
LDF 7541             ; 7546
RTN                  ; 7547
LD  2   109          ; 7548
LD  0   0            ; 7549
ST  2   109          ; 7550
RTN                  ; 7551
LDF 7545             ; 7552
RTN                  ; 7553
LD  2   110          ; 7554
RTN                  ; 7555
LDF 7551             ; 7556
RTN                  ; 7557
LD  2   110          ; 7558
LD  0   0            ; 7559
ST  2   110          ; 7560
RTN                  ; 7561
LDF 7555             ; 7562
RTN                  ; 7563
LD  2   111          ; 7564
RTN                  ; 7565
LDF 7561             ; 7566
RTN                  ; 7567
LD  2   111          ; 7568
LD  0   0            ; 7569
ST  2   111          ; 7570
RTN                  ; 7571
LDF 7565             ; 7572
RTN                  ; 7573
LD  2   112          ; 7574
RTN                  ; 7575
LDF 7571             ; 7576
RTN                  ; 7577
LD  2   112          ; 7578
LD  0   0            ; 7579
ST  2   112          ; 7580
RTN                  ; 7581
LDF 7575             ; 7582
RTN                  ; 7583
LD  2   113          ; 7584
RTN                  ; 7585
LDF 7581             ; 7586
RTN                  ; 7587
LD  2   113          ; 7588
LD  0   0            ; 7589
ST  2   113          ; 7590
RTN                  ; 7591
LDF 7585             ; 7592
RTN                  ; 7593
LD  2   114          ; 7594
RTN                  ; 7595
LDF 7591             ; 7596
RTN                  ; 7597
LD  2   114          ; 7598
LD  0   0            ; 7599
ST  2   114          ; 7600
RTN                  ; 7601
LDF 7595             ; 7602
RTN                  ; 7603
LD  2   115          ; 7604
RTN                  ; 7605
LDF 7601             ; 7606
RTN                  ; 7607
LD  2   115          ; 7608
LD  0   0            ; 7609
ST  2   115          ; 7610
RTN                  ; 7611
LDF 7605             ; 7612
RTN                  ; 7613
LD  2   116          ; 7614
RTN                  ; 7615
LDF 7611             ; 7616
RTN                  ; 7617
LD  2   116          ; 7618
LD  0   0            ; 7619
ST  2   116          ; 7620
RTN                  ; 7621
LDF 7615             ; 7622
RTN                  ; 7623
LD  2   117          ; 7624
RTN                  ; 7625
LDF 7621             ; 7626
RTN                  ; 7627
LD  2   117          ; 7628
LD  0   0            ; 7629
ST  2   117          ; 7630
RTN                  ; 7631
LDF 7625             ; 7632
RTN                  ; 7633
LD  2   118          ; 7634
RTN                  ; 7635
LDF 7631             ; 7636
RTN                  ; 7637
LD  2   118          ; 7638
LD  0   0            ; 7639
ST  2   118          ; 7640
RTN                  ; 7641
LDF 7635             ; 7642
RTN                  ; 7643
LD  2   119          ; 7644
RTN                  ; 7645
LDF 7641             ; 7646
RTN                  ; 7647
LD  2   119          ; 7648
LD  0   0            ; 7649
ST  2   119          ; 7650
RTN                  ; 7651
LDF 7645             ; 7652
RTN                  ; 7653
LD  2   120          ; 7654
RTN                  ; 7655
LDF 7651             ; 7656
RTN                  ; 7657
LD  2   120          ; 7658
LD  0   0            ; 7659
ST  2   120          ; 7660
RTN                  ; 7661
LDF 7655             ; 7662
RTN                  ; 7663
LD  2   121          ; 7664
RTN                  ; 7665
LDF 7661             ; 7666
RTN                  ; 7667
LD  2   121          ; 7668
LD  0   0            ; 7669
ST  2   121          ; 7670
RTN                  ; 7671
LDF 7665             ; 7672
RTN                  ; 7673
LD  2   122          ; 7674
RTN                  ; 7675
LDF 7671             ; 7676
RTN                  ; 7677
LD  2   122          ; 7678
LD  0   0            ; 7679
ST  2   122          ; 7680
RTN                  ; 7681
LDF 7675             ; 7682
RTN                  ; 7683
LD  2   123          ; 7684
RTN                  ; 7685
LDF 7681             ; 7686
RTN                  ; 7687
LD  2   123          ; 7688
LD  0   0            ; 7689
ST  2   123          ; 7690
RTN                  ; 7691
LDF 7685             ; 7692
RTN                  ; 7693
LD  2   124          ; 7694
RTN                  ; 7695
LDF 7691             ; 7696
RTN                  ; 7697
LD  2   124          ; 7698
LD  0   0            ; 7699
ST  2   124          ; 7700
RTN                  ; 7701
LDF 7695             ; 7702
RTN                  ; 7703
LD  2   125          ; 7704
RTN                  ; 7705
LDF 7701             ; 7706
RTN                  ; 7707
LD  2   125          ; 7708
LD  0   0            ; 7709
ST  2   125          ; 7710
RTN                  ; 7711
LDF 7705             ; 7712
RTN                  ; 7713
LD  2   126          ; 7714
RTN                  ; 7715
LDF 7711             ; 7716
RTN                  ; 7717
LD  2   126          ; 7718
LD  0   0            ; 7719
ST  2   126          ; 7720
RTN                  ; 7721
LDF 7715             ; 7722
RTN                  ; 7723
LD  2   127          ; 7724
RTN                  ; 7725
LDF 7721             ; 7726
RTN                  ; 7727
LD  2   127          ; 7728
LD  0   0            ; 7729
ST  2   127          ; 7730
RTN                  ; 7731
LDF 7725             ; 7732
RTN                  ; 7733
LD  2   128          ; 7734
RTN                  ; 7735
LDF 7731             ; 7736
RTN                  ; 7737
LD  2   128          ; 7738
LD  0   0            ; 7739
ST  2   128          ; 7740
RTN                  ; 7741
LDF 7735             ; 7742
RTN                  ; 7743
LD  2   129          ; 7744
RTN                  ; 7745
LDF 7741             ; 7746
RTN                  ; 7747
LD  2   129          ; 7748
LD  0   0            ; 7749
ST  2   129          ; 7750
RTN                  ; 7751
LDF 7745             ; 7752
RTN                  ; 7753
LD  2   130          ; 7754
RTN                  ; 7755
LDF 7751             ; 7756
RTN                  ; 7757
LD  2   130          ; 7758
LD  0   0            ; 7759
ST  2   130          ; 7760
RTN                  ; 7761
LDF 7755             ; 7762
RTN                  ; 7763
LD  2   131          ; 7764
RTN                  ; 7765
LDF 7761             ; 7766
RTN                  ; 7767
LD  2   131          ; 7768
LD  0   0            ; 7769
ST  2   131          ; 7770
RTN                  ; 7771
LDF 7765             ; 7772
RTN                  ; 7773
LD  2   132          ; 7774
RTN                  ; 7775
LDF 7771             ; 7776
RTN                  ; 7777
LD  2   132          ; 7778
LD  0   0            ; 7779
ST  2   132          ; 7780
RTN                  ; 7781
LDF 7775             ; 7782
RTN                  ; 7783
LD  2   133          ; 7784
RTN                  ; 7785
LDF 7781             ; 7786
RTN                  ; 7787
LD  2   133          ; 7788
LD  0   0            ; 7789
ST  2   133          ; 7790
RTN                  ; 7791
LDF 7785             ; 7792
RTN                  ; 7793
LD  2   134          ; 7794
RTN                  ; 7795
LDF 7791             ; 7796
RTN                  ; 7797
LD  2   134          ; 7798
LD  0   0            ; 7799
ST  2   134          ; 7800
RTN                  ; 7801
LDF 7795             ; 7802
RTN                  ; 7803
LD  2   135          ; 7804
RTN                  ; 7805
LDF 7801             ; 7806
RTN                  ; 7807
LD  2   135          ; 7808
LD  0   0            ; 7809
ST  2   135          ; 7810
RTN                  ; 7811
LDF 7805             ; 7812
RTN                  ; 7813
LD  2   136          ; 7814
RTN                  ; 7815
LDF 7811             ; 7816
RTN                  ; 7817
LD  2   136          ; 7818
LD  0   0            ; 7819
ST  2   136          ; 7820
RTN                  ; 7821
LDF 7815             ; 7822
RTN                  ; 7823
LD  2   137          ; 7824
RTN                  ; 7825
LDF 7821             ; 7826
RTN                  ; 7827
LD  2   137          ; 7828
LD  0   0            ; 7829
ST  2   137          ; 7830
RTN                  ; 7831
LDF 7825             ; 7832
RTN                  ; 7833
LD  2   138          ; 7834
RTN                  ; 7835
LDF 7831             ; 7836
RTN                  ; 7837
LD  2   138          ; 7838
LD  0   0            ; 7839
ST  2   138          ; 7840
RTN                  ; 7841
LDF 7835             ; 7842
RTN                  ; 7843
LD  2   139          ; 7844
RTN                  ; 7845
LDF 7841             ; 7846
RTN                  ; 7847
LD  2   139          ; 7848
LD  0   0            ; 7849
ST  2   139          ; 7850
RTN                  ; 7851
LDF 7845             ; 7852
RTN                  ; 7853
LD  2   140          ; 7854
RTN                  ; 7855
LDF 7851             ; 7856
RTN                  ; 7857
LD  2   140          ; 7858
LD  0   0            ; 7859
ST  2   140          ; 7860
RTN                  ; 7861
LDF 7855             ; 7862
RTN                  ; 7863
LD  2   141          ; 7864
RTN                  ; 7865
LDF 7861             ; 7866
RTN                  ; 7867
LD  2   141          ; 7868
LD  0   0            ; 7869
ST  2   141          ; 7870
RTN                  ; 7871
LDF 7865             ; 7872
RTN                  ; 7873
LD  2   142          ; 7874
RTN                  ; 7875
LDF 7871             ; 7876
RTN                  ; 7877
LD  2   142          ; 7878
LD  0   0            ; 7879
ST  2   142          ; 7880
RTN                  ; 7881
LDF 7875             ; 7882
RTN                  ; 7883
LD  2   143          ; 7884
RTN                  ; 7885
LDF 7881             ; 7886
RTN                  ; 7887
LD  2   143          ; 7888
LD  0   0            ; 7889
ST  2   143          ; 7890
RTN                  ; 7891
LDF 7885             ; 7892
RTN                  ; 7893
LD  2   144          ; 7894
RTN                  ; 7895
LDF 7891             ; 7896
RTN                  ; 7897
LD  2   144          ; 7898
LD  0   0            ; 7899
ST  2   144          ; 7900
RTN                  ; 7901
LDF 7895             ; 7902
RTN                  ; 7903
LD  2   145          ; 7904
RTN                  ; 7905
LDF 7901             ; 7906
RTN                  ; 7907
LD  2   145          ; 7908
LD  0   0            ; 7909
ST  2   145          ; 7910
RTN                  ; 7911
LDF 7905             ; 7912
RTN                  ; 7913
LD  2   146          ; 7914
RTN                  ; 7915
LDF 7911             ; 7916
RTN                  ; 7917
LD  2   146          ; 7918
LD  0   0            ; 7919
ST  2   146          ; 7920
RTN                  ; 7921
LDF 7915             ; 7922
RTN                  ; 7923
LD  2   147          ; 7924
RTN                  ; 7925
LDF 7921             ; 7926
RTN                  ; 7927
LD  2   147          ; 7928
LD  0   0            ; 7929
ST  2   147          ; 7930
RTN                  ; 7931
LDF 7925             ; 7932
RTN                  ; 7933
LD  2   148          ; 7934
RTN                  ; 7935
LDF 7931             ; 7936
RTN                  ; 7937
LD  2   148          ; 7938
LD  0   0            ; 7939
ST  2   148          ; 7940
RTN                  ; 7941
LDF 7935             ; 7942
RTN                  ; 7943
LD  2   149          ; 7944
RTN                  ; 7945
LDF 7941             ; 7946
RTN                  ; 7947
LD  2   149          ; 7948
LD  0   0            ; 7949
ST  2   149          ; 7950
RTN                  ; 7951
LDF 7945             ; 7952
RTN                  ; 7953
LD  2   150          ; 7954
RTN                  ; 7955
LDF 7951             ; 7956
RTN                  ; 7957
LD  2   150          ; 7958
LD  0   0            ; 7959
ST  2   150          ; 7960
RTN                  ; 7961
LDF 7955             ; 7962
RTN                  ; 7963
LD  2   151          ; 7964
RTN                  ; 7965
LDF 7961             ; 7966
RTN                  ; 7967
LD  2   151          ; 7968
LD  0   0            ; 7969
ST  2   151          ; 7970
RTN                  ; 7971
LDF 7965             ; 7972
RTN                  ; 7973
LD  2   152          ; 7974
RTN                  ; 7975
LDF 7971             ; 7976
RTN                  ; 7977
LD  2   152          ; 7978
LD  0   0            ; 7979
ST  2   152          ; 7980
RTN                  ; 7981
LDF 7975             ; 7982
RTN                  ; 7983
LD  2   153          ; 7984
RTN                  ; 7985
LDF 7981             ; 7986
RTN                  ; 7987
LD  2   153          ; 7988
LD  0   0            ; 7989
ST  2   153          ; 7990
RTN                  ; 7991
LDF 7985             ; 7992
RTN                  ; 7993
LD  2   154          ; 7994
RTN                  ; 7995
LDF 7991             ; 7996
RTN                  ; 7997
LD  2   154          ; 7998
LD  0   0            ; 7999
ST  2   154          ; 8000
RTN                  ; 8001
LDF 7995             ; 8002
RTN                  ; 8003
LD  2   155          ; 8004
RTN                  ; 8005
LDF 8001             ; 8006
RTN                  ; 8007
LD  2   155          ; 8008
LD  0   0            ; 8009
ST  2   155          ; 8010
RTN                  ; 8011
LDF 8005             ; 8012
RTN                  ; 8013
LD  2   156          ; 8014
RTN                  ; 8015
LDF 8011             ; 8016
RTN                  ; 8017
LD  2   156          ; 8018
LD  0   0            ; 8019
ST  2   156          ; 8020
RTN                  ; 8021
LDF 8015             ; 8022
RTN                  ; 8023
LD  2   157          ; 8024
RTN                  ; 8025
LDF 8021             ; 8026
RTN                  ; 8027
LD  2   157          ; 8028
LD  0   0            ; 8029
ST  2   157          ; 8030
RTN                  ; 8031
LDF 8025             ; 8032
RTN                  ; 8033
LD  2   158          ; 8034
RTN                  ; 8035
LDF 8031             ; 8036
RTN                  ; 8037
LD  2   158          ; 8038
LD  0   0            ; 8039
ST  2   158          ; 8040
RTN                  ; 8041
LDF 8035             ; 8042
RTN                  ; 8043
LD  2   159          ; 8044
RTN                  ; 8045
LDF 8041             ; 8046
RTN                  ; 8047
LD  2   159          ; 8048
LD  0   0            ; 8049
ST  2   159          ; 8050
RTN                  ; 8051
LDF 8045             ; 8052
RTN                  ; 8053
LD  2   160          ; 8054
RTN                  ; 8055
LDF 8051             ; 8056
RTN                  ; 8057
LD  2   160          ; 8058
LD  0   0            ; 8059
ST  2   160          ; 8060
RTN                  ; 8061
LDF 8055             ; 8062
RTN                  ; 8063
LD  2   161          ; 8064
RTN                  ; 8065
LDF 8061             ; 8066
RTN                  ; 8067
LD  2   161          ; 8068
LD  0   0            ; 8069
ST  2   161          ; 8070
RTN                  ; 8071
LDF 8065             ; 8072
RTN                  ; 8073
LD  2   162          ; 8074
RTN                  ; 8075
LDF 8071             ; 8076
RTN                  ; 8077
LD  2   162          ; 8078
LD  0   0            ; 8079
ST  2   162          ; 8080
RTN                  ; 8081
LDF 8075             ; 8082
RTN                  ; 8083
LD  2   163          ; 8084
RTN                  ; 8085
LDF 8081             ; 8086
RTN                  ; 8087
LD  2   163          ; 8088
LD  0   0            ; 8089
ST  2   163          ; 8090
RTN                  ; 8091
LDF 8085             ; 8092
RTN                  ; 8093
LD  2   164          ; 8094
RTN                  ; 8095
LDF 8091             ; 8096
RTN                  ; 8097
LD  2   164          ; 8098
LD  0   0            ; 8099
ST  2   164          ; 8100
RTN                  ; 8101
LDF 8095             ; 8102
RTN                  ; 8103
LD  2   165          ; 8104
RTN                  ; 8105
LDF 8101             ; 8106
RTN                  ; 8107
LD  2   165          ; 8108
LD  0   0            ; 8109
ST  2   165          ; 8110
RTN                  ; 8111
LDF 8105             ; 8112
RTN                  ; 8113
LD  2   166          ; 8114
RTN                  ; 8115
LDF 8111             ; 8116
RTN                  ; 8117
LD  2   166          ; 8118
LD  0   0            ; 8119
ST  2   166          ; 8120
RTN                  ; 8121
LDF 8115             ; 8122
RTN                  ; 8123
LD  2   167          ; 8124
RTN                  ; 8125
LDF 8121             ; 8126
RTN                  ; 8127
LD  2   167          ; 8128
LD  0   0            ; 8129
ST  2   167          ; 8130
RTN                  ; 8131
LDF 8125             ; 8132
RTN                  ; 8133
LD  2   168          ; 8134
RTN                  ; 8135
LDF 8131             ; 8136
RTN                  ; 8137
LD  2   168          ; 8138
LD  0   0            ; 8139
ST  2   168          ; 8140
RTN                  ; 8141
LDF 8135             ; 8142
RTN                  ; 8143
LD  2   169          ; 8144
RTN                  ; 8145
LDF 8141             ; 8146
RTN                  ; 8147
LD  2   169          ; 8148
LD  0   0            ; 8149
ST  2   169          ; 8150
RTN                  ; 8151
LDF 8145             ; 8152
RTN                  ; 8153
LD  2   170          ; 8154
RTN                  ; 8155
LDF 8151             ; 8156
RTN                  ; 8157
LD  2   170          ; 8158
LD  0   0            ; 8159
ST  2   170          ; 8160
RTN                  ; 8161
LDF 8155             ; 8162
RTN                  ; 8163
LD  2   171          ; 8164
RTN                  ; 8165
LDF 8161             ; 8166
RTN                  ; 8167
LD  2   171          ; 8168
LD  0   0            ; 8169
ST  2   171          ; 8170
RTN                  ; 8171
LDF 8165             ; 8172
RTN                  ; 8173
LD  2   172          ; 8174
RTN                  ; 8175
LDF 8171             ; 8176
RTN                  ; 8177
LD  2   172          ; 8178
LD  0   0            ; 8179
ST  2   172          ; 8180
RTN                  ; 8181
LDF 8175             ; 8182
RTN                  ; 8183
LD  2   173          ; 8184
RTN                  ; 8185
LDF 8181             ; 8186
RTN                  ; 8187
LD  2   173          ; 8188
LD  0   0            ; 8189
ST  2   173          ; 8190
RTN                  ; 8191
LDF 8185             ; 8192
RTN                  ; 8193
LD  2   174          ; 8194
RTN                  ; 8195
LDF 8191             ; 8196
RTN                  ; 8197
LD  2   174          ; 8198
LD  0   0            ; 8199
ST  2   174          ; 8200
RTN                  ; 8201
LDF 8195             ; 8202
RTN                  ; 8203
LD  2   175          ; 8204
RTN                  ; 8205
LDF 8201             ; 8206
RTN                  ; 8207
LD  2   175          ; 8208
LD  0   0            ; 8209
ST  2   175          ; 8210
RTN                  ; 8211
LDF 8205             ; 8212
RTN                  ; 8213
LD  2   176          ; 8214
RTN                  ; 8215
LDF 8211             ; 8216
RTN                  ; 8217
LD  2   176          ; 8218
LD  0   0            ; 8219
ST  2   176          ; 8220
RTN                  ; 8221
LDF 8215             ; 8222
RTN                  ; 8223
LD  2   177          ; 8224
RTN                  ; 8225
LDF 8221             ; 8226
RTN                  ; 8227
LD  2   177          ; 8228
LD  0   0            ; 8229
ST  2   177          ; 8230
RTN                  ; 8231
LDF 8225             ; 8232
RTN                  ; 8233
LD  2   178          ; 8234
RTN                  ; 8235
LDF 8231             ; 8236
RTN                  ; 8237
LD  2   178          ; 8238
LD  0   0            ; 8239
ST  2   178          ; 8240
RTN                  ; 8241
LDF 8235             ; 8242
RTN                  ; 8243
LD  2   179          ; 8244
RTN                  ; 8245
LDF 8241             ; 8246
RTN                  ; 8247
LD  2   179          ; 8248
LD  0   0            ; 8249
ST  2   179          ; 8250
RTN                  ; 8251
LDF 8245             ; 8252
RTN                  ; 8253
LD  2   180          ; 8254
RTN                  ; 8255
LDF 8251             ; 8256
RTN                  ; 8257
LD  2   180          ; 8258
LD  0   0            ; 8259
ST  2   180          ; 8260
RTN                  ; 8261
LDF 8255             ; 8262
RTN                  ; 8263
LD  2   181          ; 8264
RTN                  ; 8265
LDF 8261             ; 8266
RTN                  ; 8267
LD  2   181          ; 8268
LD  0   0            ; 8269
ST  2   181          ; 8270
RTN                  ; 8271
LDF 8265             ; 8272
RTN                  ; 8273
LD  2   182          ; 8274
RTN                  ; 8275
LDF 8271             ; 8276
RTN                  ; 8277
LD  2   182          ; 8278
LD  0   0            ; 8279
ST  2   182          ; 8280
RTN                  ; 8281
LDF 8275             ; 8282
RTN                  ; 8283
LD  2   183          ; 8284
RTN                  ; 8285
LDF 8281             ; 8286
RTN                  ; 8287
LD  2   183          ; 8288
LD  0   0            ; 8289
ST  2   183          ; 8290
RTN                  ; 8291
LDF 8285             ; 8292
RTN                  ; 8293
LD  2   184          ; 8294
RTN                  ; 8295
LDF 8291             ; 8296
RTN                  ; 8297
LD  2   184          ; 8298
LD  0   0            ; 8299
ST  2   184          ; 8300
RTN                  ; 8301
LDF 8295             ; 8302
RTN                  ; 8303
LD  2   185          ; 8304
RTN                  ; 8305
LDF 8301             ; 8306
RTN                  ; 8307
LD  2   185          ; 8308
LD  0   0            ; 8309
ST  2   185          ; 8310
RTN                  ; 8311
LDF 8305             ; 8312
RTN                  ; 8313
LD  2   186          ; 8314
RTN                  ; 8315
LDF 8311             ; 8316
RTN                  ; 8317
LD  2   186          ; 8318
LD  0   0            ; 8319
ST  2   186          ; 8320
RTN                  ; 8321
LDF 8315             ; 8322
RTN                  ; 8323
LD  2   187          ; 8324
RTN                  ; 8325
LDF 8321             ; 8326
RTN                  ; 8327
LD  2   187          ; 8328
LD  0   0            ; 8329
ST  2   187          ; 8330
RTN                  ; 8331
LDF 8325             ; 8332
RTN                  ; 8333
LD  2   188          ; 8334
RTN                  ; 8335
LDF 8331             ; 8336
RTN                  ; 8337
LD  2   188          ; 8338
LD  0   0            ; 8339
ST  2   188          ; 8340
RTN                  ; 8341
LDF 8335             ; 8342
RTN                  ; 8343
LD  2   189          ; 8344
RTN                  ; 8345
LDF 8341             ; 8346
RTN                  ; 8347
LD  2   189          ; 8348
LD  0   0            ; 8349
ST  2   189          ; 8350
RTN                  ; 8351
LDF 8345             ; 8352
RTN                  ; 8353
LD  2   190          ; 8354
RTN                  ; 8355
LDF 8351             ; 8356
RTN                  ; 8357
LD  2   190          ; 8358
LD  0   0            ; 8359
ST  2   190          ; 8360
RTN                  ; 8361
LDF 8355             ; 8362
RTN                  ; 8363
LD  2   191          ; 8364
RTN                  ; 8365
LDF 8361             ; 8366
RTN                  ; 8367
LD  2   191          ; 8368
LD  0   0            ; 8369
ST  2   191          ; 8370
RTN                  ; 8371
LDF 8365             ; 8372
RTN                  ; 8373
LD  2   192          ; 8374
RTN                  ; 8375
LDF 8371             ; 8376
RTN                  ; 8377
LD  2   192          ; 8378
LD  0   0            ; 8379
ST  2   192          ; 8380
RTN                  ; 8381
LDF 8375             ; 8382
RTN                  ; 8383
LD  2   193          ; 8384
RTN                  ; 8385
LDF 8381             ; 8386
RTN                  ; 8387
LD  2   193          ; 8388
LD  0   0            ; 8389
ST  2   193          ; 8390
RTN                  ; 8391
LDF 8385             ; 8392
RTN                  ; 8393
LD  2   194          ; 8394
RTN                  ; 8395
LDF 8391             ; 8396
RTN                  ; 8397
LD  2   194          ; 8398
LD  0   0            ; 8399
ST  2   194          ; 8400
RTN                  ; 8401
LDF 8395             ; 8402
RTN                  ; 8403
LD  2   195          ; 8404
RTN                  ; 8405
LDF 8401             ; 8406
RTN                  ; 8407
LD  2   195          ; 8408
LD  0   0            ; 8409
ST  2   195          ; 8410
RTN                  ; 8411
LDF 8405             ; 8412
RTN                  ; 8413
LD  2   196          ; 8414
RTN                  ; 8415
LDF 8411             ; 8416
RTN                  ; 8417
LD  2   196          ; 8418
LD  0   0            ; 8419
ST  2   196          ; 8420
RTN                  ; 8421
LDF 8415             ; 8422
RTN                  ; 8423
LD  2   197          ; 8424
RTN                  ; 8425
LDF 8421             ; 8426
RTN                  ; 8427
LD  2   197          ; 8428
LD  0   0            ; 8429
ST  2   197          ; 8430
RTN                  ; 8431
LDF 8425             ; 8432
RTN                  ; 8433
LD  2   198          ; 8434
RTN                  ; 8435
LDF 8431             ; 8436
RTN                  ; 8437
LD  2   198          ; 8438
LD  0   0            ; 8439
ST  2   198          ; 8440
RTN                  ; 8441
LDF 8435             ; 8442
RTN                  ; 8443
LD  2   199          ; 8444
RTN                  ; 8445
LDF 8441             ; 8446
RTN                  ; 8447
LD  2   199          ; 8448
LD  0   0            ; 8449
ST  2   199          ; 8450
RTN                  ; 8451
LDF 8445             ; 8452
RTN                  ; 8453
LD  2   200          ; 8454
RTN                  ; 8455
LDF 8451             ; 8456
RTN                  ; 8457
LD  2   200          ; 8458
LD  0   0            ; 8459
ST  2   200          ; 8460
RTN                  ; 8461
LDF 8455             ; 8462
RTN                  ; 8463
LD  2   201          ; 8464
RTN                  ; 8465
LDF 8461             ; 8466
RTN                  ; 8467
LD  2   201          ; 8468
LD  0   0            ; 8469
ST  2   201          ; 8470
RTN                  ; 8471
LDF 8465             ; 8472
RTN                  ; 8473
LD  2   202          ; 8474
RTN                  ; 8475
LDF 8471             ; 8476
RTN                  ; 8477
LD  2   202          ; 8478
LD  0   0            ; 8479
ST  2   202          ; 8480
RTN                  ; 8481
LDF 8475             ; 8482
RTN                  ; 8483
LD  2   203          ; 8484
RTN                  ; 8485
LDF 8481             ; 8486
RTN                  ; 8487
LD  2   203          ; 8488
LD  0   0            ; 8489
ST  2   203          ; 8490
RTN                  ; 8491
LDF 8485             ; 8492
RTN                  ; 8493
LD  2   204          ; 8494
RTN                  ; 8495
LDF 8491             ; 8496
RTN                  ; 8497
LD  2   204          ; 8498
LD  0   0            ; 8499
ST  2   204          ; 8500
RTN                  ; 8501
LDF 8495             ; 8502
RTN                  ; 8503
LD  2   205          ; 8504
RTN                  ; 8505
LDF 8501             ; 8506
RTN                  ; 8507
LD  2   205          ; 8508
LD  0   0            ; 8509
ST  2   205          ; 8510
RTN                  ; 8511
LDF 8505             ; 8512
RTN                  ; 8513
LD  2   206          ; 8514
RTN                  ; 8515
LDF 8511             ; 8516
RTN                  ; 8517
LD  2   206          ; 8518
LD  0   0            ; 8519
ST  2   206          ; 8520
RTN                  ; 8521
LDF 8515             ; 8522
RTN                  ; 8523
LD  2   207          ; 8524
RTN                  ; 8525
LDF 8521             ; 8526
RTN                  ; 8527
LD  2   207          ; 8528
LD  0   0            ; 8529
ST  2   207          ; 8530
RTN                  ; 8531
LDF 8525             ; 8532
RTN                  ; 8533
LD  2   208          ; 8534
RTN                  ; 8535
LDF 8531             ; 8536
RTN                  ; 8537
LD  2   208          ; 8538
LD  0   0            ; 8539
ST  2   208          ; 8540
RTN                  ; 8541
LDF 8535             ; 8542
RTN                  ; 8543
LD  2   209          ; 8544
RTN                  ; 8545
LDF 8541             ; 8546
RTN                  ; 8547
LD  2   209          ; 8548
LD  0   0            ; 8549
ST  2   209          ; 8550
RTN                  ; 8551
LDF 8545             ; 8552
RTN                  ; 8553
LD  2   210          ; 8554
RTN                  ; 8555
LDF 8551             ; 8556
RTN                  ; 8557
LD  2   210          ; 8558
LD  0   0            ; 8559
ST  2   210          ; 8560
RTN                  ; 8561
LDF 8555             ; 8562
RTN                  ; 8563
LD  2   211          ; 8564
RTN                  ; 8565
LDF 8561             ; 8566
RTN                  ; 8567
LD  2   211          ; 8568
LD  0   0            ; 8569
ST  2   211          ; 8570
RTN                  ; 8571
LDF 8565             ; 8572
RTN                  ; 8573
LD  2   212          ; 8574
RTN                  ; 8575
LDF 8571             ; 8576
RTN                  ; 8577
LD  2   212          ; 8578
LD  0   0            ; 8579
ST  2   212          ; 8580
RTN                  ; 8581
LDF 8575             ; 8582
RTN                  ; 8583
LD  2   213          ; 8584
RTN                  ; 8585
LDF 8581             ; 8586
RTN                  ; 8587
LD  2   213          ; 8588
LD  0   0            ; 8589
ST  2   213          ; 8590
RTN                  ; 8591
LDF 8585             ; 8592
RTN                  ; 8593
LD  2   214          ; 8594
RTN                  ; 8595
LDF 8591             ; 8596
RTN                  ; 8597
LD  2   214          ; 8598
LD  0   0            ; 8599
ST  2   214          ; 8600
RTN                  ; 8601
LDF 8595             ; 8602
RTN                  ; 8603
LD  2   215          ; 8604
RTN                  ; 8605
LDF 8601             ; 8606
RTN                  ; 8607
LD  2   215          ; 8608
LD  0   0            ; 8609
ST  2   215          ; 8610
RTN                  ; 8611
LDF 8605             ; 8612
RTN                  ; 8613
LD  2   216          ; 8614
RTN                  ; 8615
LDF 8611             ; 8616
RTN                  ; 8617
LD  2   216          ; 8618
LD  0   0            ; 8619
ST  2   216          ; 8620
RTN                  ; 8621
LDF 8615             ; 8622
RTN                  ; 8623
LD  2   217          ; 8624
RTN                  ; 8625
LDF 8621             ; 8626
RTN                  ; 8627
LD  2   217          ; 8628
LD  0   0            ; 8629
ST  2   217          ; 8630
RTN                  ; 8631
LDF 8625             ; 8632
RTN                  ; 8633
LD  2   218          ; 8634
RTN                  ; 8635
LDF 8631             ; 8636
RTN                  ; 8637
LD  2   218          ; 8638
LD  0   0            ; 8639
ST  2   218          ; 8640
RTN                  ; 8641
LDF 8635             ; 8642
RTN                  ; 8643
LD  2   219          ; 8644
RTN                  ; 8645
LDF 8641             ; 8646
RTN                  ; 8647
LD  2   219          ; 8648
LD  0   0            ; 8649
ST  2   219          ; 8650
RTN                  ; 8651
LDF 8645             ; 8652
RTN                  ; 8653
LD  2   220          ; 8654
RTN                  ; 8655
LDF 8651             ; 8656
RTN                  ; 8657
LD  2   220          ; 8658
LD  0   0            ; 8659
ST  2   220          ; 8660
RTN                  ; 8661
LDF 8655             ; 8662
RTN                  ; 8663
LD  2   221          ; 8664
RTN                  ; 8665
LDF 8661             ; 8666
RTN                  ; 8667
LD  2   221          ; 8668
LD  0   0            ; 8669
ST  2   221          ; 8670
RTN                  ; 8671
LDF 8665             ; 8672
RTN                  ; 8673
LD  2   222          ; 8674
RTN                  ; 8675
LDF 8671             ; 8676
RTN                  ; 8677
LD  2   222          ; 8678
LD  0   0            ; 8679
ST  2   222          ; 8680
RTN                  ; 8681
LDF 8675             ; 8682
RTN                  ; 8683
LD  2   223          ; 8684
RTN                  ; 8685
LDF 8681             ; 8686
RTN                  ; 8687
LD  2   223          ; 8688
LD  0   0            ; 8689
ST  2   223          ; 8690
RTN                  ; 8691
LDF 8685             ; 8692
RTN                  ; 8693
LD  2   224          ; 8694
RTN                  ; 8695
LDF 8691             ; 8696
RTN                  ; 8697
LD  2   224          ; 8698
LD  0   0            ; 8699
ST  2   224          ; 8700
RTN                  ; 8701
LDF 8695             ; 8702
RTN                  ; 8703
LD  2   225          ; 8704
RTN                  ; 8705
LDF 8701             ; 8706
RTN                  ; 8707
LD  2   225          ; 8708
LD  0   0            ; 8709
ST  2   225          ; 8710
RTN                  ; 8711
LDF 8705             ; 8712
RTN                  ; 8713
LD  2   226          ; 8714
RTN                  ; 8715
LDF 8711             ; 8716
RTN                  ; 8717
LD  2   226          ; 8718
LD  0   0            ; 8719
ST  2   226          ; 8720
RTN                  ; 8721
LDF 8715             ; 8722
RTN                  ; 8723
LD  2   227          ; 8724
RTN                  ; 8725
LDF 8721             ; 8726
RTN                  ; 8727
LD  2   227          ; 8728
LD  0   0            ; 8729
ST  2   227          ; 8730
RTN                  ; 8731
LDF 8725             ; 8732
RTN                  ; 8733
LD  2   228          ; 8734
RTN                  ; 8735
LDF 8731             ; 8736
RTN                  ; 8737
LD  2   228          ; 8738
LD  0   0            ; 8739
ST  2   228          ; 8740
RTN                  ; 8741
LDF 8735             ; 8742
RTN                  ; 8743
LD  2   229          ; 8744
RTN                  ; 8745
LDF 8741             ; 8746
RTN                  ; 8747
LD  2   229          ; 8748
LD  0   0            ; 8749
ST  2   229          ; 8750
RTN                  ; 8751
LDF 8745             ; 8752
RTN                  ; 8753
LD  2   230          ; 8754
RTN                  ; 8755
LDF 8751             ; 8756
RTN                  ; 8757
LD  2   230          ; 8758
LD  0   0            ; 8759
ST  2   230          ; 8760
RTN                  ; 8761
LDF 8755             ; 8762
RTN                  ; 8763
LD  2   231          ; 8764
RTN                  ; 8765
LDF 8761             ; 8766
RTN                  ; 8767
LD  2   231          ; 8768
LD  0   0            ; 8769
ST  2   231          ; 8770
RTN                  ; 8771
LDF 8765             ; 8772
RTN                  ; 8773
LD  2   232          ; 8774
RTN                  ; 8775
LDF 8771             ; 8776
RTN                  ; 8777
LD  2   232          ; 8778
LD  0   0            ; 8779
ST  2   232          ; 8780
RTN                  ; 8781
LDF 8775             ; 8782
RTN                  ; 8783
LD  2   233          ; 8784
RTN                  ; 8785
LDF 8781             ; 8786
RTN                  ; 8787
LD  2   233          ; 8788
LD  0   0            ; 8789
ST  2   233          ; 8790
RTN                  ; 8791
LDF 8785             ; 8792
RTN                  ; 8793
LD  2   234          ; 8794
RTN                  ; 8795
LDF 8791             ; 8796
RTN                  ; 8797
LD  2   234          ; 8798
LD  0   0            ; 8799
ST  2   234          ; 8800
RTN                  ; 8801
LDF 8795             ; 8802
RTN                  ; 8803
LD  2   235          ; 8804
RTN                  ; 8805
LDF 8801             ; 8806
RTN                  ; 8807
LD  2   235          ; 8808
LD  0   0            ; 8809
ST  2   235          ; 8810
RTN                  ; 8811
LDF 8805             ; 8812
RTN                  ; 8813
LD  2   236          ; 8814
RTN                  ; 8815
LDF 8811             ; 8816
RTN                  ; 8817
LD  2   236          ; 8818
LD  0   0            ; 8819
ST  2   236          ; 8820
RTN                  ; 8821
LDF 8815             ; 8822
RTN                  ; 8823
LD  2   237          ; 8824
RTN                  ; 8825
LDF 8821             ; 8826
RTN                  ; 8827
LD  2   237          ; 8828
LD  0   0            ; 8829
ST  2   237          ; 8830
RTN                  ; 8831
LDF 8825             ; 8832
RTN                  ; 8833
LD  2   238          ; 8834
RTN                  ; 8835
LDF 8831             ; 8836
RTN                  ; 8837
LD  2   238          ; 8838
LD  0   0            ; 8839
ST  2   238          ; 8840
RTN                  ; 8841
LDF 8835             ; 8842
RTN                  ; 8843
LD  2   239          ; 8844
RTN                  ; 8845
LDF 8841             ; 8846
RTN                  ; 8847
LD  2   239          ; 8848
LD  0   0            ; 8849
ST  2   239          ; 8850
RTN                  ; 8851
LDF 8845             ; 8852
RTN                  ; 8853
LD  2   240          ; 8854
RTN                  ; 8855
LDF 8851             ; 8856
RTN                  ; 8857
LD  2   240          ; 8858
LD  0   0            ; 8859
ST  2   240          ; 8860
RTN                  ; 8861
LDF 8855             ; 8862
RTN                  ; 8863
LD  2   241          ; 8864
RTN                  ; 8865
LDF 8861             ; 8866
RTN                  ; 8867
LD  2   241          ; 8868
LD  0   0            ; 8869
ST  2   241          ; 8870
RTN                  ; 8871
LDF 8865             ; 8872
RTN                  ; 8873
LD  2   242          ; 8874
RTN                  ; 8875
LDF 8871             ; 8876
RTN                  ; 8877
LD  2   242          ; 8878
LD  0   0            ; 8879
ST  2   242          ; 8880
RTN                  ; 8881
LDF 8875             ; 8882
RTN                  ; 8883
LD  2   243          ; 8884
RTN                  ; 8885
LDF 8881             ; 8886
RTN                  ; 8887
LD  2   243          ; 8888
LD  0   0            ; 8889
ST  2   243          ; 8890
RTN                  ; 8891
LDF 8885             ; 8892
RTN                  ; 8893
LD  2   244          ; 8894
RTN                  ; 8895
LDF 8891             ; 8896
RTN                  ; 8897
LD  2   244          ; 8898
LD  0   0            ; 8899
ST  2   244          ; 8900
RTN                  ; 8901
LDF 8895             ; 8902
RTN                  ; 8903
LD  2   245          ; 8904
RTN                  ; 8905
LDF 8901             ; 8906
RTN                  ; 8907
LD  2   245          ; 8908
LD  0   0            ; 8909
ST  2   245          ; 8910
RTN                  ; 8911
LDF 8905             ; 8912
RTN                  ; 8913
LD  2   246          ; 8914
RTN                  ; 8915
LDF 8911             ; 8916
RTN                  ; 8917
LD  2   246          ; 8918
LD  0   0            ; 8919
ST  2   246          ; 8920
RTN                  ; 8921
LDF 8915             ; 8922
RTN                  ; 8923
LD  2   247          ; 8924
RTN                  ; 8925
LDF 8921             ; 8926
RTN                  ; 8927
LD  2   247          ; 8928
LD  0   0            ; 8929
ST  2   247          ; 8930
RTN                  ; 8931
LDF 8925             ; 8932
RTN                  ; 8933
LD  2   248          ; 8934
RTN                  ; 8935
LDF 8931             ; 8936
RTN                  ; 8937
LD  2   248          ; 8938
LD  0   0            ; 8939
ST  2   248          ; 8940
RTN                  ; 8941
LDF 8935             ; 8942
RTN                  ; 8943
LD  2   249          ; 8944
RTN                  ; 8945
LDF 8941             ; 8946
RTN                  ; 8947
LD  2   249          ; 8948
LD  0   0            ; 8949
ST  2   249          ; 8950
RTN                  ; 8951
LDF 8945             ; 8952
RTN                  ; 8953
LD  2   250          ; 8954
RTN                  ; 8955
LDF 8951             ; 8956
RTN                  ; 8957
LD  2   250          ; 8958
LD  0   0            ; 8959
ST  2   250          ; 8960
RTN                  ; 8961
LDF 8955             ; 8962
RTN                  ; 8963
LD  2   251          ; 8964
RTN                  ; 8965
LDF 8961             ; 8966
RTN                  ; 8967
LD  2   251          ; 8968
LD  0   0            ; 8969
ST  2   251          ; 8970
RTN                  ; 8971
LDF 8965             ; 8972
RTN                  ; 8973
LD  2   252          ; 8974
RTN                  ; 8975
LDF 8971             ; 8976
RTN                  ; 8977
LD  2   252          ; 8978
LD  0   0            ; 8979
ST  2   252          ; 8980
RTN                  ; 8981
LDF 8975             ; 8982
RTN                  ; 8983
LD  2   253          ; 8984
RTN                  ; 8985
LDF 8981             ; 8986
RTN                  ; 8987
LD  2   253          ; 8988
LD  0   0            ; 8989
ST  2   253          ; 8990
RTN                  ; 8991
LDF 8985             ; 8992
RTN                  ; 8993
LD  2   254          ; 8994
RTN                  ; 8995
LDF 8991             ; 8996
RTN                  ; 8997
LD  2   254          ; 8998
LD  0   0            ; 8999
ST  2   254          ; 9000
RTN                  ; 9001
LDF 8995             ; 9002
RTN                  ; 9003
LD  2   255          ; 9004
RTN                  ; 9005
LDF 9001             ; 9006
RTN                  ; 9007
LD  2   255          ; 9008
LD  0   0            ; 9009
ST  2   255          ; 9010
RTN                  ; 9011
LDF 9005             ; 9012
RTN                  ; 9013
LDC 0               ; generated from native: array_1 ; 9014
LDF 9018             ; 9015
AP 1                 ; 9016
RTN                  ; 9017
LDF  9020            ; 9018
RTN                  ; 9019
LD  0   0            ; 9020
LDC 100              ; 9021
CEQ                  ; 9022
TSEL    9024 9030    ; 9023
LD  0   1            ; 9024
LDC 0                ; 9025
CEQ                  ; 9026
TSEL    9038 9028    ; 9027
LDC  0               ; 9028
RTN                  ; 9029
LD  0   1            ; 9030
LDC 0                ; 9031
CEQ                  ; 9032
TSEL    9044 9034    ; 9033
LDC  0               ; 9034
RTN                  ; 9035
LD  2   0            ; 9036
RTN                  ; 9037
LDF 9036             ; 9038
RTN                  ; 9039
LD  2   0            ; 9040
LD  0   0            ; 9041
ST  2   0            ; 9042
RTN                  ; 9043
LDF 9040             ; 9044
RTN                  ; 9045
LDF    10416        ;  <== toReadOnlyAccessor  [final Function2<Integer,Key,Function1<Value,Value>> readWriteAccessor] (as blk), ALSO: @lambda_1018 ; 9046
RTN                  ; 9047
LDF    9091         ;  <== emptyEdgesArrayForMap  [int h] (as blk), ALSO: @array_256_impl ; 9048
AP     0             ; 9049
ST     0 1           ; 9050
LD     0 1          ; var wrapper ; 9051
LD     0 0          ; var h ; 9052
LDC 0               ; local var space ; 9053
LDC 0               ; local var space ; 9054
LDF    9060         ;  @fillArrayForMap ; 9055
AP     4             ; 9056
ST     0 2           ; 9057
LDF    10396        ;  @lambda_1016 ; 9058
RTN                  ; 9059
LDC    0            ;  <== fillArrayForMap  [Function2<Integer,Integer,Function1<Function2<Integer,Integer,Function1<ListCons<ParsedEdge>,ListCons<ParsedEdge>>>,Function2<Integer,Integer,Function1<ListCons<ParsedEdge>,ListCons<ParsedEdge>>>>> wrapper, int h] (as blk) ; 9060
ST     0 2           ; 9061
LD     0 1          ; var h ; 9062
LDC    0            ; just constant from code ; 9063
CGT                  ; 9064
SEL    9068 9090     ; 9065
LD     0 2          ; var res ; 9066
RTN                  ; 9067
LDF    9091         ; branch@9068, ALSO: @array_256_impl ; 9068
AP     0             ; 9069
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 9070
LD     0 1          ; var h ; 9071
LDC    1            ; just constant from code ; 9072
SUB                  ; 9073
LD     0 0          ; var wrapper ; 9074
AP     2             ; 9075
AP     1             ; 9076
ST     0 3           ; 9077
LD     0 0          ; var wrapper ; 9078
LD     0 1          ; var h ; 9079
LDC    1            ; just constant from code ; 9080
SUB                  ; 9081
LDC 0               ; local var space ; 9082
LDC 0               ; local var space ; 9083
LDF    9060         ;  @fillArrayForMap ; 9084
AP     4             ; 9085
LDC    1            ; just constant from code ; 9086
ADD                  ; 9087
ST     0 2           ; 9088
JOIN                 ; 9089
JOIN                ; branch@9090 ; 9090
LDC 0               ; generated from native: sample_map ; 9091
LDC 0                ; 9092
LDC 0                ; 9093
LDC 0                ; 9094
LDC 0                ; 9095
LDC 0                ; 9096
LDC 0                ; 9097
LDC 0                ; 9098
LDC 0                ; 9099
LDC 0                ; 9100
LDC 0                ; 9101
LDC 0                ; 9102
LDC 0                ; 9103
LDC 0                ; 9104
LDC 0                ; 9105
LDC 0                ; 9106
LDC 0                ; 9107
LDC 0                ; 9108
LDC 0                ; 9109
LDC 0                ; 9110
LDC 0                ; 9111
LDC 0                ; 9112
LDC 0                ; 9113
LDC 0                ; 9114
CONS                 ; 9115
CONS                 ; 9116
CONS                 ; 9117
CONS                 ; 9118
CONS                 ; 9119
CONS                 ; 9120
CONS                 ; 9121
CONS                 ; 9122
CONS                 ; 9123
CONS                 ; 9124
CONS                 ; 9125
CONS                 ; 9126
CONS                 ; 9127
CONS                 ; 9128
CONS                 ; 9129
CONS                 ; 9130
CONS                 ; 9131
CONS                 ; 9132
CONS                 ; 9133
CONS                 ; 9134
CONS                 ; 9135
CONS                 ; 9136
CONS                 ; 9137
LDC 0                ; 9138
LDC 2                ; 9139
LDC 2                ; 9140
LDC 2                ; 9141
LDC 2                ; 9142
LDC 2                ; 9143
LDC 2                ; 9144
LDC 2                ; 9145
LDC 2                ; 9146
LDC 2                ; 9147
LDC 2                ; 9148
LDC 0                ; 9149
LDC 2                ; 9150
LDC 2                ; 9151
LDC 2                ; 9152
LDC 2                ; 9153
LDC 2                ; 9154
LDC 2                ; 9155
LDC 2                ; 9156
LDC 2                ; 9157
LDC 2                ; 9158
LDC 2                ; 9159
LDC 0                ; 9160
LDC 0                ; 9161
CONS                 ; 9162
CONS                 ; 9163
CONS                 ; 9164
CONS                 ; 9165
CONS                 ; 9166
CONS                 ; 9167
CONS                 ; 9168
CONS                 ; 9169
CONS                 ; 9170
CONS                 ; 9171
CONS                 ; 9172
CONS                 ; 9173
CONS                 ; 9174
CONS                 ; 9175
CONS                 ; 9176
CONS                 ; 9177
CONS                 ; 9178
CONS                 ; 9179
CONS                 ; 9180
CONS                 ; 9181
CONS                 ; 9182
CONS                 ; 9183
CONS                 ; 9184
LDC 0                ; 9185
LDC 2                ; 9186
LDC 0                ; 9187
LDC 0                ; 9188
LDC 0                ; 9189
LDC 2                ; 9190
LDC 0                ; 9191
LDC 0                ; 9192
LDC 0                ; 9193
LDC 0                ; 9194
LDC 2                ; 9195
LDC 0                ; 9196
LDC 2                ; 9197
LDC 0                ; 9198
LDC 0                ; 9199
LDC 0                ; 9200
LDC 0                ; 9201
LDC 2                ; 9202
LDC 0                ; 9203
LDC 0                ; 9204
LDC 0                ; 9205
LDC 2                ; 9206
LDC 0                ; 9207
LDC 0                ; 9208
CONS                 ; 9209
CONS                 ; 9210
CONS                 ; 9211
CONS                 ; 9212
CONS                 ; 9213
CONS                 ; 9214
CONS                 ; 9215
CONS                 ; 9216
CONS                 ; 9217
CONS                 ; 9218
CONS                 ; 9219
CONS                 ; 9220
CONS                 ; 9221
CONS                 ; 9222
CONS                 ; 9223
CONS                 ; 9224
CONS                 ; 9225
CONS                 ; 9226
CONS                 ; 9227
CONS                 ; 9228
CONS                 ; 9229
CONS                 ; 9230
CONS                 ; 9231
LDC 0                ; 9232
LDC 3                ; 9233
LDC 0                ; 9234
LDC 0                ; 9235
LDC 0                ; 9236
LDC 2                ; 9237
LDC 0                ; 9238
LDC 0                ; 9239
LDC 0                ; 9240
LDC 0                ; 9241
LDC 2                ; 9242
LDC 0                ; 9243
LDC 2                ; 9244
LDC 0                ; 9245
LDC 0                ; 9246
LDC 0                ; 9247
LDC 0                ; 9248
LDC 2                ; 9249
LDC 0                ; 9250
LDC 0                ; 9251
LDC 0                ; 9252
LDC 3                ; 9253
LDC 0                ; 9254
LDC 0                ; 9255
CONS                 ; 9256
CONS                 ; 9257
CONS                 ; 9258
CONS                 ; 9259
CONS                 ; 9260
CONS                 ; 9261
CONS                 ; 9262
CONS                 ; 9263
CONS                 ; 9264
CONS                 ; 9265
CONS                 ; 9266
CONS                 ; 9267
CONS                 ; 9268
CONS                 ; 9269
CONS                 ; 9270
CONS                 ; 9271
CONS                 ; 9272
CONS                 ; 9273
CONS                 ; 9274
CONS                 ; 9275
CONS                 ; 9276
CONS                 ; 9277
CONS                 ; 9278
LDC 0                ; 9279
LDC 2                ; 9280
LDC 2                ; 9281
LDC 2                ; 9282
LDC 2                ; 9283
LDC 2                ; 9284
LDC 2                ; 9285
LDC 2                ; 9286
LDC 2                ; 9287
LDC 2                ; 9288
LDC 2                ; 9289
LDC 2                ; 9290
LDC 2                ; 9291
LDC 2                ; 9292
LDC 2                ; 9293
LDC 2                ; 9294
LDC 2                ; 9295
LDC 2                ; 9296
LDC 2                ; 9297
LDC 2                ; 9298
LDC 2                ; 9299
LDC 2                ; 9300
LDC 0                ; 9301
LDC 0                ; 9302
CONS                 ; 9303
CONS                 ; 9304
CONS                 ; 9305
CONS                 ; 9306
CONS                 ; 9307
CONS                 ; 9308
CONS                 ; 9309
CONS                 ; 9310
CONS                 ; 9311
CONS                 ; 9312
CONS                 ; 9313
CONS                 ; 9314
CONS                 ; 9315
CONS                 ; 9316
CONS                 ; 9317
CONS                 ; 9318
CONS                 ; 9319
CONS                 ; 9320
CONS                 ; 9321
CONS                 ; 9322
CONS                 ; 9323
CONS                 ; 9324
CONS                 ; 9325
LDC 0                ; 9326
LDC 2                ; 9327
LDC 0                ; 9328
LDC 0                ; 9329
LDC 0                ; 9330
LDC 2                ; 9331
LDC 0                ; 9332
LDC 2                ; 9333
LDC 0                ; 9334
LDC 0                ; 9335
LDC 0                ; 9336
LDC 0                ; 9337
LDC 0                ; 9338
LDC 0                ; 9339
LDC 0                ; 9340
LDC 2                ; 9341
LDC 0                ; 9342
LDC 2                ; 9343
LDC 0                ; 9344
LDC 0                ; 9345
LDC 0                ; 9346
LDC 2                ; 9347
LDC 0                ; 9348
LDC 0                ; 9349
CONS                 ; 9350
CONS                 ; 9351
CONS                 ; 9352
CONS                 ; 9353
CONS                 ; 9354
CONS                 ; 9355
CONS                 ; 9356
CONS                 ; 9357
CONS                 ; 9358
CONS                 ; 9359
CONS                 ; 9360
CONS                 ; 9361
CONS                 ; 9362
CONS                 ; 9363
CONS                 ; 9364
CONS                 ; 9365
CONS                 ; 9366
CONS                 ; 9367
CONS                 ; 9368
CONS                 ; 9369
CONS                 ; 9370
CONS                 ; 9371
CONS                 ; 9372
LDC 0                ; 9373
LDC 2                ; 9374
LDC 2                ; 9375
LDC 2                ; 9376
LDC 2                ; 9377
LDC 2                ; 9378
LDC 0                ; 9379
LDC 2                ; 9380
LDC 2                ; 9381
LDC 2                ; 9382
LDC 2                ; 9383
LDC 0                ; 9384
LDC 2                ; 9385
LDC 2                ; 9386
LDC 2                ; 9387
LDC 2                ; 9388
LDC 0                ; 9389
LDC 2                ; 9390
LDC 2                ; 9391
LDC 2                ; 9392
LDC 2                ; 9393
LDC 2                ; 9394
LDC 0                ; 9395
LDC 0                ; 9396
CONS                 ; 9397
CONS                 ; 9398
CONS                 ; 9399
CONS                 ; 9400
CONS                 ; 9401
CONS                 ; 9402
CONS                 ; 9403
CONS                 ; 9404
CONS                 ; 9405
CONS                 ; 9406
CONS                 ; 9407
CONS                 ; 9408
CONS                 ; 9409
CONS                 ; 9410
CONS                 ; 9411
CONS                 ; 9412
CONS                 ; 9413
CONS                 ; 9414
CONS                 ; 9415
CONS                 ; 9416
CONS                 ; 9417
CONS                 ; 9418
CONS                 ; 9419
LDC 0                ; 9420
LDC 0                ; 9421
LDC 0                ; 9422
LDC 0                ; 9423
LDC 0                ; 9424
LDC 2                ; 9425
LDC 0                ; 9426
LDC 0                ; 9427
LDC 0                ; 9428
LDC 0                ; 9429
LDC 1                ; 9430
LDC 0                ; 9431
LDC 1                ; 9432
LDC 0                ; 9433
LDC 0                ; 9434
LDC 0                ; 9435
LDC 0                ; 9436
LDC 2                ; 9437
LDC 0                ; 9438
LDC 0                ; 9439
LDC 0                ; 9440
LDC 0                ; 9441
LDC 0                ; 9442
LDC 0                ; 9443
CONS                 ; 9444
CONS                 ; 9445
CONS                 ; 9446
CONS                 ; 9447
CONS                 ; 9448
CONS                 ; 9449
CONS                 ; 9450
CONS                 ; 9451
CONS                 ; 9452
CONS                 ; 9453
CONS                 ; 9454
CONS                 ; 9455
CONS                 ; 9456
CONS                 ; 9457
CONS                 ; 9458
CONS                 ; 9459
CONS                 ; 9460
CONS                 ; 9461
CONS                 ; 9462
CONS                 ; 9463
CONS                 ; 9464
CONS                 ; 9465
CONS                 ; 9466
LDC 0                ; 9467
LDC 1                ; 9468
LDC 1                ; 9469
LDC 1                ; 9470
LDC 0                ; 9471
LDC 2                ; 9472
LDC 0                ; 9473
LDC 1                ; 9474
LDC 1                ; 9475
LDC 1                ; 9476
LDC 1                ; 9477
LDC 6                ; 9478
LDC 1                ; 9479
LDC 1                ; 9480
LDC 1                ; 9481
LDC 1                ; 9482
LDC 0                ; 9483
LDC 2                ; 9484
LDC 0                ; 9485
LDC 1                ; 9486
LDC 1                ; 9487
LDC 1                ; 9488
LDC 0                ; 9489
LDC 0                ; 9490
CONS                 ; 9491
CONS                 ; 9492
CONS                 ; 9493
CONS                 ; 9494
CONS                 ; 9495
CONS                 ; 9496
CONS                 ; 9497
CONS                 ; 9498
CONS                 ; 9499
CONS                 ; 9500
CONS                 ; 9501
CONS                 ; 9502
CONS                 ; 9503
CONS                 ; 9504
CONS                 ; 9505
CONS                 ; 9506
CONS                 ; 9507
CONS                 ; 9508
CONS                 ; 9509
CONS                 ; 9510
CONS                 ; 9511
CONS                 ; 9512
CONS                 ; 9513
LDC 0                ; 9514
LDC 0                ; 9515
LDC 0                ; 9516
LDC 0                ; 9517
LDC 0                ; 9518
LDC 2                ; 9519
LDC 0                ; 9520
LDC 1                ; 9521
LDC 0                ; 9522
LDC 0                ; 9523
LDC 0                ; 9524
LDC 1                ; 9525
LDC 0                ; 9526
LDC 0                ; 9527
LDC 0                ; 9528
LDC 1                ; 9529
LDC 0                ; 9530
LDC 2                ; 9531
LDC 0                ; 9532
LDC 0                ; 9533
LDC 0                ; 9534
LDC 0                ; 9535
LDC 0                ; 9536
LDC 0                ; 9537
CONS                 ; 9538
CONS                 ; 9539
CONS                 ; 9540
CONS                 ; 9541
CONS                 ; 9542
CONS                 ; 9543
CONS                 ; 9544
CONS                 ; 9545
CONS                 ; 9546
CONS                 ; 9547
CONS                 ; 9548
CONS                 ; 9549
CONS                 ; 9550
CONS                 ; 9551
CONS                 ; 9552
CONS                 ; 9553
CONS                 ; 9554
CONS                 ; 9555
CONS                 ; 9556
CONS                 ; 9557
CONS                 ; 9558
CONS                 ; 9559
CONS                 ; 9560
LDC 0                ; 9561
LDC 1                ; 9562
LDC 1                ; 9563
LDC 1                ; 9564
LDC 1                ; 9565
LDC 2                ; 9566
LDC 1                ; 9567
LDC 1                ; 9568
LDC 0                ; 9569
LDC 1                ; 9570
LDC 6                ; 9571
LDC 6                ; 9572
LDC 6                ; 9573
LDC 1                ; 9574
LDC 0                ; 9575
LDC 1                ; 9576
LDC 1                ; 9577
LDC 2                ; 9578
LDC 1                ; 9579
LDC 1                ; 9580
LDC 1                ; 9581
LDC 1                ; 9582
LDC 0                ; 9583
LDC 0                ; 9584
CONS                 ; 9585
CONS                 ; 9586
CONS                 ; 9587
CONS                 ; 9588
CONS                 ; 9589
CONS                 ; 9590
CONS                 ; 9591
CONS                 ; 9592
CONS                 ; 9593
CONS                 ; 9594
CONS                 ; 9595
CONS                 ; 9596
CONS                 ; 9597
CONS                 ; 9598
CONS                 ; 9599
CONS                 ; 9600
CONS                 ; 9601
CONS                 ; 9602
CONS                 ; 9603
CONS                 ; 9604
CONS                 ; 9605
CONS                 ; 9606
CONS                 ; 9607
LDC 0                ; 9608
LDC 0                ; 9609
LDC 0                ; 9610
LDC 0                ; 9611
LDC 0                ; 9612
LDC 2                ; 9613
LDC 0                ; 9614
LDC 1                ; 9615
LDC 0                ; 9616
LDC 0                ; 9617
LDC 0                ; 9618
LDC 0                ; 9619
LDC 0                ; 9620
LDC 0                ; 9621
LDC 0                ; 9622
LDC 1                ; 9623
LDC 0                ; 9624
LDC 2                ; 9625
LDC 0                ; 9626
LDC 0                ; 9627
LDC 0                ; 9628
LDC 0                ; 9629
LDC 0                ; 9630
LDC 0                ; 9631
CONS                 ; 9632
CONS                 ; 9633
CONS                 ; 9634
CONS                 ; 9635
CONS                 ; 9636
CONS                 ; 9637
CONS                 ; 9638
CONS                 ; 9639
CONS                 ; 9640
CONS                 ; 9641
CONS                 ; 9642
CONS                 ; 9643
CONS                 ; 9644
CONS                 ; 9645
CONS                 ; 9646
CONS                 ; 9647
CONS                 ; 9648
CONS                 ; 9649
CONS                 ; 9650
CONS                 ; 9651
CONS                 ; 9652
CONS                 ; 9653
CONS                 ; 9654
LDC 0                ; 9655
LDC 1                ; 9656
LDC 1                ; 9657
LDC 1                ; 9658
LDC 0                ; 9659
LDC 2                ; 9660
LDC 0                ; 9661
LDC 1                ; 9662
LDC 1                ; 9663
LDC 1                ; 9664
LDC 1                ; 9665
LDC 4                ; 9666
LDC 1                ; 9667
LDC 1                ; 9668
LDC 1                ; 9669
LDC 1                ; 9670
LDC 0                ; 9671
LDC 2                ; 9672
LDC 0                ; 9673
LDC 1                ; 9674
LDC 1                ; 9675
LDC 1                ; 9676
LDC 0                ; 9677
LDC 0                ; 9678
CONS                 ; 9679
CONS                 ; 9680
CONS                 ; 9681
CONS                 ; 9682
CONS                 ; 9683
CONS                 ; 9684
CONS                 ; 9685
CONS                 ; 9686
CONS                 ; 9687
CONS                 ; 9688
CONS                 ; 9689
CONS                 ; 9690
CONS                 ; 9691
CONS                 ; 9692
CONS                 ; 9693
CONS                 ; 9694
CONS                 ; 9695
CONS                 ; 9696
CONS                 ; 9697
CONS                 ; 9698
CONS                 ; 9699
CONS                 ; 9700
CONS                 ; 9701
LDC 0                ; 9702
LDC 0                ; 9703
LDC 0                ; 9704
LDC 0                ; 9705
LDC 0                ; 9706
LDC 2                ; 9707
LDC 0                ; 9708
LDC 1                ; 9709
LDC 0                ; 9710
LDC 0                ; 9711
LDC 0                ; 9712
LDC 0                ; 9713
LDC 0                ; 9714
LDC 0                ; 9715
LDC 0                ; 9716
LDC 1                ; 9717
LDC 0                ; 9718
LDC 2                ; 9719
LDC 0                ; 9720
LDC 0                ; 9721
LDC 0                ; 9722
LDC 0                ; 9723
LDC 0                ; 9724
LDC 0                ; 9725
CONS                 ; 9726
CONS                 ; 9727
CONS                 ; 9728
CONS                 ; 9729
CONS                 ; 9730
CONS                 ; 9731
CONS                 ; 9732
CONS                 ; 9733
CONS                 ; 9734
CONS                 ; 9735
CONS                 ; 9736
CONS                 ; 9737
CONS                 ; 9738
CONS                 ; 9739
CONS                 ; 9740
CONS                 ; 9741
CONS                 ; 9742
CONS                 ; 9743
CONS                 ; 9744
CONS                 ; 9745
CONS                 ; 9746
CONS                 ; 9747
CONS                 ; 9748
LDC 0                ; 9749
LDC 2                ; 9750
LDC 2                ; 9751
LDC 2                ; 9752
LDC 2                ; 9753
LDC 2                ; 9754
LDC 2                ; 9755
LDC 2                ; 9756
LDC 2                ; 9757
LDC 2                ; 9758
LDC 2                ; 9759
LDC 0                ; 9760
LDC 2                ; 9761
LDC 2                ; 9762
LDC 2                ; 9763
LDC 2                ; 9764
LDC 2                ; 9765
LDC 2                ; 9766
LDC 2                ; 9767
LDC 2                ; 9768
LDC 2                ; 9769
LDC 2                ; 9770
LDC 0                ; 9771
LDC 0                ; 9772
CONS                 ; 9773
CONS                 ; 9774
CONS                 ; 9775
CONS                 ; 9776
CONS                 ; 9777
CONS                 ; 9778
CONS                 ; 9779
CONS                 ; 9780
CONS                 ; 9781
CONS                 ; 9782
CONS                 ; 9783
CONS                 ; 9784
CONS                 ; 9785
CONS                 ; 9786
CONS                 ; 9787
CONS                 ; 9788
CONS                 ; 9789
CONS                 ; 9790
CONS                 ; 9791
CONS                 ; 9792
CONS                 ; 9793
CONS                 ; 9794
CONS                 ; 9795
LDC 0                ; 9796
LDC 2                ; 9797
LDC 0                ; 9798
LDC 0                ; 9799
LDC 0                ; 9800
LDC 2                ; 9801
LDC 0                ; 9802
LDC 0                ; 9803
LDC 0                ; 9804
LDC 0                ; 9805
LDC 2                ; 9806
LDC 0                ; 9807
LDC 2                ; 9808
LDC 0                ; 9809
LDC 0                ; 9810
LDC 0                ; 9811
LDC 0                ; 9812
LDC 2                ; 9813
LDC 0                ; 9814
LDC 0                ; 9815
LDC 0                ; 9816
LDC 2                ; 9817
LDC 0                ; 9818
LDC 0                ; 9819
CONS                 ; 9820
CONS                 ; 9821
CONS                 ; 9822
CONS                 ; 9823
CONS                 ; 9824
CONS                 ; 9825
CONS                 ; 9826
CONS                 ; 9827
CONS                 ; 9828
CONS                 ; 9829
CONS                 ; 9830
CONS                 ; 9831
CONS                 ; 9832
CONS                 ; 9833
CONS                 ; 9834
CONS                 ; 9835
CONS                 ; 9836
CONS                 ; 9837
CONS                 ; 9838
CONS                 ; 9839
CONS                 ; 9840
CONS                 ; 9841
CONS                 ; 9842
LDC 0                ; 9843
LDC 3                ; 9844
LDC 2                ; 9845
LDC 2                ; 9846
LDC 0                ; 9847
LDC 2                ; 9848
LDC 2                ; 9849
LDC 2                ; 9850
LDC 2                ; 9851
LDC 2                ; 9852
LDC 2                ; 9853
LDC 5                ; 9854
LDC 2                ; 9855
LDC 2                ; 9856
LDC 2                ; 9857
LDC 2                ; 9858
LDC 2                ; 9859
LDC 2                ; 9860
LDC 0                ; 9861
LDC 2                ; 9862
LDC 2                ; 9863
LDC 3                ; 9864
LDC 0                ; 9865
LDC 0                ; 9866
CONS                 ; 9867
CONS                 ; 9868
CONS                 ; 9869
CONS                 ; 9870
CONS                 ; 9871
CONS                 ; 9872
CONS                 ; 9873
CONS                 ; 9874
CONS                 ; 9875
CONS                 ; 9876
CONS                 ; 9877
CONS                 ; 9878
CONS                 ; 9879
CONS                 ; 9880
CONS                 ; 9881
CONS                 ; 9882
CONS                 ; 9883
CONS                 ; 9884
CONS                 ; 9885
CONS                 ; 9886
CONS                 ; 9887
CONS                 ; 9888
CONS                 ; 9889
LDC 0                ; 9890
LDC 0                ; 9891
LDC 0                ; 9892
LDC 2                ; 9893
LDC 0                ; 9894
LDC 2                ; 9895
LDC 0                ; 9896
LDC 2                ; 9897
LDC 0                ; 9898
LDC 0                ; 9899
LDC 0                ; 9900
LDC 0                ; 9901
LDC 0                ; 9902
LDC 0                ; 9903
LDC 0                ; 9904
LDC 2                ; 9905
LDC 0                ; 9906
LDC 2                ; 9907
LDC 0                ; 9908
LDC 2                ; 9909
LDC 0                ; 9910
LDC 0                ; 9911
LDC 0                ; 9912
LDC 0                ; 9913
CONS                 ; 9914
CONS                 ; 9915
CONS                 ; 9916
CONS                 ; 9917
CONS                 ; 9918
CONS                 ; 9919
CONS                 ; 9920
CONS                 ; 9921
CONS                 ; 9922
CONS                 ; 9923
CONS                 ; 9924
CONS                 ; 9925
CONS                 ; 9926
CONS                 ; 9927
CONS                 ; 9928
CONS                 ; 9929
CONS                 ; 9930
CONS                 ; 9931
CONS                 ; 9932
CONS                 ; 9933
CONS                 ; 9934
CONS                 ; 9935
CONS                 ; 9936
LDC 0                ; 9937
LDC 2                ; 9938
LDC 2                ; 9939
LDC 2                ; 9940
LDC 2                ; 9941
LDC 2                ; 9942
LDC 0                ; 9943
LDC 2                ; 9944
LDC 2                ; 9945
LDC 2                ; 9946
LDC 2                ; 9947
LDC 0                ; 9948
LDC 2                ; 9949
LDC 2                ; 9950
LDC 2                ; 9951
LDC 2                ; 9952
LDC 0                ; 9953
LDC 2                ; 9954
LDC 2                ; 9955
LDC 2                ; 9956
LDC 2                ; 9957
LDC 2                ; 9958
LDC 0                ; 9959
LDC 0                ; 9960
CONS                 ; 9961
CONS                 ; 9962
CONS                 ; 9963
CONS                 ; 9964
CONS                 ; 9965
CONS                 ; 9966
CONS                 ; 9967
CONS                 ; 9968
CONS                 ; 9969
CONS                 ; 9970
CONS                 ; 9971
CONS                 ; 9972
CONS                 ; 9973
CONS                 ; 9974
CONS                 ; 9975
CONS                 ; 9976
CONS                 ; 9977
CONS                 ; 9978
CONS                 ; 9979
CONS                 ; 9980
CONS                 ; 9981
CONS                 ; 9982
CONS                 ; 9983
LDC 0                ; 9984
LDC 2                ; 9985
LDC 0                ; 9986
LDC 0                ; 9987
LDC 0                ; 9988
LDC 0                ; 9989
LDC 0                ; 9990
LDC 0                ; 9991
LDC 0                ; 9992
LDC 0                ; 9993
LDC 2                ; 9994
LDC 0                ; 9995
LDC 2                ; 9996
LDC 0                ; 9997
LDC 0                ; 9998
LDC 0                ; 9999
LDC 0                ; 10000
LDC 0                ; 10001
LDC 0                ; 10002
LDC 0                ; 10003
LDC 0                ; 10004
LDC 2                ; 10005
LDC 0                ; 10006
LDC 0                ; 10007
CONS                 ; 10008
CONS                 ; 10009
CONS                 ; 10010
CONS                 ; 10011
CONS                 ; 10012
CONS                 ; 10013
CONS                 ; 10014
CONS                 ; 10015
CONS                 ; 10016
CONS                 ; 10017
CONS                 ; 10018
CONS                 ; 10019
CONS                 ; 10020
CONS                 ; 10021
CONS                 ; 10022
CONS                 ; 10023
CONS                 ; 10024
CONS                 ; 10025
CONS                 ; 10026
CONS                 ; 10027
CONS                 ; 10028
CONS                 ; 10029
CONS                 ; 10030
LDC 0                ; 10031
LDC 2                ; 10032
LDC 2                ; 10033
LDC 2                ; 10034
LDC 2                ; 10035
LDC 2                ; 10036
LDC 2                ; 10037
LDC 2                ; 10038
LDC 2                ; 10039
LDC 2                ; 10040
LDC 2                ; 10041
LDC 2                ; 10042
LDC 2                ; 10043
LDC 2                ; 10044
LDC 2                ; 10045
LDC 2                ; 10046
LDC 2                ; 10047
LDC 2                ; 10048
LDC 2                ; 10049
LDC 2                ; 10050
LDC 2                ; 10051
LDC 2                ; 10052
LDC 0                ; 10053
LDC 0                ; 10054
CONS                 ; 10055
CONS                 ; 10056
CONS                 ; 10057
CONS                 ; 10058
CONS                 ; 10059
CONS                 ; 10060
CONS                 ; 10061
CONS                 ; 10062
CONS                 ; 10063
CONS                 ; 10064
CONS                 ; 10065
CONS                 ; 10066
CONS                 ; 10067
CONS                 ; 10068
CONS                 ; 10069
CONS                 ; 10070
CONS                 ; 10071
CONS                 ; 10072
CONS                 ; 10073
CONS                 ; 10074
CONS                 ; 10075
CONS                 ; 10076
CONS                 ; 10077
LDC 0                ; 10078
LDC 0                ; 10079
LDC 0                ; 10080
LDC 0                ; 10081
LDC 0                ; 10082
LDC 0                ; 10083
LDC 0                ; 10084
LDC 0                ; 10085
LDC 0                ; 10086
LDC 0                ; 10087
LDC 0                ; 10088
LDC 0                ; 10089
LDC 0                ; 10090
LDC 0                ; 10091
LDC 0                ; 10092
LDC 0                ; 10093
LDC 0                ; 10094
LDC 0                ; 10095
LDC 0                ; 10096
LDC 0                ; 10097
LDC 0                ; 10098
LDC 0                ; 10099
LDC 0                ; 10100
LDC 0                ; 10101
CONS                 ; 10102
CONS                 ; 10103
CONS                 ; 10104
CONS                 ; 10105
CONS                 ; 10106
CONS                 ; 10107
CONS                 ; 10108
CONS                 ; 10109
CONS                 ; 10110
CONS                 ; 10111
CONS                 ; 10112
CONS                 ; 10113
CONS                 ; 10114
CONS                 ; 10115
CONS                 ; 10116
CONS                 ; 10117
CONS                 ; 10118
CONS                 ; 10119
CONS                 ; 10120
CONS                 ; 10121
CONS                 ; 10122
CONS                 ; 10123
CONS                 ; 10124
LDC 0                ; 10125
CONS                 ; 10126
CONS                 ; 10127
CONS                 ; 10128
CONS                 ; 10129
CONS                 ; 10130
CONS                 ; 10131
CONS                 ; 10132
CONS                 ; 10133
CONS                 ; 10134
CONS                 ; 10135
CONS                 ; 10136
CONS                 ; 10137
CONS                 ; 10138
CONS                 ; 10139
CONS                 ; 10140
CONS                 ; 10141
CONS                 ; 10142
CONS                 ; 10143
CONS                 ; 10144
CONS                 ; 10145
CONS                 ; 10146
CONS                 ; 10147
LDC 0                ; 10148
LDC 11               ; 10149
LDC 16               ; 10150
CONS                 ; 10151
LDC 2                ; 10152
LDC 3                ; 10153
LDC 0                ; 10154
CONS                 ; 10155
CONS                 ; 10156
CONS                 ; 10157
CONS                 ; 10158
LDC 0                ; 10159
LDC 11               ; 10160
LDC 8                ; 10161
CONS                 ; 10162
LDC 2                ; 10163
CONS                 ; 10164
CONS                 ; 10165
LDC 0                ; 10166
LDC 10               ; 10167
LDC 10               ; 10168
CONS                 ; 10169
LDC 2                ; 10170
CONS                 ; 10171
CONS                 ; 10172
LDC 0                ; 10173
LDC 11               ; 10174
LDC 10               ; 10175
CONS                 ; 10176
LDC 2                ; 10177
CONS                 ; 10178
CONS                 ; 10179
LDC 0                ; 10180
LDC 12               ; 10181
LDC 10               ; 10182
CONS                 ; 10183
LDC 2                ; 10184
CONS                 ; 10185
CONS                 ; 10186
LDC 0                ; 10187
CONS                 ; 10188
CONS                 ; 10189
CONS                 ; 10190
CONS                 ; 10191
LDC 0                ; 10192
CONS                 ; 10193
CONS                 ; 10194
CONS                 ; 10195
RTN                  ; 10196
LD     0 0          ;  <== lambda_1000  [x] (as expr) ; 10197
LD     1 1          ; var g ; 10198
AP     1             ; 10199
LD     1 0          ; var f ; 10200
AP     1             ; 10201
RTN                  ; 10202
LD     0 1          ;  <== lambda_1001  [b, a] (as expr) ; 10203
LD     0 0          ; var b ; 10204
LD     1 0          ; var f ; 10205
AP     2             ; 10206
RTN                  ; 10207
LD     0 0          ;  <== lambda_1002  [d] (as expr) ; 10208
LDF    226          ;  @maybeToList ; 10209
AP     1             ; 10210
RTN                  ; 10211
LD     0 0          ;  <== lambda_1003  [SortedMap<T> acc, Tuple<Integer,T> elem] (as expr) ; 10212
LD     0 1          ; var elem ; 10213
CAR                 ; generateTupleAccess total=2 pos=0 ; 10214
LD     0 1          ; var elem ; 10215
CDR                 ; generateTupleAccess total=2 pos=1 ; 10216
LDF    1308         ;  @sorted_map_assoc ; 10217
AP     3             ; 10218
RTN                  ; 10219
LD     0 0          ;  <== lambda_1004  [Integer a] (as expr) ; 10220
LD     0 0          ; var a ; 10221
LDC    2            ; just constant from code ; 10222
DIV                  ; 10223
LDC    2            ; just constant from code ; 10224
MUL                  ; 10225
CEQ                  ; 10226
SEL    10233 10235  ; IF? 68 ; 10227
LD     0 0          ; var a ; 10228
LDC    2            ; just constant from code ; 10229
DIV                  ; 10230
CONS                 ; 10231
RTN                  ; 10232
LDC    0            ; THEN: 68 ; 10233
JOIN                 ; 10234
LDC    1            ; ELSE: 68 ; 10235
JOIN                 ; 10236
LD     0 1          ;  <== lambda_1005  [Integer elem, Integer acc] (as expr) ; 10237
LDC    2            ; just constant from code ; 10238
MUL                  ; 10239
LD     0 0          ; var elem ; 10240
ADD                  ; 10241
RTN                  ; 10242
LD     0 0          ;  <== lambda_1006  [Tuple<Integer,SortedMap<Cons>> init, Cons step] (as expr) ; 10243
CAR                 ; generateTupleAccess total=2 pos=0 ; 10244
LDC    1            ; just constant from code ; 10245
ADD                  ; 10246
LD     0 0          ; var init ; 10247
CDR                 ; generateTupleAccess total=2 pos=1 ; 10248
LD     0 0          ; var init ; 10249
CAR                 ; generateTupleAccess total=2 pos=0 ; 10250
LD     0 1          ; var step ; 10251
LDF    1308         ;  @sorted_map_assoc ; 10252
AP     3             ; 10253
CONS                 ; 10254
RTN                  ; 10255
LDF    4134         ;  <== lambda_1007  [x] (as expr), ALSO: @array_256 ; 10256
AP     0             ; 10257
RTN                  ; 10258
LD     0 0          ;  <== lambda_1008  [a, b] (as expr) ; 10259
LD     0 1          ; var b ; 10260
CONS                 ; 10261
RTN                  ; 10262
LD     0 0          ;  <== lambda_1009  [Tuple<ListCons<Integer>,Function2<Integer,Integer,Function1<Integer,Integer>>> t] (as expr) ; 10263
CAR                 ; generateTupleAccess total=2 pos=0 ; 10264
LDC    0            ; just constant from code ; 10265
LDF    11086        ;  @lambda_1069 ; 10266
LDF    86           ;  @mapi ; 10267
AP     3             ; 10268
RTN                  ; 10269
LD     0 0          ;  <== lambda_1010  [row, rowy] (as expr) ; 10270
LD     0 1          ; var rowy ; 10271
LDF    4030         ;  @collectWalkableXY ; 10272
AP     2             ; 10273
LDC 0               ; local var space ; 10274
LDF    4022         ;  @my_cat_maybes ; 10275
AP     2             ; 10276
RTN                  ; 10277
LD     1 0          ;  <== lambda_1011  [Point w] (as expr) ; 10278
LD     0 0          ; var w ; 10279
CAR                 ; generateTupleAccess total=2 pos=0 ; 10280
LD     0 0          ; var w ; 10281
CDR                 ; generateTupleAccess total=2 pos=1 ; 10282
LDC 0               ; local var space ; 10283
LDC 0               ; local var space ; 10284
LDC 0               ; local var space ; 10285
LDC 0               ; local var space ; 10286
LDF    3529         ;  @isJunction ; 10287
AP     7             ; 10288
RTN                  ; 10289
LD     0 0          ;  <== lambda_1012  [Point pt] (as expr) ; 10290
LDF    3716         ;  @getPointKey ; 10291
AP     1             ; 10292
LD     0 0          ; var pt ; 10293
CONS                 ; 10294
RTN                  ; 10295
LD     1 0          ;  <== lambda_1013  [j] (as expr) ; 10296
LD     0 0          ; var j ; 10297
LD     1 8          ; var junctions ; 10298
LD     1 6          ; var junctionsList ; 10299
LD     1 1          ; var accessors ; 10300
LDC 0               ; local var space ; 10301
LDF    3647         ;  @findNeighbourJunctions ; 10302
AP     6             ; 10303
RTN                  ; 10304
LD     0 0          ;  <== lambda_1014  [ParsedEdge pe, Integer ix] (as expr) ; 10305
CAR                 ; generateTupleAccess total=8 pos=0 ; 10306
LD     0 0          ; var pe ; 10307
CDR                 ; generateTupleAccess total=8 pos=1 ; 10308
CAR                  ; 10309
LD     0 0          ; var pe ; 10310
CDR                 ; generateTupleAccess total=8 pos=2 ; 10311
CDR                  ; 10312
CAR                  ; 10313
LD     0 0          ; var pe ; 10314
CDR                 ; generateTupleAccess total=8 pos=3 ; 10315
CDR                  ; 10316
CDR                  ; 10317
CAR                  ; 10318
LD     0 0          ; var pe ; 10319
CDR                 ; generateTupleAccess total=8 pos=4 ; 10320
CDR                  ; 10321
CDR                  ; 10322
CDR                  ; 10323
CAR                  ; 10324
LD     0 1          ; var ix ; 10325
LDC    -1           ; just negative constant from code ; 10326
LD     0 0          ; var pe ; 10327
CDR                 ; generateTupleAccess total=8 pos=7 ; 10328
CDR                  ; 10329
CDR                  ; 10330
CDR                  ; 10331
CDR                  ; 10332
CDR                  ; 10333
CDR                  ; 10334
CONS                 ; 10335
CONS                 ; 10336
CONS                 ; 10337
CONS                 ; 10338
CONS                 ; 10339
CONS                 ; 10340
CONS                 ; 10341
RTN                  ; 10342
LD     0 0          ;  <== lambda_1015  [ParsedEdge pe, Integer ix] (as expr) ; 10343
CAR                 ; generateTupleAccess total=8 pos=0 ; 10344
LD     0 0          ; var pe ; 10345
CDR                 ; generateTupleAccess total=8 pos=1 ; 10346
CAR                  ; 10347
LD     0 0          ; var pe ; 10348
CDR                 ; generateTupleAccess total=8 pos=2 ; 10349
CDR                  ; 10350
CAR                  ; 10351
LD     0 0          ; var pe ; 10352
CDR                 ; generateTupleAccess total=8 pos=3 ; 10353
CDR                  ; 10354
CDR                  ; 10355
CAR                  ; 10356
LD     0 0          ; var pe ; 10357
CDR                 ; generateTupleAccess total=8 pos=4 ; 10358
CDR                  ; 10359
CDR                  ; 10360
CDR                  ; 10361
CAR                  ; 10362
LD     0 0          ; var pe ; 10363
CDR                 ; generateTupleAccess total=8 pos=5 ; 10364
CDR                  ; 10365
CDR                  ; 10366
CDR                  ; 10367
CDR                  ; 10368
CAR                  ; 10369
LD     0 0          ; var pe ; 10370
CDR                 ; generateTupleAccess total=8 pos=1 ; 10371
CAR                  ; 10372
LD     0 0          ; var pe ; 10373
CAR                 ; generateTupleAccess total=8 pos=0 ; 10374
LD     1 10         ; var allParsedEdges2 ; 10375
LDF    4008         ;  @findEdge ; 10376
AP     3             ; 10377
LDF    4014         ;  @edgeNumber ; 10378
AP     1             ; 10379
LD     0 0          ; var pe ; 10380
CDR                 ; generateTupleAccess total=8 pos=7 ; 10381
CDR                  ; 10382
CDR                  ; 10383
CDR                  ; 10384
CDR                  ; 10385
CDR                  ; 10386
CDR                  ; 10387
CONS                 ; 10388
CONS                 ; 10389
CONS                 ; 10390
CONS                 ; 10391
CONS                 ; 10392
CONS                 ; 10393
CONS                 ; 10394
RTN                  ; 10395
LD     0 0          ;  <== lambda_1016  [final Integer op, final Point p] (as expr) ; 10396
LD     0 1          ; var p ; 10397
CAR                 ; generateTupleAccess total=2 pos=0 ; 10398
LDC    0            ; NULL literal ; 10399
LDC    100          ; Named Const = VMExtras.GET_READER ; 10400
LD     0 1          ; var p ; 10401
CDR                 ; generateTupleAccess total=2 pos=1 ; 10402
LD     1 1          ; var wrapper ; 10403
AP     2             ; 10404
AP     1             ; 10405
AP     2             ; 10406
RTN                  ; 10407
LD     0 0          ;  <== lambda_1017  [ParsedEdge e] (as expr) ; 10408
CDR                 ; generateTupleAccess total=8 pos=2 ; 10409
CDR                  ; 10410
CAR                  ; 10411
LDF    11094        ;  @lambda_1070 ; 10412
LDF    69           ;  @map ; 10413
AP     2             ; 10414
RTN                  ; 10415
LDC    0            ;  <== lambda_1018  [Key k] (as expr) ; 10416
LDC    100          ; Named Const = VMExtras.GET_READER ; 10417
LD     0 0          ; var k ; 10418
LD     1 0          ; var readWriteAccessor ; 10419
AP     2             ; 10420
AP     1             ; 10421
RTN                  ; 10422
LD     0 0          ;  <== lambda_1019  [GhostState g, ListCons s, Integer ind] (as expr) ; 10423
CDR                 ; generateTupleAccess total=3 pos=1 ; 10424
CAR                  ; 10425
LD     0 1          ; var s ; 10426
LD     0 2          ; var ind ; 10427
CONS                 ; 10428
CONS                 ; 10429
RTN                  ; 10430
LD     0 0          ;  <== lambda_1020  [nextaistate, worldState] (as expr) ; 10431
LD     0 1          ; var worldState ; 10432
LDC 0               ; local var space ; 10433
LDC 0               ; local var space ; 10434
LDC 0               ; local var space ; 10435
LDC 0               ; local var space ; 10436
LDC 0               ; local var space ; 10437
LDC 0               ; local var space ; 10438
LDC 0               ; local var space ; 10439
LDC 0               ; local var space ; 10440
LDC 0               ; local var space ; 10441
LDC 0               ; local var space ; 10442
LDC 0               ; local var space ; 10443
LDC 0               ; local var space ; 10444
LDC 0               ; local var space ; 10445
LDF    2659         ;  @performMove ; 10446
AP     15            ; 10447
RTN                  ; 10448
LD     0 0          ;  <== lambda_1021  [Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10449
CDR                 ; generateTupleAccess total=2 pos=1 ; 10450
CAR                 ; generateTupleAccess total=2 pos=0 ; 10451
LD     1 1          ; var start ; 10452
CAR                 ; generateTupleAccess total=2 pos=0 ; 10453
CEQ                  ; 10454
LDC    1            ; for negation ; 10455
SUB                  ; 10456
LD     0 0          ; var t ; 10457
CDR                 ; generateTupleAccess total=2 pos=1 ; 10458
CDR                 ; generateTupleAccess total=2 pos=1 ; 10459
LD     1 1          ; var start ; 10460
CDR                 ; generateTupleAccess total=2 pos=1 ; 10461
CEQ                  ; 10462
LDC    1            ; for negation ; 10463
SUB                  ; 10464
ADD                  ; 10465
SEL    10468 10470  ; IF? 69 ; 10466
RTN                  ; 10467
LDC    1            ; THEN: 69 ; 10468
JOIN                 ; 10469
LDC    0            ; ELSE: 69 ; 10470
JOIN                 ; 10471
LDC    0            ;  <== lambda_1022  [Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10472
LD     0 0          ; var t ; 10473
CAR                 ; generateTupleAccess total=2 pos=0 ; 10474
AP     1             ; 10475
LDC    2            ; Named Const = CT.PILL ; 10476
CEQ                  ; 10477
SEL    10480 10482  ; IF? 70 ; 10478
RTN                  ; 10479
LDC    1            ; THEN: 70 ; 10480
JOIN                 ; 10481
LDC    0            ; ELSE: 70 ; 10482
JOIN                 ; 10483
LD     0 0          ;  <== lambda_1023  [Point p] (as expr) ; 10484
CAR                 ; generateTupleAccess total=2 pos=0 ; 10485
LD     1 1          ; var start ; 10486
CAR                 ; generateTupleAccess total=2 pos=0 ; 10487
CEQ                  ; 10488
LDC    1            ; for negation ; 10489
SUB                  ; 10490
LD     0 0          ; var p ; 10491
CDR                 ; generateTupleAccess total=2 pos=1 ; 10492
LD     1 1          ; var start ; 10493
CDR                 ; generateTupleAccess total=2 pos=1 ; 10494
CEQ                  ; 10495
LDC    1            ; for negation ; 10496
SUB                  ; 10497
ADD                  ; 10498
SEL    10501 10503  ; IF? 71 ; 10499
RTN                  ; 10500
LDC    1            ; THEN: 71 ; 10501
JOIN                 ; 10502
LDC    0            ; ELSE: 71 ; 10503
JOIN                 ; 10504
LD     1 2          ;  <== lambda_1024  [Point p] (as expr) ; 10505
LD     0 0          ; var p ; 10506
CDR                 ; generateTupleAccess total=2 pos=1 ; 10507
LD     0 0          ; var p ; 10508
CAR                 ; generateTupleAccess total=2 pos=0 ; 10509
LDF    4113         ;  @getMapItem ; 10510
AP     3             ; 10511
LDC    6            ; Named Const = CT.GHOST ; 10512
CEQ                  ; 10513
SEL    10516 10518  ; IF? 72 ; 10514
RTN                  ; 10515
LDC    1            ; THEN: 72 ; 10516
JOIN                 ; 10517
LDC    0            ; ELSE: 72 ; 10518
JOIN                 ; 10519
LDC    0            ;  <== lambda_1025  [Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10520
LD     0 0          ; var t ; 10521
CAR                 ; generateTupleAccess total=2 pos=0 ; 10522
AP     1             ; 10523
LDC    2            ; Named Const = CT.PILL ; 10524
CEQ                  ; 10525
SEL    10528 10530  ; IF? 73 ; 10526
RTN                  ; 10527
LDC    1            ; THEN: 73 ; 10528
JOIN                 ; 10529
LDC    0            ; ELSE: 73 ; 10530
JOIN                 ; 10531
LD     0 0          ;  <== lambda_1026  [Integer acc, Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10532
LDC    0            ; just constant from code ; 10533
LD     0 1          ; var t ; 10534
CAR                 ; generateTupleAccess total=2 pos=0 ; 10535
AP     1             ; 10536
LDC    2            ; Named Const = CT.PILL ; 10537
CEQ                  ; 10538
SEL    10542 10544  ; IF? 74 ; 10539
ADD                  ; 10540
RTN                  ; 10541
LDC    1            ; THEN: 74 ; 10542
JOIN                 ; 10543
LDC    0            ; ELSE: 74 ; 10544
JOIN                 ; 10545
LD     0 0          ;  <== lambda_1027  [Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10546
CDR                 ; generateTupleAccess total=2 pos=1 ; 10547
CAR                 ; generateTupleAccess total=2 pos=0 ; 10548
LD     1 1          ; var start ; 10549
CAR                 ; generateTupleAccess total=2 pos=0 ; 10550
CEQ                  ; 10551
LDC    1            ; for negation ; 10552
SUB                  ; 10553
LD     0 0          ; var t ; 10554
CDR                 ; generateTupleAccess total=2 pos=1 ; 10555
CDR                 ; generateTupleAccess total=2 pos=1 ; 10556
LD     1 1          ; var start ; 10557
CDR                 ; generateTupleAccess total=2 pos=1 ; 10558
CEQ                  ; 10559
LDC    1            ; for negation ; 10560
SUB                  ; 10561
ADD                  ; 10562
SEL    10565 10567  ; IF? 75 ; 10563
RTN                  ; 10564
LDC    1            ; THEN: 75 ; 10565
JOIN                 ; 10566
LDC    0            ; ELSE: 75 ; 10567
JOIN                 ; 10568
LD     0 0          ;  <== lambda_1028  [Integer acc, Tuple<Function1<Integer,Integer>,Point> t] (as expr) ; 10569
LDC    0            ; just constant from code ; 10570
LD     0 1          ; var t ; 10571
CAR                 ; generateTupleAccess total=2 pos=0 ; 10572
AP     1             ; 10573
LDC    2            ; Named Const = CT.PILL ; 10574
CEQ                  ; 10575
SEL    10579 10581  ; IF? 76 ; 10576
ADD                  ; 10577
RTN                  ; 10578
LDC    1            ; THEN: 76 ; 10579
JOIN                 ; 10580
LDC    0            ; ELSE: 76 ; 10581
JOIN                 ; 10582
LD     0 0          ;  <== lambda_1029  [Queue<ListCons<ParsedEdge>> qq, ParsedEdge e] (as expr) ; 10583
LD     0 1          ; var e ; 10584
LDC    0            ; NULL literal ; 10585
CONS                 ; 10586
LDF    407          ;  @queue_enqueue ; 10587
AP     2             ; 10588
RTN                  ; 10589
LD     0 0          ;  <== lambda_1030  [ParsedEdge e] (as expr) ; 10590
CDR                 ; generateTupleAccess total=8 pos=5 ; 10591
CDR                  ; 10592
CDR                  ; 10593
CDR                  ; 10594
CDR                  ; 10595
CAR                  ; 10596
LDC    0            ; just constant from code ; 10597
CONS                 ; 10598
RTN                  ; 10599
LD     0 0          ;  <== lambda_1031  [d] (as expr) ; 10600
LDF    299          ;  @reverse ; 10601
AP     1             ; 10602
RTN                  ; 10603
LD     0 0          ;  <== lambda_1032  [r] (as expr) ; 10604
LDC    5            ; just constant from code ; 10605
LD     0 0          ; var r ; 10606
CAR                  ; 10607
LD     1 2          ; var worldState ; 10608
CDR                 ; generateTupleAccess total=4 pos=1 ; 10609
CAR                  ; 10610
CDR                 ; generateTupleAccess total=5 pos=1 ; 10611
CAR                  ; 10612
LDC 0               ; local var space ; 10613
LDC 0               ; local var space ; 10614
LDF    2642         ;  @countMyEdgePills ; 10615
AP     4             ; 10616
MUL                  ; 10617
LD     0 0          ; var r ; 10618
CDR                  ; 10619
LDF    3315         ;  @countRoutePills ; 10620
AP     1             ; 10621
ADD                  ; 10622
LD     0 0          ; var r ; 10623
LDC 0               ; local var space ; 10624
LDC 0               ; local var space ; 10625
LDC 0               ; local var space ; 10626
LDF    3321         ;  @safetyPercent ; 10627
AP     4             ; 10628
MUL                  ; 10629
LDC    100          ; just constant from code ; 10630
DIV                  ; 10631
LD     0 0          ; var r ; 10632
CAR                  ; 10633
LD     1 2          ; var worldState ; 10634
CDR                 ; generateTupleAccess total=4 pos=1 ; 10635
CAR                  ; 10636
CDR                 ; generateTupleAccess total=5 pos=1 ; 10637
CAR                  ; 10638
LDC 0               ; local var space ; 10639
LDC 0               ; local var space ; 10640
LDF    2642         ;  @countMyEdgePills ; 10641
AP     4             ; 10642
LD     0 0          ; var r ; 10643
CDR                  ; 10644
LDF    3315         ;  @countRoutePills ; 10645
AP     1             ; 10646
LD     0 0          ; var r ; 10647
LDC 0               ; local var space ; 10648
LDC 0               ; local var space ; 10649
LDC 0               ; local var space ; 10650
LDF    3321         ;  @safetyPercent ; 10651
AP     4             ; 10652
CONS                 ; 10653
CONS                 ; 10654
CONS                 ; 10655
CONS                 ; 10656
RTN                  ; 10657
LD     0 0          ;  <== lambda_1033  [Triple<ListCons<ParsedEdge>,Integer,Triple<Integer,Integer,Integer>> t] (as expr) ; 10658
CDR                 ; generateTupleAccess total=3 pos=1 ; 10659
CAR                  ; 10660
RTN                  ; 10661
LDC    0            ;  <== lambda_1034  [ParsedEdge e] (as expr) ; 10662
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 10663
LDC    0            ; just constant from code ; 10664
LD     0 0          ; var e ; 10665
CDR                 ; generateTupleAccess total=8 pos=7 ; 10666
CDR                  ; 10667
CDR                  ; 10668
CDR                  ; 10669
CDR                  ; 10670
CDR                  ; 10671
CDR                  ; 10672
AP     2             ; 10673
AP     1             ; 10674
RTN                  ; 10675
LD     1 0          ;  <== lambda_1035  [g] (as expr) ; 10676
LD     0 0          ; var g ; 10677
LDC 0               ; local var space ; 10678
LDC 0               ; local var space ; 10679
LDC 0               ; local var space ; 10680
LDC 0               ; local var space ; 10681
LDC 0               ; local var space ; 10682
LDC 0               ; local var space ; 10683
LDF    2970         ;  @placeGhostDanger ; 10684
AP     8             ; 10685
RTN                  ; 10686
LD     0 0          ;  <== lambda_1036  [Point p] (as expr) ; 10687
CAR                 ; generateTupleAccess total=2 pos=0 ; 10688
LD     1 2          ; var location ; 10689
CAR                 ; generateTupleAccess total=2 pos=0 ; 10690
CEQ                  ; 10691
LDC    1            ; for negation ; 10692
SUB                  ; 10693
LD     0 0          ; var p ; 10694
CDR                 ; generateTupleAccess total=2 pos=1 ; 10695
LD     1 2          ; var location ; 10696
CDR                 ; generateTupleAccess total=2 pos=1 ; 10697
CEQ                  ; 10698
LDC    1            ; for negation ; 10699
SUB                  ; 10700
ADD                  ; 10701
SEL    10704 10706  ; IF? 77 ; 10702
RTN                  ; 10703
LDC    1            ; THEN: 77 ; 10704
JOIN                 ; 10705
LDC    0            ; ELSE: 77 ; 10706
JOIN                 ; 10707
LD     0 0          ;  <== lambda_1037  [ParsedEdge pe] (as expr) ; 10708
CDR                 ; generateTupleAccess total=8 pos=1 ; 10709
CAR                  ; 10710
LD     1 1          ; var assEdge ; 10711
CAR                 ; generateTupleAccess total=8 pos=0 ; 10712
LDF    3291         ;  @pointEquals ; 10713
AP     2             ; 10714
RTN                  ; 10715
LD     1 2          ;  <== lambda_1038  [ParsedEdge fe] (as expr) ; 10716
LDF    11108        ;  @lambda_1071 ; 10717
LDF    567          ;  @noneof ; 10718
AP     2             ; 10719
RTN                  ; 10720
LD     0 0          ;  <== lambda_1039  [ParsedEdge fe] (as expr) ; 10721
LD     1 4          ; var a ; 10722
CDR                 ; generateTupleAccess total=3 pos=1 ; 10723
CAR                  ; 10724
LD     1 6          ; var countNewEdges ; 10725
DIV                  ; 10726
LDC 0               ; local var space ; 10727
LDC 0               ; local var space ; 10728
LDF    3088         ;  @addEdgeDanger ; 10729
AP     4             ; 10730
RTN                  ; 10731
LD     0 0          ;  <== lambda_1040  [ParsedEdge fe] (as expr) ; 10732
CDR                 ; generateTupleAccess total=8 pos=5 ; 10733
CDR                  ; 10734
CDR                  ; 10735
CDR                  ; 10736
CDR                  ; 10737
CAR                  ; 10738
RTN                  ; 10739
LD     0 0          ;  <== lambda_1041  [ParsedEdge fe] (as expr) ; 10740
CDR                 ; generateTupleAccess total=8 pos=6 ; 10741
CDR                  ; 10742
CDR                  ; 10743
CDR                  ; 10744
CDR                  ; 10745
CDR                  ; 10746
CAR                  ; 10747
RTN                  ; 10748
LD     0 0          ;  <== lambda_1042  [Queue<EdgeDangerWaveItem> qq, ParsedEdge pe] (as expr) ; 10749
LD     0 1          ; var pe ; 10750
LD     1 4          ; var a ; 10751
CDR                 ; generateTupleAccess total=3 pos=1 ; 10752
CAR                  ; 10753
LD     1 6          ; var countNewEdges ; 10754
DIV                  ; 10755
LD     1 4          ; var a ; 10756
CDR                 ; generateTupleAccess total=3 pos=2 ; 10757
CDR                  ; 10758
LD     0 1          ; var pe ; 10759
CDR                 ; generateTupleAccess total=8 pos=4 ; 10760
CDR                  ; 10761
CDR                  ; 10762
CDR                  ; 10763
CAR                  ; 10764
ADD                  ; 10765
CONS                 ; 10766
CONS                 ; 10767
LDF    407          ;  @queue_enqueue ; 10768
AP     2             ; 10769
RTN                  ; 10770
LD     0 0          ;  <== lambda_1043  [e] (as expr) ; 10771
LD     1 1          ; var gs ; 10772
CDR                 ; generateTupleAccess total=3 pos=1 ; 10773
CAR                  ; 10774
LDC 0               ; local var space ; 10775
LDF    3120         ;  @remainingPath ; 10776
AP     3             ; 10777
CAR                  ; 10778
LD     1 6          ; var nextPoint ; 10779
LDF    3291         ;  @pointEquals ; 10780
AP     2             ; 10781
LDC    1            ; just constant from code ; 10782
CEQ                  ; 10783
SEL    10786 10788  ; IF? 78 ; 10784
RTN                  ; 10785
LDC    0            ; THEN: 78 ; 10786
JOIN                 ; 10787
LDC    1            ; ELSE: 78 ; 10788
JOIN                 ; 10789
LD     0 0          ;  <== lambda_1044  [ParsedEdge e] (as expr) ; 10790
LD     0 0          ; var e ; 10791
CDR                 ; generateTupleAccess total=8 pos=4 ; 10792
CDR                  ; 10793
CDR                  ; 10794
CDR                  ; 10795
CAR                  ; 10796
LD     0 0          ; var e ; 10797
LD     1 1          ; var gs ; 10798
CDR                 ; generateTupleAccess total=3 pos=1 ; 10799
CAR                  ; 10800
LDC 0               ; local var space ; 10801
LDF    3120         ;  @remainingPath ; 10802
AP     3             ; 10803
LDC 0               ; local var space ; 10804
LDF    3060         ;  @initialDangerPercent ; 10805
AP     3             ; 10806
LDC 0               ; local var space ; 10807
LDC 0               ; local var space ; 10808
LDF    3088         ;  @addEdgeDanger ; 10809
AP     4             ; 10810
RTN                  ; 10811
LD     1 0          ;  <== lambda_1045  [e] (as expr) ; 10812
LD     1 0          ; var aistate ; 10813
LD     0 0          ; var e ; 10814
LDF    3078         ;  @findReverseEdge ; 10815
AP     2             ; 10816
LDC    100          ; just constant from code ; 10817
LD     0 0          ; var e ; 10818
LD     1 1          ; var gs ; 10819
CDR                 ; generateTupleAccess total=3 pos=1 ; 10820
CAR                  ; 10821
LDC 0               ; local var space ; 10822
LDF    3120         ;  @remainingPath ; 10823
AP     3             ; 10824
LDF    532          ;  @length ; 10825
AP     1             ; 10826
CONS                 ; 10827
CONS                 ; 10828
LDC 0               ; local var space ; 10829
LDC 0               ; local var space ; 10830
LDF    2937         ;  @waveGhostDanger ; 10831
AP     4             ; 10832
RTN                  ; 10833
LD     0 0          ;  <== lambda_1046  [ParsedEdge pe] (as expr) ; 10834
CDR                 ; generateTupleAccess total=8 pos=5 ; 10835
CDR                  ; 10836
CDR                  ; 10837
CDR                  ; 10838
CDR                  ; 10839
CAR                  ; 10840
LD     1 1          ; var e ; 10841
CDR                 ; generateTupleAccess total=8 pos=6 ; 10842
CDR                  ; 10843
CDR                  ; 10844
CDR                  ; 10845
CDR                  ; 10846
CDR                  ; 10847
CAR                  ; 10848
CEQ                  ; 10849
SEL    10852 10854  ; IF? 79 ; 10850
RTN                  ; 10851
LDC    1            ; THEN: 79 ; 10852
JOIN                 ; 10853
LDC    0            ; ELSE: 79 ; 10854
JOIN                 ; 10855
LD     0 0          ;  <== lambda_1047  [Point t] (as expr) ; 10856
LD     1 1          ; var location ; 10857
LDF    3291         ;  @pointEquals ; 10858
AP     2             ; 10859
LDC    0            ; just constant from code ; 10860
CEQ                  ; 10861
SEL    10864 10866  ; IF? 80 ; 10862
RTN                  ; 10863
LDC    1            ; THEN: 80 ; 10864
JOIN                 ; 10865
LDC    0            ; ELSE: 80 ; 10866
JOIN                 ; 10867
LD     0 0          ;  <== lambda_1048  [ParsedEdge pe] (as expr) ; 10868
CAR                 ; generateTupleAccess total=8 pos=0 ; 10869
LD     1 1          ; var lookingEdge ; 10870
LDC 0               ; local var space ; 10871
LDF    3308         ;  @endingPointOfEdgeRoute ; 10872
AP     2             ; 10873
LDF    3291         ;  @pointEquals ; 10874
AP     2             ; 10875
RTN                  ; 10876
LDC    1            ;  <== lambda_1049  [ParsedEdge f] (as expr) ; 10877
LD     1 3          ; var visited ; 10878
LD     0 0          ; var f ; 10879
CDR                 ; generateTupleAccess total=8 pos=5 ; 10880
CDR                  ; 10881
CDR                  ; 10882
CDR                  ; 10883
CDR                  ; 10884
CAR                  ; 10885
LDF    1277         ;  @sorted_map_contains ; 10886
AP     2             ; 10887
SUB                  ; 10888
RTN                  ; 10889
LD     0 0          ;  <== lambda_1050  [pe] (as expr) ; 10890
LD     1 1          ; var worldState ; 10891
CAR                 ; generateTupleAccess total=4 pos=0 ; 10892
LDC 0               ; local var space ; 10893
LDC 0               ; local var space ; 10894
LDF    2615         ;  @collectAnyEdgePills ; 10895
AP     4             ; 10896
LDF    532          ;  @length ; 10897
AP     1             ; 10898
LDC    0            ; just constant from code ; 10899
CGT                  ; 10900
SEL    10903 10905  ; IF? 81 ; 10901
RTN                  ; 10902
LDC    1            ; THEN: 81 ; 10903
JOIN                 ; 10904
LDC    0            ; ELSE: 81 ; 10905
JOIN                 ; 10906
LD     0 0          ;  <== lambda_1051  [ParsedEdge f] (as expr) ; 10907
CDR                 ; generateTupleAccess total=8 pos=5 ; 10908
CDR                  ; 10909
CDR                  ; 10910
CDR                  ; 10911
CDR                  ; 10912
CAR                  ; 10913
LDC    0            ; just constant from code ; 10914
CONS                 ; 10915
RTN                  ; 10916
LD     0 0          ;  <== lambda_1052  [ParsedEdge f] (as expr) ; 10917
CDR                 ; generateTupleAccess total=8 pos=6 ; 10918
CDR                  ; 10919
CDR                  ; 10920
CDR                  ; 10921
CDR                  ; 10922
CDR                  ; 10923
CAR                  ; 10924
LDC    0            ; just constant from code ; 10925
CONS                 ; 10926
RTN                  ; 10927
LD     0 0          ;  <== lambda_1053  [ParsedEdge next] (as expr) ; 10928
LD     1 8          ; var lookingEdge ; 10929
CONS                 ; 10930
RTN                  ; 10931
LD     0 0          ;  <== lambda_1054  [Queue<ListCons<ParsedEdge>> qq, ListCons<ParsedEdge> nr] (as expr) ; 10932
LD     0 1          ; var nr ; 10933
LDF    407          ;  @queue_enqueue ; 10934
AP     2             ; 10935
RTN                  ; 10936
LD     0 0          ;  <== lambda_1055  [ParsedEdge pe] (as expr) ; 10937
CAR                 ; generateTupleAccess total=8 pos=0 ; 10938
LD     1 1          ; var lookingEdge ; 10939
CDR                 ; generateTupleAccess total=8 pos=1 ; 10940
CAR                  ; 10941
LDF    3291         ;  @pointEquals ; 10942
AP     2             ; 10943
RTN                  ; 10944
LD     0 0          ;  <== lambda_1056  [acc, pe] (as expr) ; 10945
LD     0 1          ; var pe ; 10946
LDC 0               ; local var space ; 10947
LDC 0               ; local var space ; 10948
LDF    2628         ;  @countAnyEdgePills ; 10949
AP     3             ; 10950
ADD                  ; 10951
RTN                  ; 10952
LD     0 0          ;  <== lambda_1057  [p] (as expr) ; 10953
CAR                  ; 10954
LD     0 0          ; var p ; 10955
LDF    125          ;  @last ; 10956
AP     1             ; 10957
LD     0 0          ; var p ; 10958
LD     0 0          ; var p ; 10959
LD     1 4          ; var accessors ; 10960
LDF    3676         ;  @makeEdgeAccess ; 10961
AP     2             ; 10962
LD     0 0          ; var p ; 10963
LDF    532          ;  @length ; 10964
AP     1             ; 10965
LDC    1            ; just constant from code ; 10966
SUB                  ; 10967
LDC    -1           ; just negative constant from code ; 10968
LDC    -1           ; just negative constant from code ; 10969
LDF    9014         ;  @array_1 ; 10970
AP     0             ; 10971
CONS                 ; 10972
CONS                 ; 10973
CONS                 ; 10974
CONS                 ; 10975
CONS                 ; 10976
CONS                 ; 10977
CONS                 ; 10978
RTN                  ; 10979
LDC    100          ;  <== lambda_1058  [Point pt] (as expr) ; 10980
LD     0 0          ; var pt ; 10981
CAR                 ; generateTupleAccess total=2 pos=0 ; 10982
LD     1 1          ; var accessors ; 10983
LD     0 0          ; var pt ; 10984
CDR                 ; generateTupleAccess total=2 pos=1 ; 10985
LDF    423          ;  @list_item ; 10986
AP     2             ; 10987
AP     2             ; 10988
RTN                  ; 10989
LD     1 0          ;  <== lambda_1059  [Tuple<Integer,Point> d] (as expr) ; 10990
LD     0 0          ; var d ; 10991
CDR                 ; generateTupleAccess total=2 pos=1 ; 10992
LDF    3518         ;  @isWalkable2 ; 10993
AP     2             ; 10994
LDC    1            ; just constant from code ; 10995
LD     1 4          ; var visited ; 10996
LD     0 0          ; var d ; 10997
CAR                 ; generateTupleAccess total=2 pos=0 ; 10998
LDF    1277         ;  @sorted_map_contains ; 10999
AP     2             ; 11000
SUB                  ; 11001
MUL                  ; 11002
RTN                  ; 11003
LD     1 2          ;  <== lambda_1060  [Tuple<Integer,Point> e] (as expr) ; 11004
LD     0 0          ; var e ; 11005
CAR                 ; generateTupleAccess total=2 pos=0 ; 11006
LDF    1277         ;  @sorted_map_contains ; 11007
AP     2             ; 11008
RTN                  ; 11009
LD     1 3          ;  <== lambda_1061  [Tuple<Integer,Point> e] (as expr) ; 11010
LDF    11123        ;  @lambda_1072 ; 11011
LDF    545          ;  @any ; 11012
AP     2             ; 11013
RTN                  ; 11014
LDC    1            ;  <== lambda_1062  [Tuple<Integer,Point> e] (as expr) ; 11015
LD     1 14         ; var arriveds ; 11016
LD     0 0          ; var e ; 11017
CAR                 ; generateTupleAccess total=2 pos=0 ; 11018
LDF    1277         ;  @sorted_map_contains ; 11019
AP     2             ; 11020
SUB                  ; 11021
RTN                  ; 11022
LD     0 0          ;  <== lambda_1063  [Tuple<Integer,Point> e] (as expr) ; 11023
CDR                 ; generateTupleAccess total=2 pos=1 ; 11024
LD     1 8          ; var thisRoute ; 11025
CONS                 ; 11026
RTN                  ; 11027
LD     0 0          ;  <== lambda_1064  [r, i] (as expr) ; 11028
LD     0 1          ; var i ; 11029
LDF    407          ;  @queue_enqueue ; 11030
AP     2             ; 11031
RTN                  ; 11032
LD     0 0          ;  <== lambda_1065  [Tuple<Integer,Point> e] (as expr) ; 11033
CDR                 ; generateTupleAccess total=2 pos=1 ; 11034
LD     1 8          ; var thisRoute ; 11035
CONS                 ; 11036
RTN                  ; 11037
LD     1 0          ;  <== lambda_1066  [Point ep] (as expr) ; 11038
CAR                 ; generateTupleAccess total=2 pos=0 ; 11039
LD     0 0          ; var ep ; 11040
CAR                 ; generateTupleAccess total=2 pos=0 ; 11041
CEQ                  ; 11042
LD     1 0          ; var pos ; 11043
CDR                 ; generateTupleAccess total=2 pos=1 ; 11044
LD     0 0          ; var ep ; 11045
CDR                 ; generateTupleAccess total=2 pos=1 ; 11046
CEQ                  ; 11047
MUL                  ; 11048
SEL    11051 11053  ; IF? 82 ; 11049
RTN                  ; 11050
LDC    1            ; THEN: 82 ; 11051
JOIN                 ; 11052
LDC    0            ; ELSE: 82 ; 11053
JOIN                 ; 11054
LD     0 0          ;  <== lambda_1067  [ParsedEdge e] (as expr) ; 11055
CAR                 ; generateTupleAccess total=8 pos=0 ; 11056
LD     1 0          ; var a ; 11057
LDF    3291         ;  @pointEquals ; 11058
AP     2             ; 11059
LD     0 0          ; var e ; 11060
CDR                 ; generateTupleAccess total=8 pos=1 ; 11061
CAR                  ; 11062
LD     1 1          ; var b ; 11063
LDF    3291         ;  @pointEquals ; 11064
AP     2             ; 11065
MUL                  ; 11066
RTN                  ; 11067
LD     0 0          ;  <== lambda_1068  [col, colx] (as expr) ; 11068
LDC 0               ; local var space ; 11069
LDF    3504         ;  @isWalkable ; 11070
AP     2             ; 11071
LDC    0            ; just constant from code ; 11072
CGT                  ; 11073
SEL    11076 11083  ; IF? 83 ; 11074
RTN                  ; 11075
LD     0 1          ; THEN: 83 ; 11076
LD     1 1          ; var rowy ; 11077
CONS                 ; 11078
LDC 0               ; local var space ; 11079
LDF    220          ;  @JUST ; 11080
AP     2             ; 11081
JOIN                 ; 11082
LDF    216          ; ELSE: 83, ALSO: @NOTHING ; 11083
AP     0             ; 11084
JOIN                 ; 11085
LD     0 0          ;  <== lambda_1069  [val, ix] (as expr) ; 11086
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 11087
LD     0 1          ; var ix ; 11088
LD     1 0          ; var t ; 11089
CDR                 ; generateTupleAccess total=2 pos=1 ; 11090
AP     2             ; 11091
AP     1             ; 11092
RTN                  ; 11093
LD     1 0          ;  <== lambda_1070  [Point p] (as expr) ; 11094
LDC    0            ; NULL literal ; 11095
LDC    100          ; Named Const = VMExtras.GET_READER ; 11096
LD     0 0          ; var p ; 11097
LD     2 12         ; var edgesForPoint ; 11098
AP     2             ; 11099
AP     1             ; 11100
CONS                 ; 11101
LDC    101          ; Named Const = VMExtras.GET_WRITER ; 11102
LD     0 0          ; var p ; 11103
LD     2 12         ; var edgesForPoint ; 11104
AP     2             ; 11105
AP     1             ; 11106
RTN                  ; 11107
LD     1 0          ;  <== lambda_1071  [Integer ve] (as expr) ; 11108
CDR                 ; generateTupleAccess total=8 pos=5 ; 11109
CDR                  ; 11110
CDR                  ; 11111
CDR                  ; 11112
CDR                  ; 11113
CAR                  ; 11114
LD     0 0          ; var ve ; 11115
CEQ                  ; 11116
SEL    11119 11121  ; IF? 84 ; 11117
RTN                  ; 11118
LDC    1            ; THEN: 84 ; 11119
JOIN                 ; 11120
LDC    0            ; ELSE: 84 ; 11121
JOIN                 ; 11122
LD     1 0          ;  <== lambda_1072  [d] (as expr) ; 11123
CDR                 ; generateTupleAccess total=2 pos=1 ; 11124
LD     0 0          ; var d ; 11125
LDF    3291         ;  @pointEquals ; 11126
AP     2             ; 11127
RTN                  ; 11128
LD     0 0          ;  <== lambda_1073  [x, y] (as expr) ; 11129
LD     0 1          ; var y ; 11130
MUL                  ; 11131
RTN                  ; 11132
LD     0 0          ;  <== lambda_1074  [x, y] (as expr) ; 11133
LD     0 1          ; var y ; 11134
ADD                  ; 11135
LDC    0            ; just constant from code ; 11136
CGT                  ; 11137
SEL    11140 11142  ; IF? 145 ; 11138
RTN                  ; 11139
LDC    1            ; THEN: 145 ; 11140
JOIN                 ; 11141
LDC    0            ; ELSE: 145 ; 11142
JOIN                 ; 11143
LD     0 0          ;  <== lambda_1075  [x, y] (as expr) ; 11144
LD     0 1          ; var y ; 11145
LDF    1850         ;  @intCompare ; 11146
AP     2             ; 11147
LDC    1            ; just constant from code ; 11148
CEQ                  ; 11149
SEL    11152 11154  ; IF? 146 ; 11150
RTN                  ; 11151
LDC    0            ; THEN: 146 ; 11152
JOIN                 ; 11153
LDC    1            ; ELSE: 146 ; 11154
JOIN                 ; 11155
LD     1 2          ;  <== lambda_1076  [Tuple<Integer,Point> e] (as expr) ; 11156
LD     0 0          ; var e ; 11157
CAR                 ; generateTupleAccess total=2 pos=0 ; 11158
LDF    1277         ;  @sorted_map_contains ; 11159
AP     2             ; 11160
RTN                  ; 11161
